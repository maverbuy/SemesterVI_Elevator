
STM32projectCubeMX_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003b58  08003b58  00013b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003b90  08003b90  00013b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003b94  08003b94  00013b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08003b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          0000010c  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000118  20000118  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e86b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001c00  00000000  00000000  0002e8a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007b0  00000000  00000000  000304a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006f8  00000000  00000000  00030c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000425b  00000000  00000000  00031350  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002ee8  00000000  00000000  000355ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00038493  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ea0  00000000  00000000  00038510  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003b40 	.word	0x08003b40

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003b40 	.word	0x08003b40

080001d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001d8:	4a08      	ldr	r2, [pc, #32]	; (80001fc <HAL_Init+0x28>)
 80001da:	4b08      	ldr	r3, [pc, #32]	; (80001fc <HAL_Init+0x28>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f043 0310 	orr.w	r3, r3, #16
 80001e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e4:	2003      	movs	r0, #3
 80001e6:	f000 ff89 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 f808 	bl	8000200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001f0:	f003 fb06 	bl	8003800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001f4:	2300      	movs	r3, #0
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40022000 	.word	0x40022000

08000200 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000208:	4b12      	ldr	r3, [pc, #72]	; (8000254 <HAL_InitTick+0x54>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	4b12      	ldr	r3, [pc, #72]	; (8000258 <HAL_InitTick+0x58>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	4619      	mov	r1, r3
 8000212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000216:	fbb3 f3f1 	udiv	r3, r3, r1
 800021a:	fbb2 f3f3 	udiv	r3, r2, r3
 800021e:	4618      	mov	r0, r3
 8000220:	f000 ffa1 	bl	8001166 <HAL_SYSTICK_Config>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800022a:	2301      	movs	r3, #1
 800022c:	e00e      	b.n	800024c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2b0f      	cmp	r3, #15
 8000232:	d80a      	bhi.n	800024a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000234:	2200      	movs	r2, #0
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	f04f 30ff 	mov.w	r0, #4294967295
 800023c:	f000 ff69 	bl	8001112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000240:	4a06      	ldr	r2, [pc, #24]	; (800025c <HAL_InitTick+0x5c>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000246:	2300      	movs	r3, #0
 8000248:	e000      	b.n	800024c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800024a:	2301      	movs	r3, #1
}
 800024c:	4618      	mov	r0, r3
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000008 	.word	0x20000008
 8000258:	20000004 	.word	0x20000004
 800025c:	20000000 	.word	0x20000000

08000260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <HAL_IncTick+0x20>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	461a      	mov	r2, r3
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <HAL_IncTick+0x24>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4413      	add	r3, r2
 8000270:	4a04      	ldr	r2, [pc, #16]	; (8000284 <HAL_IncTick+0x24>)
 8000272:	6013      	str	r3, [r2, #0]
}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	20000004 	.word	0x20000004
 8000284:	2000002c 	.word	0x2000002c

08000288 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  return uwTick;  
 800028c:	4b03      	ldr	r3, [pc, #12]	; (800029c <HAL_GetTick+0x14>)
 800028e:	681b      	ldr	r3, [r3, #0]
}
 8000290:	4618      	mov	r0, r3
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	2000002c 	.word	0x2000002c

080002a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002a8:	f7ff ffee 	bl	8000288 <HAL_GetTick>
 80002ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002b8:	d005      	beq.n	80002c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <HAL_Delay+0x40>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	461a      	mov	r2, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	4413      	add	r3, r2
 80002c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002c6:	bf00      	nop
 80002c8:	f7ff ffde 	bl	8000288 <HAL_GetTick>
 80002cc:	4602      	mov	r2, r0
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	1ad2      	subs	r2, r2, r3
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d3f7      	bcc.n	80002c8 <HAL_Delay+0x28>
  {
  }
}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000004 	.word	0x20000004

080002e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d101      	bne.n	80002f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80002f2:	2301      	movs	r3, #1
 80002f4:	e0ec      	b.n	80004d0 <HAL_CAN_Init+0x1ec>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d102      	bne.n	8000308 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000302:	6878      	ldr	r0, [r7, #4]
 8000304:	f003 faa0 	bl	8003848 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	6812      	ldr	r2, [r2, #0]
 8000310:	6812      	ldr	r2, [r2, #0]
 8000312:	f022 0202 	bic.w	r2, r2, #2
 8000316:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000318:	f7ff ffb6 	bl	8000288 <HAL_GetTick>
 800031c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800031e:	e012      	b.n	8000346 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000320:	f7ff ffb2 	bl	8000288 <HAL_GetTick>
 8000324:	4602      	mov	r2, r0
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	1ad3      	subs	r3, r2, r3
 800032a:	2b0a      	cmp	r3, #10
 800032c:	d90b      	bls.n	8000346 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000332:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2205      	movs	r2, #5
 800033e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000342:	2301      	movs	r3, #1
 8000344:	e0c4      	b.n	80004d0 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	f003 0302 	and.w	r3, r3, #2
 8000350:	2b00      	cmp	r3, #0
 8000352:	d1e5      	bne.n	8000320 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	6812      	ldr	r2, [r2, #0]
 800035c:	6812      	ldr	r2, [r2, #0]
 800035e:	f042 0201 	orr.w	r2, r2, #1
 8000362:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000364:	f7ff ff90 	bl	8000288 <HAL_GetTick>
 8000368:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800036a:	e012      	b.n	8000392 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800036c:	f7ff ff8c 	bl	8000288 <HAL_GetTick>
 8000370:	4602      	mov	r2, r0
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	1ad3      	subs	r3, r2, r3
 8000376:	2b0a      	cmp	r3, #10
 8000378:	d90b      	bls.n	8000392 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800037e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2205      	movs	r2, #5
 800038a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800038e:	2301      	movs	r3, #1
 8000390:	e09e      	b.n	80004d0 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	f003 0301 	and.w	r3, r3, #1
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0e5      	beq.n	800036c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	7e1b      	ldrb	r3, [r3, #24]
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d108      	bne.n	80003ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	6812      	ldr	r2, [r2, #0]
 80003b0:	6812      	ldr	r2, [r2, #0]
 80003b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	e007      	b.n	80003ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	6812      	ldr	r2, [r2, #0]
 80003c2:	6812      	ldr	r2, [r2, #0]
 80003c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80003c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	7e5b      	ldrb	r3, [r3, #25]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d108      	bne.n	80003e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	6812      	ldr	r2, [r2, #0]
 80003da:	6812      	ldr	r2, [r2, #0]
 80003dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	e007      	b.n	80003f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	6812      	ldr	r2, [r2, #0]
 80003ec:	6812      	ldr	r2, [r2, #0]
 80003ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80003f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	7e9b      	ldrb	r3, [r3, #26]
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d108      	bne.n	800040e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	6812      	ldr	r2, [r2, #0]
 8000404:	6812      	ldr	r2, [r2, #0]
 8000406:	f042 0220 	orr.w	r2, r2, #32
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	e007      	b.n	800041e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	6812      	ldr	r2, [r2, #0]
 8000416:	6812      	ldr	r2, [r2, #0]
 8000418:	f022 0220 	bic.w	r2, r2, #32
 800041c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	7edb      	ldrb	r3, [r3, #27]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d108      	bne.n	8000438 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	6812      	ldr	r2, [r2, #0]
 800042e:	6812      	ldr	r2, [r2, #0]
 8000430:	f022 0210 	bic.w	r2, r2, #16
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	e007      	b.n	8000448 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	6812      	ldr	r2, [r2, #0]
 8000440:	6812      	ldr	r2, [r2, #0]
 8000442:	f042 0210 	orr.w	r2, r2, #16
 8000446:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	7f1b      	ldrb	r3, [r3, #28]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d108      	bne.n	8000462 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	6812      	ldr	r2, [r2, #0]
 8000458:	6812      	ldr	r2, [r2, #0]
 800045a:	f042 0208 	orr.w	r2, r2, #8
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	e007      	b.n	8000472 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	6812      	ldr	r2, [r2, #0]
 800046a:	6812      	ldr	r2, [r2, #0]
 800046c:	f022 0208 	bic.w	r2, r2, #8
 8000470:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	7f5b      	ldrb	r3, [r3, #29]
 8000476:	2b01      	cmp	r3, #1
 8000478:	d108      	bne.n	800048c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	6812      	ldr	r2, [r2, #0]
 8000482:	6812      	ldr	r2, [r2, #0]
 8000484:	f042 0204 	orr.w	r2, r2, #4
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	e007      	b.n	800049c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	6812      	ldr	r2, [r2, #0]
 8000494:	6812      	ldr	r2, [r2, #0]
 8000496:	f022 0204 	bic.w	r2, r2, #4
 800049a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	6891      	ldr	r1, [r2, #8]
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	68d2      	ldr	r2, [r2, #12]
 80004a8:	4311      	orrs	r1, r2
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	6912      	ldr	r2, [r2, #16]
 80004ae:	4311      	orrs	r1, r2
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	6952      	ldr	r2, [r2, #20]
 80004b4:	4311      	orrs	r1, r2
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	6852      	ldr	r2, [r2, #4]
 80004ba:	3a01      	subs	r2, #1
 80004bc:	430a      	orrs	r2, r1
 80004be:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2200      	movs	r2, #0
 80004c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2201      	movs	r2, #1
 80004ca:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80004ce:	2300      	movs	r3, #0
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3710      	adds	r7, #16
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80004d8:	b480      	push	{r7}
 80004da:	b087      	sub	sp, #28
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004ee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80004f0:	7cfb      	ldrb	r3, [r7, #19]
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d003      	beq.n	80004fe <HAL_CAN_ConfigFilter+0x26>
 80004f6:	7cfb      	ldrb	r3, [r7, #19]
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	f040 80aa 	bne.w	8000652 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000504:	f043 0201 	orr.w	r2, r3, #1
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f003 031f 	and.w	r3, r3, #31
 8000516:	2201      	movs	r2, #1
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	43db      	mvns	r3, r3
 8000528:	401a      	ands	r2, r3
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	69db      	ldr	r3, [r3, #28]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d123      	bne.n	8000580 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	43db      	mvns	r3, r3
 8000542:	401a      	ands	r2, r3
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800055a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	3248      	adds	r2, #72	; 0x48
 8000560:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000568:	683a      	ldr	r2, [r7, #0]
 800056a:	6892      	ldr	r2, [r2, #8]
 800056c:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	6812      	ldr	r2, [r2, #0]
 8000572:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000574:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000576:	6979      	ldr	r1, [r7, #20]
 8000578:	3348      	adds	r3, #72	; 0x48
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	440b      	add	r3, r1
 800057e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d122      	bne.n	80005ce <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	431a      	orrs	r2, r3
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80005a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	3248      	adds	r2, #72	; 0x48
 80005ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	6892      	ldr	r2, [r2, #8]
 80005ba:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	68d2      	ldr	r2, [r2, #12]
 80005c0:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80005c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80005c4:	6979      	ldr	r1, [r7, #20]
 80005c6:	3348      	adds	r3, #72	; 0x48
 80005c8:	00db      	lsls	r3, r3, #3
 80005ca:	440b      	add	r3, r1
 80005cc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d109      	bne.n	80005ea <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	43db      	mvns	r3, r3
 80005e0:	401a      	ands	r2, r3
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80005e8:	e007      	b.n	80005fa <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	431a      	orrs	r2, r3
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	691b      	ldr	r3, [r3, #16]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d109      	bne.n	8000616 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	43db      	mvns	r3, r3
 800060c:	401a      	ands	r2, r3
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000614:	e007      	b.n	8000626 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	431a      	orrs	r2, r3
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	6a1b      	ldr	r3, [r3, #32]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d107      	bne.n	800063e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	431a      	orrs	r2, r3
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000644:	f023 0201 	bic.w	r2, r3, #1
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800064e:	2300      	movs	r3, #0
 8000650:	e006      	b.n	8000660 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000656:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
  }
}
 8000660:	4618      	mov	r0, r3
 8000662:	371c      	adds	r7, #28
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f893 3020 	ldrb.w	r3, [r3, #32]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	2b01      	cmp	r3, #1
 800067e:	d12e      	bne.n	80006de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2202      	movs	r2, #2
 8000684:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	6812      	ldr	r2, [r2, #0]
 8000690:	6812      	ldr	r2, [r2, #0]
 8000692:	f022 0201 	bic.w	r2, r2, #1
 8000696:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000698:	f7ff fdf6 	bl	8000288 <HAL_GetTick>
 800069c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800069e:	e012      	b.n	80006c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006a0:	f7ff fdf2 	bl	8000288 <HAL_GetTick>
 80006a4:	4602      	mov	r2, r0
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	2b0a      	cmp	r3, #10
 80006ac:	d90b      	bls.n	80006c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2205      	movs	r2, #5
 80006be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e012      	b.n	80006ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d1e5      	bne.n	80006a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2200      	movs	r2, #0
 80006d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80006da:	2300      	movs	r3, #0
 80006dc:	e006      	b.n	80006ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
  }
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
 8000700:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000708:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000712:	7ffb      	ldrb	r3, [r7, #31]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d003      	beq.n	8000720 <HAL_CAN_AddTxMessage+0x2c>
 8000718:	7ffb      	ldrb	r3, [r7, #31]
 800071a:	2b02      	cmp	r3, #2
 800071c:	f040 80b4 	bne.w	8000888 <HAL_CAN_AddTxMessage+0x194>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000726:	2b00      	cmp	r3, #0
 8000728:	d10a      	bne.n	8000740 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000730:	2b00      	cmp	r3, #0
 8000732:	d105      	bne.n	8000740 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800073a:	2b00      	cmp	r3, #0
 800073c:	f000 809c 	beq.w	8000878 <HAL_CAN_AddTxMessage+0x184>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	0e1b      	lsrs	r3, r3, #24
 8000744:	f003 0303 	and.w	r3, r3, #3
 8000748:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	2b02      	cmp	r3, #2
 800074e:	d907      	bls.n	8000760 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000754:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800075c:	2301      	movs	r3, #1
 800075e:	e09a      	b.n	8000896 <HAL_CAN_AddTxMessage+0x1a2>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000760:	2201      	movs	r2, #1
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	409a      	lsls	r2, r3
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d10d      	bne.n	800078e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	6819      	ldr	r1, [r3, #0]
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000780:	431a      	orrs	r2, r3
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	3318      	adds	r3, #24
 8000786:	011b      	lsls	r3, r3, #4
 8000788:	440b      	add	r3, r1
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	e00f      	b.n	80007ae <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	6819      	ldr	r1, [r3, #0]
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800079c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	68db      	ldr	r3, [r3, #12]
                                                           pHeader->IDE |
 80007a2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	3318      	adds	r3, #24
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	440b      	add	r3, r1
 80007ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	6819      	ldr	r1, [r3, #0]
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	691a      	ldr	r2, [r3, #16]
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	3318      	adds	r3, #24
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	440b      	add	r3, r1
 80007be:	3304      	adds	r3, #4
 80007c0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	7d1b      	ldrb	r3, [r3, #20]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d111      	bne.n	80007ee <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	6819      	ldr	r1, [r3, #0]
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	3318      	adds	r3, #24
 80007d6:	011b      	lsls	r3, r3, #4
 80007d8:	4413      	add	r3, r2
 80007da:	3304      	adds	r3, #4
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	3318      	adds	r3, #24
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	440b      	add	r3, r1
 80007ea:	3304      	adds	r3, #4
 80007ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	6819      	ldr	r1, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3307      	adds	r3, #7
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	061a      	lsls	r2, r3, #24
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	3306      	adds	r3, #6
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	041b      	lsls	r3, r3, #16
 8000802:	431a      	orrs	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3305      	adds	r3, #5
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	021b      	lsls	r3, r3, #8
 800080c:	4313      	orrs	r3, r2
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	3204      	adds	r2, #4
 8000812:	7812      	ldrb	r2, [r2, #0]
 8000814:	431a      	orrs	r2, r3
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	011b      	lsls	r3, r3, #4
 800081a:	440b      	add	r3, r1
 800081c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000820:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	6819      	ldr	r1, [r3, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	3303      	adds	r3, #3
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	061a      	lsls	r2, r3, #24
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3302      	adds	r3, #2
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	041b      	lsls	r3, r3, #16
 8000836:	431a      	orrs	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3301      	adds	r3, #1
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	021b      	lsls	r3, r3, #8
 8000840:	4313      	orrs	r3, r2
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	7812      	ldrb	r2, [r2, #0]
 8000846:	431a      	orrs	r2, r3
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	440b      	add	r3, r1
 800084e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000852:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	6819      	ldr	r1, [r3, #0]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	3318      	adds	r3, #24
 8000860:	011b      	lsls	r3, r3, #4
 8000862:	4413      	add	r3, r2
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f043 0201 	orr.w	r2, r3, #1
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	3318      	adds	r3, #24
 800086e:	011b      	lsls	r3, r3, #4
 8000870:	440b      	add	r3, r1
 8000872:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000874:	2300      	movs	r3, #0
 8000876:	e00e      	b.n	8000896 <HAL_CAN_AddTxMessage+0x1a2>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000884:	2301      	movs	r3, #1
 8000886:	e006      	b.n	8000896 <HAL_CAN_AddTxMessage+0x1a2>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000894:	2301      	movs	r3, #1
  }
}
 8000896:	4618      	mov	r0, r3
 8000898:	3724      	adds	r7, #36	; 0x24
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80008a2:	b480      	push	{r7}
 80008a4:	b087      	sub	sp, #28
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	60f8      	str	r0, [r7, #12]
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008b6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80008b8:	7dfb      	ldrb	r3, [r7, #23]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d003      	beq.n	80008c6 <HAL_CAN_GetRxMessage+0x24>
 80008be:	7dfb      	ldrb	r3, [r7, #23]
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	f040 80f4 	bne.w	8000aae <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d10e      	bne.n	80008ea <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	f003 0303 	and.w	r3, r3, #3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d116      	bne.n	8000908 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e0e8      	b.n	8000abc <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	691b      	ldr	r3, [r3, #16]
 80008f0:	f003 0303 	and.w	r3, r3, #3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d107      	bne.n	8000908 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000904:	2301      	movs	r3, #1
 8000906:	e0d9      	b.n	8000abc <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	331b      	adds	r3, #27
 8000910:	011b      	lsls	r3, r3, #4
 8000912:	4413      	add	r3, r2
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f003 0204 	and.w	r2, r3, #4
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d10c      	bne.n	8000940 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	331b      	adds	r3, #27
 800092e:	011b      	lsls	r3, r3, #4
 8000930:	4413      	add	r3, r2
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	0d5b      	lsrs	r3, r3, #21
 8000936:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	e00b      	b.n	8000958 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	331b      	adds	r3, #27
 8000948:	011b      	lsls	r3, r3, #4
 800094a:	4413      	add	r3, r2
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	08db      	lsrs	r3, r3, #3
 8000950:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	331b      	adds	r3, #27
 8000960:	011b      	lsls	r3, r3, #4
 8000962:	4413      	add	r3, r2
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	085b      	lsrs	r3, r3, #1
 8000968:	f003 0201 	and.w	r2, r3, #1
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	331b      	adds	r3, #27
 8000978:	011b      	lsls	r3, r3, #4
 800097a:	4413      	add	r3, r2
 800097c:	3304      	adds	r3, #4
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f003 020f 	and.w	r2, r3, #15
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	331b      	adds	r3, #27
 8000990:	011b      	lsls	r3, r3, #4
 8000992:	4413      	add	r3, r2
 8000994:	3304      	adds	r3, #4
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	b2da      	uxtb	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	331b      	adds	r3, #27
 80009a8:	011b      	lsls	r3, r3, #4
 80009aa:	4413      	add	r3, r2
 80009ac:	3304      	adds	r3, #4
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	0c1b      	lsrs	r3, r3, #16
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	4413      	add	r3, r2
 80009c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	3301      	adds	r3, #1
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	6811      	ldr	r1, [r2, #0]
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	0112      	lsls	r2, r2, #4
 80009da:	440a      	add	r2, r1
 80009dc:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 80009e0:	6812      	ldr	r2, [r2, #0]
 80009e2:	0a12      	lsrs	r2, r2, #8
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	3302      	adds	r3, #2
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	6811      	ldr	r1, [r2, #0]
 80009f0:	68ba      	ldr	r2, [r7, #8]
 80009f2:	0112      	lsls	r2, r2, #4
 80009f4:	440a      	add	r2, r1
 80009f6:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 80009fa:	6812      	ldr	r2, [r2, #0]
 80009fc:	0c12      	lsrs	r2, r2, #16
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	3303      	adds	r3, #3
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	6811      	ldr	r1, [r2, #0]
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	0112      	lsls	r2, r2, #4
 8000a0e:	440a      	add	r2, r1
 8000a10:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8000a14:	6812      	ldr	r2, [r2, #0]
 8000a16:	0e12      	lsrs	r2, r2, #24
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	3304      	adds	r3, #4
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	6811      	ldr	r1, [r2, #0]
 8000a24:	68ba      	ldr	r2, [r7, #8]
 8000a26:	0112      	lsls	r2, r2, #4
 8000a28:	440a      	add	r2, r1
 8000a2a:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000a2e:	6812      	ldr	r2, [r2, #0]
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	3305      	adds	r3, #5
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	6811      	ldr	r1, [r2, #0]
 8000a3c:	68ba      	ldr	r2, [r7, #8]
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	440a      	add	r2, r1
 8000a42:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000a46:	6812      	ldr	r2, [r2, #0]
 8000a48:	0a12      	lsrs	r2, r2, #8
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	3306      	adds	r3, #6
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	6811      	ldr	r1, [r2, #0]
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	440a      	add	r2, r1
 8000a5c:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000a60:	6812      	ldr	r2, [r2, #0]
 8000a62:	0c12      	lsrs	r2, r2, #16
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	3307      	adds	r3, #7
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	6811      	ldr	r1, [r2, #0]
 8000a70:	68ba      	ldr	r2, [r7, #8]
 8000a72:	0112      	lsls	r2, r2, #4
 8000a74:	440a      	add	r2, r1
 8000a76:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000a7a:	6812      	ldr	r2, [r2, #0]
 8000a7c:	0e12      	lsrs	r2, r2, #24
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d108      	bne.n	8000a9a <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	6812      	ldr	r2, [r2, #0]
 8000a90:	68d2      	ldr	r2, [r2, #12]
 8000a92:	f042 0220 	orr.w	r2, r2, #32
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	e007      	b.n	8000aaa <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	6812      	ldr	r2, [r2, #0]
 8000aa2:	6912      	ldr	r2, [r2, #16]
 8000aa4:	f042 0220 	orr.w	r2, r2, #32
 8000aa8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e006      	b.n	8000abc <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
  }
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	371c      	adds	r7, #28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ad8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d002      	beq.n	8000ae6 <HAL_CAN_ActivateNotification+0x1e>
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d109      	bne.n	8000afa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	6812      	ldr	r2, [r2, #0]
 8000aee:	6951      	ldr	r1, [r2, #20]
 8000af0:	683a      	ldr	r2, [r7, #0]
 8000af2:	430a      	orrs	r2, r1
 8000af4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e006      	b.n	8000b08 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
  }
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	691b      	ldr	r3, [r3, #16]
 8000b46:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000b50:	6a3b      	ldr	r3, [r7, #32]
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d07c      	beq.n	8000c54 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d023      	beq.n	8000bac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2201      	movs	r2, #1
 8000b6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 f97d 	bl	8000e76 <HAL_CAN_TxMailbox0CompleteCallback>
 8000b7c:	e016      	b.n	8000bac <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d004      	beq.n	8000b92 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b90:	e00c      	b.n	8000bac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	f003 0308 	and.w	r3, r3, #8
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d004      	beq.n	8000ba6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ba4:	e002      	b.n	8000bac <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 f983 	bl	8000eb2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d024      	beq.n	8000c00 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bbe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d003      	beq.n	8000bd2 <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f000 f95d 	bl	8000e8a <HAL_CAN_TxMailbox1CompleteCallback>
 8000bd0:	e016      	b.n	8000c00 <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d004      	beq.n	8000be6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
 8000be4:	e00c      	b.n	8000c00 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d004      	beq.n	8000bfa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8000bf8:	e002      	b.n	8000c00 <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 f963 	bl	8000ec6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d024      	beq.n	8000c54 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 f93d 	bl	8000e9e <HAL_CAN_TxMailbox2CompleteCallback>
 8000c24:	e016      	b.n	8000c54 <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d004      	beq.n	8000c3a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
 8000c38:	e00c      	b.n	8000c54 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d004      	beq.n	8000c4e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c4c:	e002      	b.n	8000c54 <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 f943 	bl	8000eda <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000c54:	6a3b      	ldr	r3, [r7, #32]
 8000c56:	f003 0308 	and.w	r3, r3, #8
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00c      	beq.n	8000c78 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f003 0310 	and.w	r3, r3, #16
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d007      	beq.n	8000c78 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2210      	movs	r2, #16
 8000c76:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000c78:	6a3b      	ldr	r3, [r7, #32]
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d00b      	beq.n	8000c9a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	f003 0308 	and.w	r3, r3, #8
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d006      	beq.n	8000c9a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2208      	movs	r2, #8
 8000c92:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f000 f92a 	bl	8000eee <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000c9a:	6a3b      	ldr	r3, [r7, #32]
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d009      	beq.n	8000cb8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d002      	beq.n	8000cb8 <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f002 fd70 	bl	8003798 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000cb8:	6a3b      	ldr	r3, [r7, #32]
 8000cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00c      	beq.n	8000cdc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d007      	beq.n	8000cdc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2210      	movs	r2, #16
 8000cda:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
 8000cde:	f003 0320 	and.w	r3, r3, #32
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d00b      	beq.n	8000cfe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	f003 0308 	and.w	r3, r3, #8
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d006      	beq.n	8000cfe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2208      	movs	r2, #8
 8000cf6:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 f90c 	bl	8000f16 <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	f003 0310 	and.w	r3, r3, #16
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d009      	beq.n	8000d1c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	691b      	ldr	r3, [r3, #16]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d002      	beq.n	8000d1c <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f8f3 	bl	8000f02 <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d00b      	beq.n	8000d3e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	f003 0310 	and.w	r3, r3, #16
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d006      	beq.n	8000d3e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2210      	movs	r2, #16
 8000d36:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f000 f8f6 	bl	8000f2a <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000d3e:	6a3b      	ldr	r3, [r7, #32]
 8000d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d00b      	beq.n	8000d60 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d006      	beq.n	8000d60 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2208      	movs	r2, #8
 8000d58:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f000 f8ef 	bl	8000f3e <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d075      	beq.n	8000e56 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d06c      	beq.n	8000e4e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000d74:	6a3b      	ldr	r3, [r7, #32]
 8000d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d008      	beq.n	8000d90 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d008      	beq.n	8000dac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d008      	beq.n	8000dc8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000dc8:	6a3b      	ldr	r3, [r7, #32]
 8000dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d03d      	beq.n	8000e4e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d038      	beq.n	8000e4e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000de2:	2b30      	cmp	r3, #48	; 0x30
 8000de4:	d017      	beq.n	8000e16 <HAL_CAN_IRQHandler+0x302>
 8000de6:	2b30      	cmp	r3, #48	; 0x30
 8000de8:	d804      	bhi.n	8000df4 <HAL_CAN_IRQHandler+0x2e0>
 8000dea:	2b10      	cmp	r3, #16
 8000dec:	d009      	beq.n	8000e02 <HAL_CAN_IRQHandler+0x2ee>
 8000dee:	2b20      	cmp	r3, #32
 8000df0:	d00c      	beq.n	8000e0c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000df2:	e024      	b.n	8000e3e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000df4:	2b50      	cmp	r3, #80	; 0x50
 8000df6:	d018      	beq.n	8000e2a <HAL_CAN_IRQHandler+0x316>
 8000df8:	2b60      	cmp	r3, #96	; 0x60
 8000dfa:	d01b      	beq.n	8000e34 <HAL_CAN_IRQHandler+0x320>
 8000dfc:	2b40      	cmp	r3, #64	; 0x40
 8000dfe:	d00f      	beq.n	8000e20 <HAL_CAN_IRQHandler+0x30c>
            break;
 8000e00:	e01d      	b.n	8000e3e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	f043 0308 	orr.w	r3, r3, #8
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e0a:	e018      	b.n	8000e3e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e14:	e013      	b.n	8000e3e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	f043 0320 	orr.w	r3, r3, #32
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e1e:	e00e      	b.n	8000e3e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e28:	e009      	b.n	8000e3e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e32:	e004      	b.n	8000e3e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e3c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	6812      	ldr	r2, [r2, #0]
 8000e46:	6992      	ldr	r2, [r2, #24]
 8000e48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e4c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2204      	movs	r2, #4
 8000e54:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d008      	beq.n	8000e6e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e62:	431a      	orrs	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 f872 	bl	8000f52 <HAL_CAN_ErrorCallback>
  }
}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	; 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <NVIC_SetPriorityGrouping+0x44>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <NVIC_SetPriorityGrouping+0x44>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	60d3      	str	r3, [r2, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000fd6:	4909      	ldr	r1, [pc, #36]	; (8000ffc <NVIC_EnableIRQ+0x30>)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	095b      	lsrs	r3, r3, #5
 8000fde:	79fa      	ldrb	r2, [r7, #7]
 8000fe0:	f002 021f 	and.w	r2, r2, #31
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	da0b      	bge.n	800102c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	490d      	ldr	r1, [pc, #52]	; (800104c <NVIC_SetPriority+0x4c>)
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 030f 	and.w	r3, r3, #15
 800101c:	3b04      	subs	r3, #4
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102a:	e009      	b.n	8001040 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	4908      	ldr	r1, [pc, #32]	; (8001050 <NVIC_SetPriority+0x50>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00
 8001050:	e000e100 	.word	0xe000e100

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	2201      	movs	r2, #1
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	1e5a      	subs	r2, r3, #1
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	401a      	ands	r2, r3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109a:	2101      	movs	r1, #1
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	1e59      	subs	r1, r3, #1
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
         );
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	; 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c8:	d301      	bcc.n	80010ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00f      	b.n	80010ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <SysTick_Config+0x40>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d6:	210f      	movs	r1, #15
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f7ff ff90 	bl	8001000 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SysTick_Config+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SysTick_Config+0x40>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff2f 	bl	8000f68 <NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff44 	bl	8000fb0 <NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff90 	bl	8001054 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5f 	bl	8001000 <NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff37 	bl	8000fcc <NVIC_EnableIRQ>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffa2 	bl	80010b8 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b087      	sub	sp, #28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001196:	e160      	b.n	800145a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2101      	movs	r1, #1
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	4013      	ands	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 8152 	beq.w	8001454 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x40>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b12      	cmp	r3, #18
 80011be:	d123      	bne.n	8001208 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	08da      	lsrs	r2, r3, #3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3208      	adds	r2, #8
 80011c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	220f      	movs	r2, #15
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	691a      	ldr	r2, [r3, #16]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	08da      	lsrs	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3208      	adds	r2, #8
 8001202:	6939      	ldr	r1, [r7, #16]
 8001204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0203 	and.w	r2, r3, #3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d00b      	beq.n	800125c <HAL_GPIO_Init+0xdc>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d007      	beq.n	800125c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001250:	2b11      	cmp	r3, #17
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b12      	cmp	r3, #18
 800125a:	d130      	bne.n	80012be <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001292:	2201      	movs	r2, #1
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	f003 0201 	and.w	r2, r3, #1
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 80ac 	beq.w	8001454 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fc:	4a5e      	ldr	r2, [pc, #376]	; (8001478 <HAL_GPIO_Init+0x2f8>)
 80012fe:	4b5e      	ldr	r3, [pc, #376]	; (8001478 <HAL_GPIO_Init+0x2f8>)
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b5b      	ldr	r3, [pc, #364]	; (8001478 <HAL_GPIO_Init+0x2f8>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001314:	4a59      	ldr	r2, [pc, #356]	; (800147c <HAL_GPIO_Init+0x2fc>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3302      	adds	r3, #2
 800131c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	220f      	movs	r2, #15
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800133e:	d025      	beq.n	800138c <HAL_GPIO_Init+0x20c>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a4f      	ldr	r2, [pc, #316]	; (8001480 <HAL_GPIO_Init+0x300>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d01f      	beq.n	8001388 <HAL_GPIO_Init+0x208>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a4e      	ldr	r2, [pc, #312]	; (8001484 <HAL_GPIO_Init+0x304>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d019      	beq.n	8001384 <HAL_GPIO_Init+0x204>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a4d      	ldr	r2, [pc, #308]	; (8001488 <HAL_GPIO_Init+0x308>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d013      	beq.n	8001380 <HAL_GPIO_Init+0x200>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a4c      	ldr	r2, [pc, #304]	; (800148c <HAL_GPIO_Init+0x30c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d00d      	beq.n	800137c <HAL_GPIO_Init+0x1fc>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a4b      	ldr	r2, [pc, #300]	; (8001490 <HAL_GPIO_Init+0x310>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d007      	beq.n	8001378 <HAL_GPIO_Init+0x1f8>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a4a      	ldr	r2, [pc, #296]	; (8001494 <HAL_GPIO_Init+0x314>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d101      	bne.n	8001374 <HAL_GPIO_Init+0x1f4>
 8001370:	2306      	movs	r3, #6
 8001372:	e00c      	b.n	800138e <HAL_GPIO_Init+0x20e>
 8001374:	2307      	movs	r3, #7
 8001376:	e00a      	b.n	800138e <HAL_GPIO_Init+0x20e>
 8001378:	2305      	movs	r3, #5
 800137a:	e008      	b.n	800138e <HAL_GPIO_Init+0x20e>
 800137c:	2304      	movs	r3, #4
 800137e:	e006      	b.n	800138e <HAL_GPIO_Init+0x20e>
 8001380:	2303      	movs	r3, #3
 8001382:	e004      	b.n	800138e <HAL_GPIO_Init+0x20e>
 8001384:	2302      	movs	r3, #2
 8001386:	e002      	b.n	800138e <HAL_GPIO_Init+0x20e>
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <HAL_GPIO_Init+0x20e>
 800138c:	2300      	movs	r3, #0
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	f002 0203 	and.w	r2, r2, #3
 8001394:	0092      	lsls	r2, r2, #2
 8001396:	4093      	lsls	r3, r2
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800139e:	4937      	ldr	r1, [pc, #220]	; (800147c <HAL_GPIO_Init+0x2fc>)
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	3302      	adds	r3, #2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ac:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <HAL_GPIO_Init+0x318>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013d0:	4a31      	ldr	r2, [pc, #196]	; (8001498 <HAL_GPIO_Init+0x318>)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <HAL_GPIO_Init+0x318>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43db      	mvns	r3, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013fa:	4a27      	ldr	r2, [pc, #156]	; (8001498 <HAL_GPIO_Init+0x318>)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001400:	4b25      	ldr	r3, [pc, #148]	; (8001498 <HAL_GPIO_Init+0x318>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001424:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <HAL_GPIO_Init+0x318>)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_GPIO_Init+0x318>)
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x2ce>
        {
          temp |= iocurrent;
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <HAL_GPIO_Init+0x318>)
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3301      	adds	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	fa22 f303 	lsr.w	r3, r2, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	f47f ae97 	bne.w	8001198 <HAL_GPIO_Init+0x18>
  }
}
 800146a:	bf00      	nop
 800146c:	371c      	adds	r7, #28
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000
 800147c:	40010000 	.word	0x40010000
 8001480:	48000400 	.word	0x48000400
 8001484:	48000800 	.word	0x48000800
 8001488:	48000c00 	.word	0x48000c00
 800148c:	48001000 	.word	0x48001000
 8001490:	48001400 	.word	0x48001400
 8001494:	48001800 	.word	0x48001800
 8001498:	40010400 	.word	0x40010400

0800149c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	807b      	strh	r3, [r7, #2]
 80014a8:	4613      	mov	r3, r2
 80014aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ac:	787b      	ldrb	r3, [r7, #1]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014b2:	887a      	ldrh	r2, [r7, #2]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014b8:	e002      	b.n	80014c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d8:	695a      	ldr	r2, [r3, #20]
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	4013      	ands	r3, r2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d006      	beq.n	80014f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014e2:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 f970 	bl	80037d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40010400 	.word	0x40010400

080014fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001502:	af00      	add	r7, sp, #0
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	f000 beda 	b.w	80022ca <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 8164 	beq.w	80017ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001526:	4bb0      	ldr	r3, [pc, #704]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b04      	cmp	r3, #4
 8001530:	d00c      	beq.n	800154c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001532:	4bad      	ldr	r3, [pc, #692]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b08      	cmp	r3, #8
 800153c:	d15a      	bne.n	80015f4 <HAL_RCC_OscConfig+0xf8>
 800153e:	4baa      	ldr	r3, [pc, #680]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800154a:	d153      	bne.n	80015f4 <HAL_RCC_OscConfig+0xf8>
 800154c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001550:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001554:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001558:	fa93 f3a3 	rbit	r3, r3
 800155c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001560:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	fab3 f383 	clz	r3, r3
 8001568:	b2db      	uxtb	r3, r3
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	b2db      	uxtb	r3, r3
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b01      	cmp	r3, #1
 8001576:	d102      	bne.n	800157e <HAL_RCC_OscConfig+0x82>
 8001578:	4b9b      	ldr	r3, [pc, #620]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	e015      	b.n	80015aa <HAL_RCC_OscConfig+0xae>
 800157e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001582:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800158a:	fa93 f3a3 	rbit	r3, r3
 800158e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001592:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001596:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800159a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800159e:	fa93 f3a3 	rbit	r3, r3
 80015a2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80015a6:	4b90      	ldr	r3, [pc, #576]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ae:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80015b2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80015b6:	fa92 f2a2 	rbit	r2, r2
 80015ba:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80015be:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80015c2:	fab2 f282 	clz	r2, r2
 80015c6:	b252      	sxtb	r2, r2
 80015c8:	f042 0220 	orr.w	r2, r2, #32
 80015cc:	b252      	sxtb	r2, r2
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	f002 021f 	and.w	r2, r2, #31
 80015d4:	2101      	movs	r1, #1
 80015d6:	fa01 f202 	lsl.w	r2, r1, r2
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 8105 	beq.w	80017ec <HAL_RCC_OscConfig+0x2f0>
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f040 80ff 	bne.w	80017ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	f000 be6b 	b.w	80022ca <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fe:	d106      	bne.n	800160e <HAL_RCC_OscConfig+0x112>
 8001600:	4a79      	ldr	r2, [pc, #484]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 8001602:	4b79      	ldr	r3, [pc, #484]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	e030      	b.n	8001670 <HAL_RCC_OscConfig+0x174>
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10c      	bne.n	8001632 <HAL_RCC_OscConfig+0x136>
 8001618:	4a73      	ldr	r2, [pc, #460]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 800161a:	4b73      	ldr	r3, [pc, #460]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4a70      	ldr	r2, [pc, #448]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 8001626:	4b70      	ldr	r3, [pc, #448]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	e01e      	b.n	8001670 <HAL_RCC_OscConfig+0x174>
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x15c>
 800163e:	4a6a      	ldr	r2, [pc, #424]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 8001640:	4b69      	ldr	r3, [pc, #420]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	4a67      	ldr	r2, [pc, #412]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 800164c:	4b66      	ldr	r3, [pc, #408]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0x174>
 8001658:	4a63      	ldr	r2, [pc, #396]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 800165a:	4b63      	ldr	r3, [pc, #396]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4a60      	ldr	r2, [pc, #384]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 8001666:	4b60      	ldr	r3, [pc, #384]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d05a      	beq.n	8001730 <HAL_RCC_OscConfig+0x234>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7fe fe05 	bl	8000288 <HAL_GetTick>
 800167e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	e00a      	b.n	800169a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001684:	f7fe fe00 	bl	8000288 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b64      	cmp	r3, #100	; 0x64
 8001692:	d902      	bls.n	800169a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	f000 be18 	b.w	80022ca <HAL_RCC_OscConfig+0xdce>
 800169a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800169e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80016a6:	fa93 f3a3 	rbit	r3, r3
 80016aa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 80016ae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	fab3 f383 	clz	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	095b      	lsrs	r3, r3, #5
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d102      	bne.n	80016cc <HAL_RCC_OscConfig+0x1d0>
 80016c6:	4b48      	ldr	r3, [pc, #288]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	e015      	b.n	80016f8 <HAL_RCC_OscConfig+0x1fc>
 80016cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80016e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80016e8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80016f4:	4b3c      	ldr	r3, [pc, #240]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016fc:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001700:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001704:	fa92 f2a2 	rbit	r2, r2
 8001708:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 800170c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001710:	fab2 f282 	clz	r2, r2
 8001714:	b252      	sxtb	r2, r2
 8001716:	f042 0220 	orr.w	r2, r2, #32
 800171a:	b252      	sxtb	r2, r2
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	f002 021f 	and.w	r2, r2, #31
 8001722:	2101      	movs	r1, #1
 8001724:	fa01 f202 	lsl.w	r2, r1, r2
 8001728:	4013      	ands	r3, r2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0aa      	beq.n	8001684 <HAL_RCC_OscConfig+0x188>
 800172e:	e05e      	b.n	80017ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7fe fdaa 	bl	8000288 <HAL_GetTick>
 8001734:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001738:	e00a      	b.n	8001750 <HAL_RCC_OscConfig+0x254>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800173a:	f7fe fda5 	bl	8000288 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b64      	cmp	r3, #100	; 0x64
 8001748:	d902      	bls.n	8001750 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	f000 bdbd 	b.w	80022ca <HAL_RCC_OscConfig+0xdce>
 8001750:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001754:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001758:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800175c:	fa93 f3a3 	rbit	r3, r3
 8001760:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8001764:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001768:	fab3 f383 	clz	r3, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	b2db      	uxtb	r3, r3
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b01      	cmp	r3, #1
 800177a:	d102      	bne.n	8001782 <HAL_RCC_OscConfig+0x286>
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	e015      	b.n	80017ae <HAL_RCC_OscConfig+0x2b2>
 8001782:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001786:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800178e:	fa93 f3a3 	rbit	r3, r3
 8001792:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001796:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800179a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800179e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80017a2:	fa93 f3a3 	rbit	r3, r3
 80017a6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_RCC_OscConfig+0x2ec>)
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017b2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80017b6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80017ba:	fa92 f2a2 	rbit	r2, r2
 80017be:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 80017c2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80017c6:	fab2 f282 	clz	r2, r2
 80017ca:	b252      	sxtb	r2, r2
 80017cc:	f042 0220 	orr.w	r2, r2, #32
 80017d0:	b252      	sxtb	r2, r2
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	f002 021f 	and.w	r2, r2, #31
 80017d8:	2101      	movs	r1, #1
 80017da:	fa01 f202 	lsl.w	r2, r1, r2
 80017de:	4013      	ands	r3, r2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1aa      	bne.n	800173a <HAL_RCC_OscConfig+0x23e>
 80017e4:	e003      	b.n	80017ee <HAL_RCC_OscConfig+0x2f2>
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 8171 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x5e4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017fe:	4bd0      	ldr	r3, [pc, #832]	; (8001b40 <HAL_RCC_OscConfig+0x644>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00c      	beq.n	8001824 <HAL_RCC_OscConfig+0x328>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800180a:	4bcd      	ldr	r3, [pc, #820]	; (8001b40 <HAL_RCC_OscConfig+0x644>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b08      	cmp	r3, #8
 8001814:	d16e      	bne.n	80018f4 <HAL_RCC_OscConfig+0x3f8>
 8001816:	4bca      	ldr	r3, [pc, #808]	; (8001b40 <HAL_RCC_OscConfig+0x644>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800181e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001822:	d167      	bne.n	80018f4 <HAL_RCC_OscConfig+0x3f8>
 8001824:	2302      	movs	r3, #2
 8001826:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800182e:	fa93 f3a3 	rbit	r3, r3
 8001832:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8001836:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183a:	fab3 f383 	clz	r3, r3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	095b      	lsrs	r3, r3, #5
 8001842:	b2db      	uxtb	r3, r3
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b01      	cmp	r3, #1
 800184c:	d102      	bne.n	8001854 <HAL_RCC_OscConfig+0x358>
 800184e:	4bbc      	ldr	r3, [pc, #752]	; (8001b40 <HAL_RCC_OscConfig+0x644>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	e013      	b.n	800187c <HAL_RCC_OscConfig+0x380>
 8001854:	2302      	movs	r3, #2
 8001856:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800185e:	fa93 f3a3 	rbit	r3, r3
 8001862:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001866:	2302      	movs	r3, #2
 8001868:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800186c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001878:	4bb1      	ldr	r3, [pc, #708]	; (8001b40 <HAL_RCC_OscConfig+0x644>)
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	2202      	movs	r2, #2
 800187e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001882:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001886:	fa92 f2a2 	rbit	r2, r2
 800188a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 800188e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001892:	fab2 f282 	clz	r2, r2
 8001896:	b252      	sxtb	r2, r2
 8001898:	f042 0220 	orr.w	r2, r2, #32
 800189c:	b252      	sxtb	r2, r2
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	f002 021f 	and.w	r2, r2, #31
 80018a4:	2101      	movs	r1, #1
 80018a6:	fa01 f202 	lsl.w	r2, r1, r2
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d007      	beq.n	80018c0 <HAL_RCC_OscConfig+0x3c4>
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d002      	beq.n	80018c0 <HAL_RCC_OscConfig+0x3c4>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	f000 bd05 	b.w	80022ca <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	489f      	ldr	r0, [pc, #636]	; (8001b40 <HAL_RCC_OscConfig+0x644>)
 80018c2:	4b9f      	ldr	r3, [pc, #636]	; (8001b40 <HAL_RCC_OscConfig+0x644>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6919      	ldr	r1, [r3, #16]
 80018d0:	23f8      	movs	r3, #248	; 0xf8
 80018d2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 80018e2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80018e6:	fab3 f383 	clz	r3, r3
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	4313      	orrs	r3, r2
 80018f0:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f2:	e0f5      	b.n	8001ae0 <HAL_RCC_OscConfig+0x5e4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8085 	beq.w	8001a0a <HAL_RCC_OscConfig+0x50e>
 8001900:	2301      	movs	r3, #1
 8001902:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001912:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800191e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	461a      	mov	r2, r3
 8001926:	2301      	movs	r3, #1
 8001928:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7fe fcad 	bl	8000288 <HAL_GetTick>
 800192e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001932:	e00a      	b.n	800194a <HAL_RCC_OscConfig+0x44e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001934:	f7fe fca8 	bl	8000288 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d902      	bls.n	800194a <HAL_RCC_OscConfig+0x44e>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	f000 bcc0 	b.w	80022ca <HAL_RCC_OscConfig+0xdce>
 800194a:	2302      	movs	r3, #2
 800194c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001954:	fa93 f3a3 	rbit	r3, r3
 8001958:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 800195c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001960:	fab3 f383 	clz	r3, r3
 8001964:	b2db      	uxtb	r3, r3
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	b2db      	uxtb	r3, r3
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d102      	bne.n	800197a <HAL_RCC_OscConfig+0x47e>
 8001974:	4b72      	ldr	r3, [pc, #456]	; (8001b40 <HAL_RCC_OscConfig+0x644>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	e013      	b.n	80019a2 <HAL_RCC_OscConfig+0x4a6>
 800197a:	2302      	movs	r3, #2
 800197c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001984:	fa93 f3a3 	rbit	r3, r3
 8001988:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800198c:	2302      	movs	r3, #2
 800198e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001992:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800199e:	4b68      	ldr	r3, [pc, #416]	; (8001b40 <HAL_RCC_OscConfig+0x644>)
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	2202      	movs	r2, #2
 80019a4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80019a8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80019ac:	fa92 f2a2 	rbit	r2, r2
 80019b0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 80019b4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80019b8:	fab2 f282 	clz	r2, r2
 80019bc:	b252      	sxtb	r2, r2
 80019be:	f042 0220 	orr.w	r2, r2, #32
 80019c2:	b252      	sxtb	r2, r2
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	f002 021f 	and.w	r2, r2, #31
 80019ca:	2101      	movs	r1, #1
 80019cc:	fa01 f202 	lsl.w	r2, r1, r2
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0ae      	beq.n	8001934 <HAL_RCC_OscConfig+0x438>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d6:	485a      	ldr	r0, [pc, #360]	; (8001b40 <HAL_RCC_OscConfig+0x644>)
 80019d8:	4b59      	ldr	r3, [pc, #356]	; (8001b40 <HAL_RCC_OscConfig+0x644>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6919      	ldr	r1, [r3, #16]
 80019e6:	23f8      	movs	r3, #248	; 0xf8
 80019e8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 80019f8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	4313      	orrs	r3, r2
 8001a06:	6003      	str	r3, [r0, #0]
 8001a08:	e06a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x5e4>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8001a1c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a20:	fab3 f383 	clz	r3, r3
 8001a24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	461a      	mov	r2, r3
 8001a30:	2300      	movs	r3, #0
 8001a32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7fe fc28 	bl	8000288 <HAL_GetTick>
 8001a38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_OscConfig+0x558>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3e:	f7fe fc23 	bl	8000288 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d902      	bls.n	8001a54 <HAL_RCC_OscConfig+0x558>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	f000 bc3b 	b.w	80022ca <HAL_RCC_OscConfig+0xdce>
 8001a54:	2302      	movs	r3, #2
 8001a56:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a5e:	fa93 f3a3 	rbit	r3, r3
 8001a62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8001a66:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	fab3 f383 	clz	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	095b      	lsrs	r3, r3, #5
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d102      	bne.n	8001a84 <HAL_RCC_OscConfig+0x588>
 8001a7e:	4b30      	ldr	r3, [pc, #192]	; (8001b40 <HAL_RCC_OscConfig+0x644>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	e013      	b.n	8001aac <HAL_RCC_OscConfig+0x5b0>
 8001a84:	2302      	movs	r3, #2
 8001a86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a96:	2302      	movs	r3, #2
 8001a98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001aa8:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <HAL_RCC_OscConfig+0x644>)
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	2202      	movs	r2, #2
 8001aae:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001ab2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001ab6:	fa92 f2a2 	rbit	r2, r2
 8001aba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001abe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ac2:	fab2 f282 	clz	r2, r2
 8001ac6:	b252      	sxtb	r2, r2
 8001ac8:	f042 0220 	orr.w	r2, r2, #32
 8001acc:	b252      	sxtb	r2, r2
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	f002 021f 	and.w	r2, r2, #31
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1ae      	bne.n	8001a3e <HAL_RCC_OscConfig+0x542>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 80d7 	beq.w	8001c9e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d066      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x6cc>
 8001afa:	2301      	movs	r3, #1
 8001afc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8001b0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_RCC_OscConfig+0x648>)
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	2301      	movs	r3, #1
 8001b20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b22:	f7fe fbb1 	bl	8000288 <HAL_GetTick>
 8001b26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2a:	e00d      	b.n	8001b48 <HAL_RCC_OscConfig+0x64c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b2c:	f7fe fbac 	bl	8000288 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d905      	bls.n	8001b48 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e3c4      	b.n	80022ca <HAL_RCC_OscConfig+0xdce>
 8001b40:	40021000 	.word	0x40021000
 8001b44:	10908120 	.word	0x10908120
 8001b48:	2302      	movs	r3, #2
 8001b4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001b64:	fa93 f2a3 	rbit	r2, r3
 8001b68:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001b72:	2202      	movs	r2, #2
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	fa93 f2a3 	rbit	r2, r3
 8001b80:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b84:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b86:	4ba5      	ldr	r3, [pc, #660]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b8a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b8e:	2102      	movs	r1, #2
 8001b90:	6019      	str	r1, [r3, #0]
 8001b92:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	fa93 f1a3 	rbit	r1, r3
 8001b9c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001ba0:	6019      	str	r1, [r3, #0]
  return(result);
 8001ba2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	fab3 f383 	clz	r3, r3
 8001bac:	b25b      	sxtb	r3, r3
 8001bae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bb2:	b25b      	sxtb	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	f003 031f 	and.w	r3, r3, #31
 8001bba:	2101      	movs	r1, #1
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0b2      	beq.n	8001b2c <HAL_RCC_OscConfig+0x630>
 8001bc6:	e06a      	b.n	8001c9e <HAL_RCC_OscConfig+0x7a2>
 8001bc8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001bcc:	2201      	movs	r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	fa93 f2a3 	rbit	r2, r3
 8001bda:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001bde:	601a      	str	r2, [r3, #0]
  return(result);
 8001be0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001be4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	461a      	mov	r2, r3
 8001bec:	4b8c      	ldr	r3, [pc, #560]	; (8001e20 <HAL_RCC_OscConfig+0x924>)
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf8:	f7fe fb46 	bl	8000288 <HAL_GetTick>
 8001bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	e009      	b.n	8001c16 <HAL_RCC_OscConfig+0x71a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c02:	f7fe fb41 	bl	8000288 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e359      	b.n	80022ca <HAL_RCC_OscConfig+0xdce>
 8001c16:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	fa93 f2a3 	rbit	r2, r3
 8001c28:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c32:	2202      	movs	r2, #2
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	fa93 f2a3 	rbit	r2, r3
 8001c40:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	fa93 f2a3 	rbit	r2, r3
 8001c58:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c5c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5e:	4b6f      	ldr	r3, [pc, #444]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c62:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c66:	2102      	movs	r1, #2
 8001c68:	6019      	str	r1, [r3, #0]
 8001c6a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	fa93 f1a3 	rbit	r1, r3
 8001c74:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c78:	6019      	str	r1, [r3, #0]
  return(result);
 8001c7a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	fab3 f383 	clz	r3, r3
 8001c84:	b25b      	sxtb	r3, r3
 8001c86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c8a:	b25b      	sxtb	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	2101      	movs	r1, #1
 8001c94:	fa01 f303 	lsl.w	r3, r1, r3
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1b1      	bne.n	8001c02 <HAL_RCC_OscConfig+0x706>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 8159 	beq.w	8001f60 <HAL_RCC_OscConfig+0xa64>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb4:	4b59      	ldr	r3, [pc, #356]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d112      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x7ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc0:	4a56      	ldr	r2, [pc, #344]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001cc2:	4b56      	ldr	r3, [pc, #344]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cca:	61d3      	str	r3, [r2, #28]
 8001ccc:	4b53      	ldr	r3, [pc, #332]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce6:	4b4f      	ldr	r3, [pc, #316]	; (8001e24 <HAL_RCC_OscConfig+0x928>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d11a      	bne.n	8001d28 <HAL_RCC_OscConfig+0x82c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf2:	4a4c      	ldr	r2, [pc, #304]	; (8001e24 <HAL_RCC_OscConfig+0x928>)
 8001cf4:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <HAL_RCC_OscConfig+0x928>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfe:	f7fe fac3 	bl	8000288 <HAL_GetTick>
 8001d02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d06:	e009      	b.n	8001d1c <HAL_RCC_OscConfig+0x820>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d08:	f7fe fabe 	bl	8000288 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b64      	cmp	r3, #100	; 0x64
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x820>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e2d6      	b.n	80022ca <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <HAL_RCC_OscConfig+0x928>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0ef      	beq.n	8001d08 <HAL_RCC_OscConfig+0x80c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d106      	bne.n	8001d40 <HAL_RCC_OscConfig+0x844>
 8001d32:	4a3a      	ldr	r2, [pc, #232]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001d34:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6213      	str	r3, [r2, #32]
 8001d3e:	e02f      	b.n	8001da0 <HAL_RCC_OscConfig+0x8a4>
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x868>
 8001d4a:	4a34      	ldr	r2, [pc, #208]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001d4c:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	6213      	str	r3, [r2, #32]
 8001d56:	4a31      	ldr	r2, [pc, #196]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001d58:	4b30      	ldr	r3, [pc, #192]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	f023 0304 	bic.w	r3, r3, #4
 8001d60:	6213      	str	r3, [r2, #32]
 8001d62:	e01d      	b.n	8001da0 <HAL_RCC_OscConfig+0x8a4>
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b05      	cmp	r3, #5
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x88c>
 8001d6e:	4a2b      	ldr	r2, [pc, #172]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001d70:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	6213      	str	r3, [r2, #32]
 8001d7a:	4a28      	ldr	r2, [pc, #160]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001d7c:	4b27      	ldr	r3, [pc, #156]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6213      	str	r3, [r2, #32]
 8001d86:	e00b      	b.n	8001da0 <HAL_RCC_OscConfig+0x8a4>
 8001d88:	4a24      	ldr	r2, [pc, #144]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001d8a:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	6213      	str	r3, [r2, #32]
 8001d94:	4a21      	ldr	r2, [pc, #132]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001d96:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	f023 0304 	bic.w	r3, r3, #4
 8001d9e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d06b      	beq.n	8001e82 <HAL_RCC_OscConfig+0x986>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001daa:	f7fe fa6d 	bl	8000288 <HAL_GetTick>
 8001dae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db4:	f7fe fa68 	bl	8000288 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e27e      	b.n	80022ca <HAL_RCC_OscConfig+0xdce>
 8001dcc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	fa93 f2a3 	rbit	r2, r3
 8001dde:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001de8:	2202      	movs	r2, #2
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	fa93 f2a3 	rbit	r2, r3
 8001df6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001dfa:	601a      	str	r2, [r3, #0]
  return(result);
 8001dfc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001e00:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	095b      	lsrs	r3, r3, #5
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d108      	bne.n	8001e28 <HAL_RCC_OscConfig+0x92c>
 8001e16:	4b01      	ldr	r3, [pc, #4]	; (8001e1c <HAL_RCC_OscConfig+0x920>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	e013      	b.n	8001e44 <HAL_RCC_OscConfig+0x948>
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	10908120 	.word	0x10908120
 8001e24:	40007000 	.word	0x40007000
 8001e28:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	fa93 f2a3 	rbit	r2, r3
 8001e3a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	4bc0      	ldr	r3, [pc, #768]	; (8002144 <HAL_RCC_OscConfig+0xc48>)
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001e48:	2102      	movs	r1, #2
 8001e4a:	6011      	str	r1, [r2, #0]
 8001e4c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	fa92 f1a2 	rbit	r1, r2
 8001e56:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e5a:	6011      	str	r1, [r2, #0]
  return(result);
 8001e5c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	fab2 f282 	clz	r2, r2
 8001e66:	b252      	sxtb	r2, r2
 8001e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e6c:	b252      	sxtb	r2, r2
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	f002 021f 	and.w	r2, r2, #31
 8001e74:	2101      	movs	r1, #1
 8001e76:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d099      	beq.n	8001db4 <HAL_RCC_OscConfig+0x8b8>
 8001e80:	e064      	b.n	8001f4c <HAL_RCC_OscConfig+0xa50>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e82:	f7fe fa01 	bl	8000288 <HAL_GetTick>
 8001e86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8a:	e00b      	b.n	8001ea4 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7fe f9fc 	bl	8000288 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e212      	b.n	80022ca <HAL_RCC_OscConfig+0xdce>
 8001ea4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	fa93 f2a3 	rbit	r2, r3
 8001eb6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	fa93 f2a3 	rbit	r2, r3
 8001ece:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ed2:	601a      	str	r2, [r3, #0]
  return(result);
 8001ed4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ed8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	095b      	lsrs	r3, r3, #5
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d102      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x9f8>
 8001eee:	4b95      	ldr	r3, [pc, #596]	; (8002144 <HAL_RCC_OscConfig+0xc48>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	e00d      	b.n	8001f10 <HAL_RCC_OscConfig+0xa14>
 8001ef4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ef8:	2202      	movs	r2, #2
 8001efa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	fa93 f2a3 	rbit	r2, r3
 8001f06:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	4b8d      	ldr	r3, [pc, #564]	; (8002144 <HAL_RCC_OscConfig+0xc48>)
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001f14:	2102      	movs	r1, #2
 8001f16:	6011      	str	r1, [r2, #0]
 8001f18:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	fa92 f1a2 	rbit	r1, r2
 8001f22:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f26:	6011      	str	r1, [r2, #0]
  return(result);
 8001f28:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	fab2 f282 	clz	r2, r2
 8001f32:	b252      	sxtb	r2, r2
 8001f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f38:	b252      	sxtb	r2, r2
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	f002 021f 	and.w	r2, r2, #31
 8001f40:	2101      	movs	r1, #1
 8001f42:	fa01 f202 	lsl.w	r2, r1, r2
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d19f      	bne.n	8001e8c <HAL_RCC_OscConfig+0x990>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f4c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d105      	bne.n	8001f60 <HAL_RCC_OscConfig+0xa64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f54:	4a7b      	ldr	r2, [pc, #492]	; (8002144 <HAL_RCC_OscConfig+0xc48>)
 8001f56:	4b7b      	ldr	r3, [pc, #492]	; (8002144 <HAL_RCC_OscConfig+0xc48>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 81ae 	beq.w	80022c8 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f6c:	4b75      	ldr	r3, [pc, #468]	; (8002144 <HAL_RCC_OscConfig+0xc48>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	f000 81a5 	beq.w	80022c4 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	f040 811d 	bne.w	80021c0 <HAL_RCC_OscConfig+0xcc4>
 8001f86:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	fa93 f2a3 	rbit	r2, r3
 8001f9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f9e:	601a      	str	r2, [r3, #0]
  return(result);
 8001fa0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fa4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7fe f965 	bl	8000288 <HAL_GetTick>
 8001fbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc2:	e009      	b.n	8001fd8 <HAL_RCC_OscConfig+0xadc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc4:	f7fe f960 	bl	8000288 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0xadc>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e178      	b.n	80022ca <HAL_RCC_OscConfig+0xdce>
 8001fd8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	fa93 f2a3 	rbit	r2, r3
 8001fec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ff0:	601a      	str	r2, [r3, #0]
  return(result);
 8001ff2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ff6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	b2db      	uxtb	r3, r3
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b01      	cmp	r3, #1
 800200a:	d102      	bne.n	8002012 <HAL_RCC_OscConfig+0xb16>
 800200c:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <HAL_RCC_OscConfig+0xc48>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	e01b      	b.n	800204a <HAL_RCC_OscConfig+0xb4e>
 8002012:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002016:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800201a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	fa93 f2a3 	rbit	r2, r3
 8002026:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002030:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	fa93 f2a3 	rbit	r2, r3
 8002040:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <HAL_RCC_OscConfig+0xc48>)
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800204e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002052:	6011      	str	r1, [r2, #0]
 8002054:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	fa92 f1a2 	rbit	r1, r2
 800205e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002062:	6011      	str	r1, [r2, #0]
  return(result);
 8002064:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	fab2 f282 	clz	r2, r2
 800206e:	b252      	sxtb	r2, r2
 8002070:	f042 0220 	orr.w	r2, r2, #32
 8002074:	b252      	sxtb	r2, r2
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	f002 021f 	and.w	r2, r2, #31
 800207c:	2101      	movs	r1, #1
 800207e:	fa01 f202 	lsl.w	r2, r1, r2
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d19d      	bne.n	8001fc4 <HAL_RCC_OscConfig+0xac8>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002088:	492e      	ldr	r1, [pc, #184]	; (8002144 <HAL_RCC_OscConfig+0xc48>)
 800208a:	4b2e      	ldr	r3, [pc, #184]	; (8002144 <HAL_RCC_OscConfig+0xc48>)
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	f023 020f 	bic.w	r2, r3, #15
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	4313      	orrs	r3, r2
 800209a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800209c:	4829      	ldr	r0, [pc, #164]	; (8002144 <HAL_RCC_OscConfig+0xc48>)
 800209e:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_RCC_OscConfig+0xc48>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6a19      	ldr	r1, [r3, #32]
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	430b      	orrs	r3, r1
 80020b4:	4313      	orrs	r3, r2
 80020b6:	6043      	str	r3, [r0, #4]
 80020b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	fa93 f2a3 	rbit	r2, r3
 80020cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020d0:	601a      	str	r2, [r3, #0]
  return(result);
 80020d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020d6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	461a      	mov	r2, r3
 80020e8:	2301      	movs	r3, #1
 80020ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7fe f8cc 	bl	8000288 <HAL_GetTick>
 80020f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f4:	e009      	b.n	800210a <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f6:	f7fe f8c7 	bl	8000288 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e0df      	b.n	80022ca <HAL_RCC_OscConfig+0xdce>
 800210a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800210e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	fa93 f2a3 	rbit	r2, r3
 800211e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002122:	601a      	str	r2, [r3, #0]
  return(result);
 8002124:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002128:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b01      	cmp	r3, #1
 800213c:	d104      	bne.n	8002148 <HAL_RCC_OscConfig+0xc4c>
 800213e:	4b01      	ldr	r3, [pc, #4]	; (8002144 <HAL_RCC_OscConfig+0xc48>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	e01d      	b.n	8002180 <HAL_RCC_OscConfig+0xc84>
 8002144:	40021000 	.word	0x40021000
 8002148:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800214c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	fa93 f2a3 	rbit	r2, r3
 800215c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002166:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	fa93 f2a3 	rbit	r2, r3
 8002176:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	4b55      	ldr	r3, [pc, #340]	; (80022d4 <HAL_RCC_OscConfig+0xdd8>)
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002184:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002188:	6011      	str	r1, [r2, #0]
 800218a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	fa92 f1a2 	rbit	r1, r2
 8002194:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002198:	6011      	str	r1, [r2, #0]
  return(result);
 800219a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	fab2 f282 	clz	r2, r2
 80021a4:	b252      	sxtb	r2, r2
 80021a6:	f042 0220 	orr.w	r2, r2, #32
 80021aa:	b252      	sxtb	r2, r2
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	f002 021f 	and.w	r2, r2, #31
 80021b2:	2101      	movs	r1, #1
 80021b4:	fa01 f202 	lsl.w	r2, r1, r2
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d09b      	beq.n	80020f6 <HAL_RCC_OscConfig+0xbfa>
 80021be:	e083      	b.n	80022c8 <HAL_RCC_OscConfig+0xdcc>
 80021c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	fa93 f2a3 	rbit	r2, r3
 80021d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021d8:	601a      	str	r2, [r3, #0]
  return(result);
 80021da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021de:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e0:	fab3 f383 	clz	r3, r3
 80021e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	461a      	mov	r2, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7fe f848 	bl	8000288 <HAL_GetTick>
 80021f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fc:	e009      	b.n	8002212 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fe:	f7fe f843 	bl	8000288 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e05b      	b.n	80022ca <HAL_RCC_OscConfig+0xdce>
 8002212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002216:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800221a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	fa93 f2a3 	rbit	r2, r3
 8002226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800222a:	601a      	str	r2, [r3, #0]
  return(result);
 800222c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002230:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	095b      	lsrs	r3, r3, #5
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d102      	bne.n	800224c <HAL_RCC_OscConfig+0xd50>
 8002246:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <HAL_RCC_OscConfig+0xdd8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	e01b      	b.n	8002284 <HAL_RCC_OscConfig+0xd88>
 800224c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002250:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002254:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	fa93 f2a3 	rbit	r2, r3
 8002260:	f107 0320 	add.w	r3, r7, #32
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	f107 031c 	add.w	r3, r7, #28
 800226a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	f107 031c 	add.w	r3, r7, #28
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	fa93 f2a3 	rbit	r2, r3
 800227a:	f107 0318 	add.w	r3, r7, #24
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <HAL_RCC_OscConfig+0xdd8>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	f107 0214 	add.w	r2, r7, #20
 8002288:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800228c:	6011      	str	r1, [r2, #0]
 800228e:	f107 0214 	add.w	r2, r7, #20
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	fa92 f1a2 	rbit	r1, r2
 8002298:	f107 0210 	add.w	r2, r7, #16
 800229c:	6011      	str	r1, [r2, #0]
  return(result);
 800229e:	f107 0210 	add.w	r2, r7, #16
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	fab2 f282 	clz	r2, r2
 80022a8:	b252      	sxtb	r2, r2
 80022aa:	f042 0220 	orr.w	r2, r2, #32
 80022ae:	b252      	sxtb	r2, r2
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	f002 021f 	and.w	r2, r2, #31
 80022b6:	2101      	movs	r1, #1
 80022b8:	fa01 f202 	lsl.w	r2, r1, r2
 80022bc:	4013      	ands	r3, r2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d19d      	bne.n	80021fe <HAL_RCC_OscConfig+0xd02>
 80022c2:	e001      	b.n	80022c8 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021000 	.word	0x40021000

080022d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b09e      	sub	sp, #120	; 0x78
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e164      	b.n	80025ba <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022f0:	4b92      	ldr	r3, [pc, #584]	; (800253c <HAL_RCC_ClockConfig+0x264>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0207 	and.w	r2, r3, #7
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d210      	bcs.n	8002320 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fe:	498f      	ldr	r1, [pc, #572]	; (800253c <HAL_RCC_ClockConfig+0x264>)
 8002300:	4b8e      	ldr	r3, [pc, #568]	; (800253c <HAL_RCC_ClockConfig+0x264>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 0207 	bic.w	r2, r3, #7
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b8b      	ldr	r3, [pc, #556]	; (800253c <HAL_RCC_ClockConfig+0x264>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0207 	and.w	r2, r3, #7
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e14c      	b.n	80025ba <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232c:	4984      	ldr	r1, [pc, #528]	; (8002540 <HAL_RCC_ClockConfig+0x268>)
 800232e:	4b84      	ldr	r3, [pc, #528]	; (8002540 <HAL_RCC_ClockConfig+0x268>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	4313      	orrs	r3, r2
 800233c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 80df 	beq.w	800250a <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d13d      	bne.n	80023d0 <HAL_RCC_ClockConfig+0xf8>
 8002354:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002358:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800235c:	fa93 f3a3 	rbit	r3, r3
 8002360:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8002362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	d102      	bne.n	800237e <HAL_RCC_ClockConfig+0xa6>
 8002378:	4b71      	ldr	r3, [pc, #452]	; (8002540 <HAL_RCC_ClockConfig+0x268>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	e00f      	b.n	800239e <HAL_RCC_ClockConfig+0xc6>
 800237e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002382:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	667b      	str	r3, [r7, #100]	; 0x64
 800238c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002390:	663b      	str	r3, [r7, #96]	; 0x60
 8002392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	65fb      	str	r3, [r7, #92]	; 0x5c
 800239a:	4b69      	ldr	r3, [pc, #420]	; (8002540 <HAL_RCC_ClockConfig+0x268>)
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80023a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023a6:	fa92 f2a2 	rbit	r2, r2
 80023aa:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80023ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023ae:	fab2 f282 	clz	r2, r2
 80023b2:	b252      	sxtb	r2, r2
 80023b4:	f042 0220 	orr.w	r2, r2, #32
 80023b8:	b252      	sxtb	r2, r2
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	f002 021f 	and.w	r2, r2, #31
 80023c0:	2101      	movs	r1, #1
 80023c2:	fa01 f202 	lsl.w	r2, r1, r2
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d17d      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0f4      	b.n	80025ba <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d13d      	bne.n	8002454 <HAL_RCC_ClockConfig+0x17c>
 80023d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80023e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e8:	fab3 f383 	clz	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d102      	bne.n	8002402 <HAL_RCC_ClockConfig+0x12a>
 80023fc:	4b50      	ldr	r3, [pc, #320]	; (8002540 <HAL_RCC_ClockConfig+0x268>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	e00f      	b.n	8002422 <HAL_RCC_ClockConfig+0x14a>
 8002402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002406:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	647b      	str	r3, [r7, #68]	; 0x44
 8002410:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002414:	643b      	str	r3, [r7, #64]	; 0x40
 8002416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800241e:	4b48      	ldr	r3, [pc, #288]	; (8002540 <HAL_RCC_ClockConfig+0x268>)
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002426:	63ba      	str	r2, [r7, #56]	; 0x38
 8002428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800242a:	fa92 f2a2 	rbit	r2, r2
 800242e:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8002430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002432:	fab2 f282 	clz	r2, r2
 8002436:	b252      	sxtb	r2, r2
 8002438:	f042 0220 	orr.w	r2, r2, #32
 800243c:	b252      	sxtb	r2, r2
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	f002 021f 	and.w	r2, r2, #31
 8002444:	2101      	movs	r1, #1
 8002446:	fa01 f202 	lsl.w	r2, r1, r2
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d13b      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0b2      	b.n	80025ba <HAL_RCC_ClockConfig+0x2e2>
 8002454:	2302      	movs	r3, #2
 8002456:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d102      	bne.n	800247c <HAL_RCC_ClockConfig+0x1a4>
 8002476:	4b32      	ldr	r3, [pc, #200]	; (8002540 <HAL_RCC_ClockConfig+0x268>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	e00d      	b.n	8002498 <HAL_RCC_ClockConfig+0x1c0>
 800247c:	2302      	movs	r3, #2
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
 8002488:	2302      	movs	r3, #2
 800248a:	623b      	str	r3, [r7, #32]
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	fa93 f3a3 	rbit	r3, r3
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <HAL_RCC_ClockConfig+0x268>)
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	2202      	movs	r2, #2
 800249a:	61ba      	str	r2, [r7, #24]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	fa92 f2a2 	rbit	r2, r2
 80024a2:	617a      	str	r2, [r7, #20]
  return(result);
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	fab2 f282 	clz	r2, r2
 80024aa:	b252      	sxtb	r2, r2
 80024ac:	f042 0220 	orr.w	r2, r2, #32
 80024b0:	b252      	sxtb	r2, r2
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	f002 021f 	and.w	r2, r2, #31
 80024b8:	2101      	movs	r1, #1
 80024ba:	fa01 f202 	lsl.w	r2, r1, r2
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e078      	b.n	80025ba <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c8:	491d      	ldr	r1, [pc, #116]	; (8002540 <HAL_RCC_ClockConfig+0x268>)
 80024ca:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HAL_RCC_ClockConfig+0x268>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f023 0203 	bic.w	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024da:	f7fd fed5 	bl	8000288 <HAL_GetTick>
 80024de:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e2:	f7fd fed1 	bl	8000288 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e060      	b.n	80025ba <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_RCC_ClockConfig+0x268>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 020c 	and.w	r2, r3, #12
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	429a      	cmp	r2, r3
 8002508:	d1eb      	bne.n	80024e2 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <HAL_RCC_ClockConfig+0x264>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0207 	and.w	r2, r3, #7
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d915      	bls.n	8002544 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002518:	4908      	ldr	r1, [pc, #32]	; (800253c <HAL_RCC_ClockConfig+0x264>)
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <HAL_RCC_ClockConfig+0x264>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 0207 	bic.w	r2, r3, #7
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <HAL_RCC_ClockConfig+0x264>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0207 	and.w	r2, r3, #7
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d006      	beq.n	8002544 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e03f      	b.n	80025ba <HAL_RCC_ClockConfig+0x2e2>
 800253a:	bf00      	nop
 800253c:	40022000 	.word	0x40022000
 8002540:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002550:	491c      	ldr	r1, [pc, #112]	; (80025c4 <HAL_RCC_ClockConfig+0x2ec>)
 8002552:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <HAL_RCC_ClockConfig+0x2ec>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800256e:	4915      	ldr	r1, [pc, #84]	; (80025c4 <HAL_RCC_ClockConfig+0x2ec>)
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <HAL_RCC_ClockConfig+0x2ec>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002582:	f000 f825 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 8002586:	4601      	mov	r1, r0
 8002588:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <HAL_RCC_ClockConfig+0x2ec>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002590:	23f0      	movs	r3, #240	; 0xf0
 8002592:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	60fb      	str	r3, [r7, #12]
  return(result);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	fa22 f303 	lsr.w	r3, r2, r3
 80025a6:	4a08      	ldr	r2, [pc, #32]	; (80025c8 <HAL_RCC_ClockConfig+0x2f0>)
 80025a8:	5cd3      	ldrb	r3, [r2, r3]
 80025aa:	fa21 f303 	lsr.w	r3, r1, r3
 80025ae:	4a07      	ldr	r2, [pc, #28]	; (80025cc <HAL_RCC_ClockConfig+0x2f4>)
 80025b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80025b2:	2000      	movs	r0, #0
 80025b4:	f7fd fe24 	bl	8000200 <HAL_InitTick>
  
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3778      	adds	r7, #120	; 0x78
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000
 80025c8:	08003b78 	.word	0x08003b78
 80025cc:	20000008 	.word	0x20000008

080025d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b08b      	sub	sp, #44	; 0x2c
 80025d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	2300      	movs	r3, #0
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	2300      	movs	r3, #0
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80025ea:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d002      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0x30>
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d003      	beq.n	8002606 <HAL_RCC_GetSysClockFreq+0x36>
 80025fe:	e03f      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002600:	4b25      	ldr	r3, [pc, #148]	; (8002698 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002602:	623b      	str	r3, [r7, #32]
      break;
 8002604:	e03f      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800260c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002610:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	607b      	str	r3, [r7, #4]
  return(result);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	fa22 f303 	lsr.w	r3, r2, r3
 8002624:	4a1d      	ldr	r2, [pc, #116]	; (800269c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002626:	5cd3      	ldrb	r3, [r2, r3]
 8002628:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800262a:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <HAL_RCC_GetSysClockFreq+0xc4>)
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	f003 020f 	and.w	r2, r3, #15
 8002632:	230f      	movs	r3, #15
 8002634:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	60fb      	str	r3, [r7, #12]
  return(result);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
 8002648:	4a15      	ldr	r2, [pc, #84]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800264a:	5cd3      	ldrb	r3, [r2, r3]
 800264c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002658:	4a0f      	ldr	r2, [pc, #60]	; (8002698 <HAL_RCC_GetSysClockFreq+0xc8>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
 8002668:	e007      	b.n	800267a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800266a:	4a0b      	ldr	r2, [pc, #44]	; (8002698 <HAL_RCC_GetSysClockFreq+0xc8>)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	fb02 f303 	mul.w	r3, r2, r3
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	623b      	str	r3, [r7, #32]
      break;
 800267e:	e002      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002682:	623b      	str	r3, [r7, #32]
      break;
 8002684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002686:	6a3b      	ldr	r3, [r7, #32]
}
 8002688:	4618      	mov	r0, r3
 800268a:	372c      	adds	r7, #44	; 0x2c
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	40021000 	.word	0x40021000
 8002698:	007a1200 	.word	0x007a1200
 800269c:	08003b58 	.word	0x08003b58
 80026a0:	08003b68 	.word	0x08003b68

080026a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026aa:	681b      	ldr	r3, [r3, #0]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000008 	.word	0x20000008

080026bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80026c2:	f7ff ffef 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 80026c6:	4601      	mov	r1, r0
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026d0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80026d4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	fa93 f3a3 	rbit	r3, r3
 80026dc:	603b      	str	r3, [r7, #0]
  return(result);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	fab3 f383 	clz	r3, r3
 80026e4:	fa22 f303 	lsr.w	r3, r2, r3
 80026e8:	4a04      	ldr	r2, [pc, #16]	; (80026fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80026ea:	5cd3      	ldrb	r3, [r2, r3]
 80026ec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	08003b88 	.word	0x08003b88

08002700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002706:	f7ff ffcd 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 800270a:	4601      	mov	r1, r0
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002714:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002718:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	603b      	str	r3, [r7, #0]
  return(result);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	fab3 f383 	clz	r3, r3
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
 800272c:	4a04      	ldr	r2, [pc, #16]	; (8002740 <HAL_RCC_GetPCLK2Freq+0x40>)
 800272e:	5cd3      	ldrb	r3, [r2, r3]
 8002730:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	08003b88 	.word	0x08003b88

08002744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b092      	sub	sp, #72	; 0x48
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 80d6 	beq.w	800290e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002768:	4b4d      	ldr	r3, [pc, #308]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10e      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002774:	4a4a      	ldr	r2, [pc, #296]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002776:	4b4a      	ldr	r3, [pc, #296]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277e:	61d3      	str	r3, [r2, #28]
 8002780:	4b47      	ldr	r3, [pc, #284]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278c:	2301      	movs	r3, #1
 800278e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002792:	4b44      	ldr	r3, [pc, #272]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d118      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279e:	4a41      	ldr	r2, [pc, #260]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a0:	4b40      	ldr	r3, [pc, #256]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027aa:	f7fd fd6d 	bl	8000288 <HAL_GetTick>
 80027ae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b0:	e008      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b2:	f7fd fd69 	bl	8000288 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b64      	cmp	r3, #100	; 0x64
 80027be:	d901      	bls.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e1d4      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c4:	4b37      	ldr	r3, [pc, #220]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027d0:	4b33      	ldr	r3, [pc, #204]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8083 	beq.w	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80027ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d07b      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027f0:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	461a      	mov	r2, r3
 8002818:	2301      	movs	r3, #1
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002820:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800282a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800282c:	fab3 f383 	clz	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	461a      	mov	r2, r3
 800283a:	2300      	movs	r3, #0
 800283c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800283e:	4a18      	ldr	r2, [pc, #96]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002842:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d04c      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284e:	f7fd fd1b 	bl	8000288 <HAL_GetTick>
 8002852:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002854:	e00a      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7fd fd17 	bl	8000288 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	; 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e180      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800286c:	2302      	movs	r3, #2
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
 8002878:	2302      	movs	r3, #2
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	61fb      	str	r3, [r7, #28]
  return(result);
 8002884:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d108      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x168>
 800289a:	4b01      	ldr	r3, [pc, #4]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	e00d      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40007000 	.word	0x40007000
 80028a8:	10908100 	.word	0x10908100
 80028ac:	2302      	movs	r3, #2
 80028ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	4b9c      	ldr	r3, [pc, #624]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	2202      	movs	r2, #2
 80028be:	613a      	str	r2, [r7, #16]
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	fa92 f2a2 	rbit	r2, r2
 80028c6:	60fa      	str	r2, [r7, #12]
  return(result);
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	fab2 f282 	clz	r2, r2
 80028ce:	b252      	sxtb	r2, r2
 80028d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028d4:	b252      	sxtb	r2, r2
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	f002 021f 	and.w	r2, r2, #31
 80028dc:	2101      	movs	r1, #1
 80028de:	fa01 f202 	lsl.w	r2, r1, r2
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0b6      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80028e8:	4990      	ldr	r1, [pc, #576]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028ea:	4b90      	ldr	r3, [pc, #576]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d105      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002902:	4a8a      	ldr	r2, [pc, #552]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002904:	4b89      	ldr	r3, [pc, #548]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800290c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800291a:	4984      	ldr	r1, [pc, #528]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800291c:	4b83      	ldr	r3, [pc, #524]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	f023 0203 	bic.w	r2, r3, #3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4313      	orrs	r3, r2
 800292a:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002938:	497c      	ldr	r1, [pc, #496]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800293a:	4b7c      	ldr	r3, [pc, #496]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d008      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002956:	4975      	ldr	r1, [pc, #468]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002958:	4b74      	ldr	r3, [pc, #464]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002974:	496d      	ldr	r1, [pc, #436]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002976:	4b6d      	ldr	r3, [pc, #436]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f023 0210 	bic.w	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	4313      	orrs	r3, r2
 8002984:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d008      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002992:	4966      	ldr	r1, [pc, #408]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002994:	4b65      	ldr	r3, [pc, #404]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029b0:	495e      	ldr	r1, [pc, #376]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029b2:	4b5e      	ldr	r3, [pc, #376]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f023 0220 	bic.w	r2, r3, #32
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	4313      	orrs	r3, r2
 80029c0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029ce:	4957      	ldr	r1, [pc, #348]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029d0:	4b56      	ldr	r3, [pc, #344]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	4313      	orrs	r3, r2
 80029de:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029ec:	494f      	ldr	r1, [pc, #316]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ee:	4b4f      	ldr	r3, [pc, #316]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d008      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a0a:	4948      	ldr	r1, [pc, #288]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a0c:	4b47      	ldr	r3, [pc, #284]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a28:	4940      	ldr	r1, [pc, #256]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a2a:	4b40      	ldr	r3, [pc, #256]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a46:	4939      	ldr	r1, [pc, #228]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a48:	4b38      	ldr	r3, [pc, #224]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	4313      	orrs	r3, r2
 8002a56:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a64:	4931      	ldr	r1, [pc, #196]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a66:	4b31      	ldr	r3, [pc, #196]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	4313      	orrs	r3, r2
 8002a74:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a82:	492a      	ldr	r1, [pc, #168]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a84:	4b29      	ldr	r3, [pc, #164]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a90:	4313      	orrs	r3, r2
 8002a92:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002aa0:	4922      	ldr	r1, [pc, #136]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aa2:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d008      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002abe:	491b      	ldr	r1, [pc, #108]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ac0:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002acc:	4313      	orrs	r3, r2
 8002ace:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x3aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002adc:	4913      	ldr	r1, [pc, #76]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ade:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aea:	4313      	orrs	r3, r2
 8002aec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002afa:	490c      	ldr	r1, [pc, #48]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00b      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002b18:	4904      	ldr	r1, [pc, #16]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b1a:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b26:	4313      	orrs	r3, r2
 8002b28:	630b      	str	r3, [r1, #48]	; 0x30
 8002b2a:	e001      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002b2c:	40021000 	.word	0x40021000
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002b3c:	490e      	ldr	r1, [pc, #56]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002b3e:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002b5a:	4907      	ldr	r1, [pc, #28]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3748      	adds	r7, #72	; 0x48
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000

08002b7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e043      	b.n	8002c16 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fe9c 	bl	80038e0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2224      	movs	r2, #36	; 0x24
 8002bac:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f82d 	bl	8002c20 <UART_SetConfig>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e022      	b.n	8002c16 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fa1f 	bl	800301c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	6852      	ldr	r2, [r2, #4]
 8002be8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	6892      	ldr	r2, [r2, #8]
 8002bf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bfc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	f042 0201 	orr.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 faa6 	bl	8003160 <UART_CheckIdleState>
 8002c14:	4603      	mov	r3, r0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002c2c:	2310      	movs	r3, #16
 8002c2e:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6819      	ldr	r1, [r3, #0]
 8002c5e:	4ba6      	ldr	r3, [pc, #664]	; (8002ef8 <UART_SetConfig+0x2d8>)
 8002c60:	400b      	ands	r3, r1
 8002c62:	68f9      	ldr	r1, [r7, #12]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	6852      	ldr	r2, [r2, #4]
 8002c72:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68d2      	ldr	r2, [r2, #12]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	6892      	ldr	r2, [r2, #8]
 8002c94:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a96      	ldr	r2, [pc, #600]	; (8002efc <UART_SetConfig+0x2dc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d121      	bne.n	8002cec <UART_SetConfig+0xcc>
 8002ca8:	4b95      	ldr	r3, [pc, #596]	; (8002f00 <UART_SetConfig+0x2e0>)
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d817      	bhi.n	8002ce4 <UART_SetConfig+0xc4>
 8002cb4:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <UART_SetConfig+0x9c>)
 8002cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cba:	bf00      	nop
 8002cbc:	08002ccd 	.word	0x08002ccd
 8002cc0:	08002cd9 	.word	0x08002cd9
 8002cc4:	08002cdf 	.word	0x08002cdf
 8002cc8:	08002cd3 	.word	0x08002cd3
 8002ccc:	2301      	movs	r3, #1
 8002cce:	75fb      	strb	r3, [r7, #23]
 8002cd0:	e0b2      	b.n	8002e38 <UART_SetConfig+0x218>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	75fb      	strb	r3, [r7, #23]
 8002cd6:	e0af      	b.n	8002e38 <UART_SetConfig+0x218>
 8002cd8:	2304      	movs	r3, #4
 8002cda:	75fb      	strb	r3, [r7, #23]
 8002cdc:	e0ac      	b.n	8002e38 <UART_SetConfig+0x218>
 8002cde:	2308      	movs	r3, #8
 8002ce0:	75fb      	strb	r3, [r7, #23]
 8002ce2:	e0a9      	b.n	8002e38 <UART_SetConfig+0x218>
 8002ce4:	2310      	movs	r3, #16
 8002ce6:	75fb      	strb	r3, [r7, #23]
 8002ce8:	bf00      	nop
 8002cea:	e0a5      	b.n	8002e38 <UART_SetConfig+0x218>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a84      	ldr	r2, [pc, #528]	; (8002f04 <UART_SetConfig+0x2e4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d123      	bne.n	8002d3e <UART_SetConfig+0x11e>
 8002cf6:	4b82      	ldr	r3, [pc, #520]	; (8002f00 <UART_SetConfig+0x2e0>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d02:	d012      	beq.n	8002d2a <UART_SetConfig+0x10a>
 8002d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d08:	d802      	bhi.n	8002d10 <UART_SetConfig+0xf0>
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d007      	beq.n	8002d1e <UART_SetConfig+0xfe>
 8002d0e:	e012      	b.n	8002d36 <UART_SetConfig+0x116>
 8002d10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d14:	d00c      	beq.n	8002d30 <UART_SetConfig+0x110>
 8002d16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d1a:	d003      	beq.n	8002d24 <UART_SetConfig+0x104>
 8002d1c:	e00b      	b.n	8002d36 <UART_SetConfig+0x116>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	75fb      	strb	r3, [r7, #23]
 8002d22:	e089      	b.n	8002e38 <UART_SetConfig+0x218>
 8002d24:	2302      	movs	r3, #2
 8002d26:	75fb      	strb	r3, [r7, #23]
 8002d28:	e086      	b.n	8002e38 <UART_SetConfig+0x218>
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	75fb      	strb	r3, [r7, #23]
 8002d2e:	e083      	b.n	8002e38 <UART_SetConfig+0x218>
 8002d30:	2308      	movs	r3, #8
 8002d32:	75fb      	strb	r3, [r7, #23]
 8002d34:	e080      	b.n	8002e38 <UART_SetConfig+0x218>
 8002d36:	2310      	movs	r3, #16
 8002d38:	75fb      	strb	r3, [r7, #23]
 8002d3a:	bf00      	nop
 8002d3c:	e07c      	b.n	8002e38 <UART_SetConfig+0x218>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a71      	ldr	r2, [pc, #452]	; (8002f08 <UART_SetConfig+0x2e8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d123      	bne.n	8002d90 <UART_SetConfig+0x170>
 8002d48:	4b6d      	ldr	r3, [pc, #436]	; (8002f00 <UART_SetConfig+0x2e0>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002d50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d54:	d012      	beq.n	8002d7c <UART_SetConfig+0x15c>
 8002d56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d5a:	d802      	bhi.n	8002d62 <UART_SetConfig+0x142>
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d007      	beq.n	8002d70 <UART_SetConfig+0x150>
 8002d60:	e012      	b.n	8002d88 <UART_SetConfig+0x168>
 8002d62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d66:	d00c      	beq.n	8002d82 <UART_SetConfig+0x162>
 8002d68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d6c:	d003      	beq.n	8002d76 <UART_SetConfig+0x156>
 8002d6e:	e00b      	b.n	8002d88 <UART_SetConfig+0x168>
 8002d70:	2300      	movs	r3, #0
 8002d72:	75fb      	strb	r3, [r7, #23]
 8002d74:	e060      	b.n	8002e38 <UART_SetConfig+0x218>
 8002d76:	2302      	movs	r3, #2
 8002d78:	75fb      	strb	r3, [r7, #23]
 8002d7a:	e05d      	b.n	8002e38 <UART_SetConfig+0x218>
 8002d7c:	2304      	movs	r3, #4
 8002d7e:	75fb      	strb	r3, [r7, #23]
 8002d80:	e05a      	b.n	8002e38 <UART_SetConfig+0x218>
 8002d82:	2308      	movs	r3, #8
 8002d84:	75fb      	strb	r3, [r7, #23]
 8002d86:	e057      	b.n	8002e38 <UART_SetConfig+0x218>
 8002d88:	2310      	movs	r3, #16
 8002d8a:	75fb      	strb	r3, [r7, #23]
 8002d8c:	bf00      	nop
 8002d8e:	e053      	b.n	8002e38 <UART_SetConfig+0x218>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a5d      	ldr	r2, [pc, #372]	; (8002f0c <UART_SetConfig+0x2ec>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d123      	bne.n	8002de2 <UART_SetConfig+0x1c2>
 8002d9a:	4b59      	ldr	r3, [pc, #356]	; (8002f00 <UART_SetConfig+0x2e0>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002da6:	d012      	beq.n	8002dce <UART_SetConfig+0x1ae>
 8002da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dac:	d802      	bhi.n	8002db4 <UART_SetConfig+0x194>
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d007      	beq.n	8002dc2 <UART_SetConfig+0x1a2>
 8002db2:	e012      	b.n	8002dda <UART_SetConfig+0x1ba>
 8002db4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002db8:	d00c      	beq.n	8002dd4 <UART_SetConfig+0x1b4>
 8002dba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002dbe:	d003      	beq.n	8002dc8 <UART_SetConfig+0x1a8>
 8002dc0:	e00b      	b.n	8002dda <UART_SetConfig+0x1ba>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	75fb      	strb	r3, [r7, #23]
 8002dc6:	e037      	b.n	8002e38 <UART_SetConfig+0x218>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	75fb      	strb	r3, [r7, #23]
 8002dcc:	e034      	b.n	8002e38 <UART_SetConfig+0x218>
 8002dce:	2304      	movs	r3, #4
 8002dd0:	75fb      	strb	r3, [r7, #23]
 8002dd2:	e031      	b.n	8002e38 <UART_SetConfig+0x218>
 8002dd4:	2308      	movs	r3, #8
 8002dd6:	75fb      	strb	r3, [r7, #23]
 8002dd8:	e02e      	b.n	8002e38 <UART_SetConfig+0x218>
 8002dda:	2310      	movs	r3, #16
 8002ddc:	75fb      	strb	r3, [r7, #23]
 8002dde:	bf00      	nop
 8002de0:	e02a      	b.n	8002e38 <UART_SetConfig+0x218>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a4a      	ldr	r2, [pc, #296]	; (8002f10 <UART_SetConfig+0x2f0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d123      	bne.n	8002e34 <UART_SetConfig+0x214>
 8002dec:	4b44      	ldr	r3, [pc, #272]	; (8002f00 <UART_SetConfig+0x2e0>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002df4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df8:	d012      	beq.n	8002e20 <UART_SetConfig+0x200>
 8002dfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dfe:	d802      	bhi.n	8002e06 <UART_SetConfig+0x1e6>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <UART_SetConfig+0x1f4>
 8002e04:	e012      	b.n	8002e2c <UART_SetConfig+0x20c>
 8002e06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e0a:	d00c      	beq.n	8002e26 <UART_SetConfig+0x206>
 8002e0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e10:	d003      	beq.n	8002e1a <UART_SetConfig+0x1fa>
 8002e12:	e00b      	b.n	8002e2c <UART_SetConfig+0x20c>
 8002e14:	2300      	movs	r3, #0
 8002e16:	75fb      	strb	r3, [r7, #23]
 8002e18:	e00e      	b.n	8002e38 <UART_SetConfig+0x218>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	75fb      	strb	r3, [r7, #23]
 8002e1e:	e00b      	b.n	8002e38 <UART_SetConfig+0x218>
 8002e20:	2304      	movs	r3, #4
 8002e22:	75fb      	strb	r3, [r7, #23]
 8002e24:	e008      	b.n	8002e38 <UART_SetConfig+0x218>
 8002e26:	2308      	movs	r3, #8
 8002e28:	75fb      	strb	r3, [r7, #23]
 8002e2a:	e005      	b.n	8002e38 <UART_SetConfig+0x218>
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	75fb      	strb	r3, [r7, #23]
 8002e30:	bf00      	nop
 8002e32:	e001      	b.n	8002e38 <UART_SetConfig+0x218>
 8002e34:	2310      	movs	r3, #16
 8002e36:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e40:	d17d      	bne.n	8002f3e <UART_SetConfig+0x31e>
  {
    switch (clocksource)
 8002e42:	7dfb      	ldrb	r3, [r7, #23]
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d865      	bhi.n	8002f14 <UART_SetConfig+0x2f4>
 8002e48:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <UART_SetConfig+0x230>)
 8002e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4e:	bf00      	nop
 8002e50:	08002e75 	.word	0x08002e75
 8002e54:	08002e91 	.word	0x08002e91
 8002e58:	08002ead 	.word	0x08002ead
 8002e5c:	08002f15 	.word	0x08002f15
 8002e60:	08002ec7 	.word	0x08002ec7
 8002e64:	08002f15 	.word	0x08002f15
 8002e68:	08002f15 	.word	0x08002f15
 8002e6c:	08002f15 	.word	0x08002f15
 8002e70:	08002ee3 	.word	0x08002ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002e74:	f7ff fc22 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	005a      	lsls	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	085b      	lsrs	r3, r3, #1
 8002e82:	441a      	add	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8c:	82bb      	strh	r3, [r7, #20]
        break;
 8002e8e:	e044      	b.n	8002f1a <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002e90:	f7ff fc36 	bl	8002700 <HAL_RCC_GetPCLK2Freq>
 8002e94:	4603      	mov	r3, r0
 8002e96:	005a      	lsls	r2, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	085b      	lsrs	r3, r3, #1
 8002e9e:	441a      	add	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea8:	82bb      	strh	r3, [r7, #20]
        break;
 8002eaa:	e036      	b.n	8002f1a <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	085b      	lsrs	r3, r3, #1
 8002eb2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002eb6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6852      	ldr	r2, [r2, #4]
 8002ebe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ec2:	82bb      	strh	r3, [r7, #20]
        break;
 8002ec4:	e029      	b.n	8002f1a <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002ec6:	f7ff fb83 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	005a      	lsls	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	085b      	lsrs	r3, r3, #1
 8002ed4:	441a      	add	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ede:	82bb      	strh	r3, [r7, #20]
        break;
 8002ee0:	e01b      	b.n	8002f1a <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	085b      	lsrs	r3, r3, #1
 8002ee8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef4:	82bb      	strh	r3, [r7, #20]
        break;
 8002ef6:	e010      	b.n	8002f1a <UART_SetConfig+0x2fa>
 8002ef8:	efff69f3 	.word	0xefff69f3
 8002efc:	40013800 	.word	0x40013800
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40004400 	.word	0x40004400
 8002f08:	40004800 	.word	0x40004800
 8002f0c:	40004c00 	.word	0x40004c00
 8002f10:	40005000 	.word	0x40005000
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	74fb      	strb	r3, [r7, #19]
        break;
 8002f18:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002f1a:	8abb      	ldrh	r3, [r7, #20]
 8002f1c:	f023 030f 	bic.w	r3, r3, #15
 8002f20:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f22:	8abb      	ldrh	r3, [r7, #20]
 8002f24:	105b      	asrs	r3, r3, #1
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	897b      	ldrh	r3, [r7, #10]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	897a      	ldrh	r2, [r7, #10]
 8002f3a:	60da      	str	r2, [r3, #12]
 8002f3c:	e069      	b.n	8003012 <UART_SetConfig+0x3f2>
  }
  else
  {
    switch (clocksource)
 8002f3e:	7dfb      	ldrb	r3, [r7, #23]
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d863      	bhi.n	800300c <UART_SetConfig+0x3ec>
 8002f44:	a201      	add	r2, pc, #4	; (adr r2, 8002f4c <UART_SetConfig+0x32c>)
 8002f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4a:	bf00      	nop
 8002f4c:	08002f71 	.word	0x08002f71
 8002f50:	08002f91 	.word	0x08002f91
 8002f54:	08002fb1 	.word	0x08002fb1
 8002f58:	0800300d 	.word	0x0800300d
 8002f5c:	08002fd1 	.word	0x08002fd1
 8002f60:	0800300d 	.word	0x0800300d
 8002f64:	0800300d 	.word	0x0800300d
 8002f68:	0800300d 	.word	0x0800300d
 8002f6c:	08002ff1 	.word	0x08002ff1
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681c      	ldr	r4, [r3, #0]
 8002f74:	f7ff fba2 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	085b      	lsrs	r3, r3, #1
 8002f80:	441a      	add	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	60e3      	str	r3, [r4, #12]
        break;
 8002f8e:	e040      	b.n	8003012 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681c      	ldr	r4, [r3, #0]
 8002f94:	f7ff fbb4 	bl	8002700 <HAL_RCC_GetPCLK2Freq>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	441a      	add	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	60e3      	str	r3, [r4, #12]
        break;
 8002fae:	e030      	b.n	8003012 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	085b      	lsrs	r3, r3, #1
 8002fba:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002fbe:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	6849      	ldr	r1, [r1, #4]
 8002fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	60d3      	str	r3, [r2, #12]
        break;
 8002fce:	e020      	b.n	8003012 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681c      	ldr	r4, [r3, #0]
 8002fd4:	f7ff fafc 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	085b      	lsrs	r3, r3, #1
 8002fe0:	441a      	add	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	60e3      	str	r3, [r4, #12]
        break;
 8002fee:	e010      	b.n	8003012 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6852      	ldr	r2, [r2, #4]
 8002ff8:	0852      	lsrs	r2, r2, #1
 8002ffa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6852      	ldr	r2, [r2, #4]
 8003002:	fbb1 f2f2 	udiv	r2, r1, r2
 8003006:	b292      	uxth	r2, r2
 8003008:	60da      	str	r2, [r3, #12]
        break;
 800300a:	e002      	b.n	8003012 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	74fb      	strb	r3, [r7, #19]
        break;
 8003010:	bf00      	nop
    }
  }

  return ret;
 8003012:	7cfb      	ldrb	r3, [r7, #19]

}
 8003014:	4618      	mov	r0, r3
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	bd90      	pop	{r4, r7, pc}

0800301c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	6852      	ldr	r2, [r2, #4]
 800303a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	6852      	ldr	r2, [r2, #4]
 800305c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003064:	430a      	orrs	r2, r1
 8003066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	6852      	ldr	r2, [r2, #4]
 800307e:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	6852      	ldr	r2, [r2, #4]
 80030a0:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030a8:	430a      	orrs	r2, r1
 80030aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	6892      	ldr	r2, [r2, #8]
 80030c2:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030ca:	430a      	orrs	r2, r1
 80030cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	6892      	ldr	r2, [r2, #8]
 80030e4:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030ec:	430a      	orrs	r2, r1
 80030ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d01a      	beq.n	8003132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	6852      	ldr	r2, [r2, #4]
 8003106:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800311a:	d10a      	bne.n	8003132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	6852      	ldr	r2, [r2, #4]
 8003126:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6812      	ldr	r2, [r2, #0]
 8003146:	6852      	ldr	r2, [r2, #4]
 8003148:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003150:	430a      	orrs	r2, r1
 8003152:	605a      	str	r2, [r3, #4]
  }
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af02      	add	r7, sp, #8
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003172:	f7fd f889 	bl	8000288 <HAL_GetTick>
 8003176:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b08      	cmp	r3, #8
 8003184:	d10e      	bne.n	80031a4 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003186:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f82c 	bl	80031f2 <UART_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e022      	b.n	80031ea <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d10e      	bne.n	80031d0 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f816 	bl	80031f2 <UART_WaitOnFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e00c      	b.n	80031ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	603b      	str	r3, [r7, #0]
 80031fe:	4613      	mov	r3, r2
 8003200:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003202:	e02c      	b.n	800325e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320a:	d028      	beq.n	800325e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <UART_WaitOnFlagUntilTimeout+0x30>
 8003212:	f7fd f839 	bl	8000288 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	1ad2      	subs	r2, r2, r3
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	429a      	cmp	r2, r3
 8003220:	d91d      	bls.n	800325e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	6812      	ldr	r2, [r2, #0]
 800322c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003230:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	6892      	ldr	r2, [r2, #8]
 800323c:	f022 0201 	bic.w	r2, r2, #1
 8003240:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e00f      	b.n	800327e <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	401a      	ands	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	429a      	cmp	r2, r3
 800326c:	bf0c      	ite	eq
 800326e:	2301      	moveq	r3, #1
 8003270:	2300      	movne	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	429a      	cmp	r2, r3
 800327a:	d0c3      	beq.n	8003204 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800328c:	f7fc ffa2 	bl	80001d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003290:	f000 f826 	bl	80032e0 <SystemClock_Config>
   * To configure as Floor 1 button: 1
   * To configure as floor 2 button: 2
   * To configure as floor 3 button: 3
   * This should set the outgoing ID and floor request messages appropriately
   **************************************************************************/
  Button_Config(2);
 8003294:	2002      	movs	r0, #2
 8003296:	f000 f9e3 	bl	8003660 <Button_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800329a:	f000 f931 	bl	8003500 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800329e:	f000 f8ff 	bl	80034a0 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80032a2:	f000 f87b 	bl	800339c <MX_CAN_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  if (RX_STATE == RX_PENDING){
 80032a6:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <main+0x4c>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d107      	bne.n	80032be <main+0x36>
    RxSwitch();
 80032ae:	f000 fa07 	bl	80036c0 <RxSwitch>
    RxData[0] = 0x00; 		// clear RxData
 80032b2:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <main+0x50>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
    RX_STATE = RX_CLEAR;	// clear RX_STATE flag
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <main+0x4c>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
  }

  if (BUTTON == BUTTON_PRESSED){
 80032be:	4b07      	ldr	r3, [pc, #28]	; (80032dc <main+0x54>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d1ef      	bne.n	80032a6 <main+0x1e>
    RequestFloor();
 80032c6:	f000 fa47 	bl	8003758 <RequestFloor>
    BUTTON = NO_BUTTON_PRESSED;	// clear BUTTON Flag
 80032ca:	4b04      	ldr	r3, [pc, #16]	; (80032dc <main+0x54>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
  if (RX_STATE == RX_PENDING){
 80032d0:	e7e9      	b.n	80032a6 <main+0x1e>
 80032d2:	bf00      	nop
 80032d4:	20000029 	.word	0x20000029
 80032d8:	2000006c 	.word	0x2000006c
 80032dc:	20000028 	.word	0x20000028

080032e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b0a6      	sub	sp, #152	; 0x98
 80032e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80032ea:	2228      	movs	r2, #40	; 0x28
 80032ec:	2100      	movs	r1, #0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fc1e 	bl	8003b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003304:	1d3b      	adds	r3, r7, #4
 8003306:	2258      	movs	r2, #88	; 0x58
 8003308:	2100      	movs	r1, #0
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fc10 	bl	8003b30 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003310:	2302      	movs	r3, #2
 8003312:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003314:	2301      	movs	r3, #1
 8003316:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003318:	2310      	movs	r3, #16
 800331a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800331e:	2302      	movs	r3, #2
 8003320:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003328:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800332c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003330:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003334:	2300      	movs	r3, #0
 8003336:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800333a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe f8dc 	bl	80014fc <HAL_RCC_OscConfig>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800334a:	f000 fa51 	bl	80037f0 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800334e:	230f      	movs	r3, #15
 8003350:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003352:	2302      	movs	r3, #2
 8003354:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003356:	2300      	movs	r3, #0
 8003358:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800335a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800335e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003360:	2300      	movs	r3, #0
 8003362:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003364:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003368:	2102      	movs	r1, #2
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe ffb4 	bl	80022d8 <HAL_RCC_ClockConfig>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003376:	f000 fa3b 	bl	80037f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800337a:	2302      	movs	r3, #2
 800337c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800337e:	2300      	movs	r3, #0
 8003380:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003382:	1d3b      	adds	r3, r7, #4
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff f9dd 	bl	8002744 <HAL_RCCEx_PeriphCLKConfig>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003390:	f000 fa2e 	bl	80037f0 <Error_Handler>
  }
}
 8003394:	bf00      	nop
 8003396:	3798      	adds	r7, #152	; 0x98
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	; 0x28
 80033a0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80033a2:	4b3b      	ldr	r3, [pc, #236]	; (8003490 <MX_CAN_Init+0xf4>)
 80033a4:	4a3b      	ldr	r2, [pc, #236]	; (8003494 <MX_CAN_Init+0xf8>)
 80033a6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 32;
 80033a8:	4b39      	ldr	r3, [pc, #228]	; (8003490 <MX_CAN_Init+0xf4>)
 80033aa:	2220      	movs	r2, #32
 80033ac:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80033ae:	4b38      	ldr	r3, [pc, #224]	; (8003490 <MX_CAN_Init+0xf4>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80033b4:	4b36      	ldr	r3, [pc, #216]	; (8003490 <MX_CAN_Init+0xf4>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 80033ba:	4b35      	ldr	r3, [pc, #212]	; (8003490 <MX_CAN_Init+0xf4>)
 80033bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80033c0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80033c2:	4b33      	ldr	r3, [pc, #204]	; (8003490 <MX_CAN_Init+0xf4>)
 80033c4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80033c8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80033ca:	4b31      	ldr	r3, [pc, #196]	; (8003490 <MX_CAN_Init+0xf4>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80033d0:	4b2f      	ldr	r3, [pc, #188]	; (8003490 <MX_CAN_Init+0xf4>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80033d6:	4b2e      	ldr	r3, [pc, #184]	; (8003490 <MX_CAN_Init+0xf4>)
 80033d8:	2200      	movs	r2, #0
 80033da:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80033dc:	4b2c      	ldr	r3, [pc, #176]	; (8003490 <MX_CAN_Init+0xf4>)
 80033de:	2200      	movs	r2, #0
 80033e0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80033e2:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <MX_CAN_Init+0xf4>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80033e8:	4b29      	ldr	r3, [pc, #164]	; (8003490 <MX_CAN_Init+0xf4>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80033ee:	4828      	ldr	r0, [pc, #160]	; (8003490 <MX_CAN_Init+0xf4>)
 80033f0:	f7fc ff78 	bl	80002e4 <HAL_CAN_Init>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80033fa:	f000 f9f9 	bl	80037f0 <Error_Handler>

  /* *** Set up CAN Rx filters *** */
  CAN_FilterTypeDef filter;  						// This is one of the 13 filters - can create more filters - this one will be number 0

  /* Configure filter 0 to direct everything to FIFO 0 */
  filter.FilterBank = 0;						              	// This is filter number 0
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
  filter.FilterIdHigh = ID_EC << 5;      			    	// Only allow elevator controller ID to pass
 8003402:	f242 0320 	movw	r3, #8224	; 0x2020
 8003406:	603b      	str	r3, [r7, #0]
  filter.FilterIdLow = 0x0000;
 8003408:	2300      	movs	r3, #0
 800340a:	607b      	str	r3, [r7, #4]
  filter.FilterMaskIdHigh = 0x01FF << 5;            // Filter only elevator controller ID (ID_EC) bits to pass to FIFO0
 800340c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003410:	60bb      	str	r3, [r7, #8]
  filter.FilterMaskIdLow = 0x0000;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
  filter.FilterMode = CAN_FILTERMODE_IDMASK; 		    // Mask mode to mask out unwanted IDs
 800341a:	2300      	movs	r3, #0
 800341c:	61bb      	str	r3, [r7, #24]
  filter.FilterScale = CAN_FILTERSCALE_32BIT;		    // Use 32 bit filters
 800341e:	2301      	movs	r3, #1
 8003420:	61fb      	str	r3, [r7, #28]
  filter.FilterActivation = ENABLE;				        	// By default the filters are disabled so enable them
 8003422:	2301      	movs	r3, #1
 8003424:	623b      	str	r3, [r7, #32]
  filter.SlaveStartFilterBank = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	627b      	str	r3, [r7, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK) {	// Set the above values for filter 0
 800342a:	463b      	mov	r3, r7
 800342c:	4619      	mov	r1, r3
 800342e:	4818      	ldr	r0, [pc, #96]	; (8003490 <MX_CAN_Init+0xf4>)
 8003430:	f7fd f852 	bl	80004d8 <HAL_CAN_ConfigFilter>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_CAN_Init+0xa2>
  Error_Handler();
 800343a:	f000 f9d9 	bl	80037f0 <Error_Handler>
  }

  /* *** Start the CAN peripheral *** */
  if (HAL_CAN_Start(&hcan) != HAL_OK) {
 800343e:	4814      	ldr	r0, [pc, #80]	; (8003490 <MX_CAN_Init+0xf4>)
 8003440:	f7fd f914 	bl	800066c <HAL_CAN_Start>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <MX_CAN_Init+0xb2>
    Error_Handler();
 800344a:	f000 f9d1 	bl	80037f0 <Error_Handler>
  }

  /* *** Activate CAN Rx notification interrupt *** */
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800344e:	2102      	movs	r1, #2
 8003450:	480f      	ldr	r0, [pc, #60]	; (8003490 <MX_CAN_Init+0xf4>)
 8003452:	f7fd fb39 	bl	8000ac8 <HAL_CAN_ActivateNotification>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <MX_CAN_Init+0xc4>
    Error_Handler();
 800345c:	f000 f9c8 	bl	80037f0 <Error_Handler>
  }

  /* *** Prepare header fields for Standard Mode CAN Transmission *** */
  TxHeader.IDE = CAN_ID_STD;		 				// Using standard mode. Note this = CAN_ID_EXT for extended mode
 8003460:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <MX_CAN_Init+0xfc>)
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]
  TxHeader.ExtId = 0x00;			 				// Extended ID is not used
 8003466:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <MX_CAN_Init+0xfc>)
 8003468:	2200      	movs	r2, #0
 800346a:	605a      	str	r2, [r3, #4]
  TxHeader.StdId = node_ID;	 		 				// Standard mode ID set in Button_Config();
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <MX_CAN_Init+0x100>)
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <MX_CAN_Init+0xfc>)
 8003474:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;	 					// Send a data frame not an RTR
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <MX_CAN_Init+0xfc>)
 8003478:	2200      	movs	r2, #0
 800347a:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 1;				 					// Data length code = 1 (only send one byte)
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <MX_CAN_Init+0xfc>)
 800347e:	2201      	movs	r2, #1
 8003480:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <MX_CAN_Init+0xfc>)
 8003484:	2200      	movs	r2, #0
 8003486:	751a      	strb	r2, [r3, #20]

  /****************************************************************************************/
  /* USER CODE END CAN_Init 2 */

}
 8003488:	bf00      	nop
 800348a:	3728      	adds	r7, #40	; 0x28
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000034 	.word	0x20000034
 8003494:	40006400 	.word	0x40006400
 8003498:	200000e4 	.word	0x200000e4
 800349c:	2000005c 	.word	0x2000005c

080034a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034a4:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <MX_USART2_UART_Init+0x58>)
 80034a6:	4a15      	ldr	r2, [pc, #84]	; (80034fc <MX_USART2_UART_Init+0x5c>)
 80034a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80034aa:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <MX_USART2_UART_Init+0x58>)
 80034ac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80034b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034b2:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <MX_USART2_UART_Init+0x58>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <MX_USART2_UART_Init+0x58>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034be:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <MX_USART2_UART_Init+0x58>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034c4:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <MX_USART2_UART_Init+0x58>)
 80034c6:	220c      	movs	r2, #12
 80034c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <MX_USART2_UART_Init+0x58>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80034d0:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <MX_USART2_UART_Init+0x58>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034d6:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <MX_USART2_UART_Init+0x58>)
 80034d8:	2200      	movs	r2, #0
 80034da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034dc:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <MX_USART2_UART_Init+0x58>)
 80034de:	2200      	movs	r2, #0
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80034e2:	4805      	ldr	r0, [pc, #20]	; (80034f8 <MX_USART2_UART_Init+0x58>)
 80034e4:	f7ff fb4a 	bl	8002b7c <HAL_UART_Init>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80034ee:	f000 f97f 	bl	80037f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000074 	.word	0x20000074
 80034fc:	40004400 	.word	0x40004400

08003500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	; 0x28
 8003504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003506:	f107 0314 	add.w	r3, r7, #20
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	605a      	str	r2, [r3, #4]
 8003510:	609a      	str	r2, [r3, #8]
 8003512:	60da      	str	r2, [r3, #12]
 8003514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003516:	4a4f      	ldr	r2, [pc, #316]	; (8003654 <MX_GPIO_Init+0x154>)
 8003518:	4b4e      	ldr	r3, [pc, #312]	; (8003654 <MX_GPIO_Init+0x154>)
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003520:	6153      	str	r3, [r2, #20]
 8003522:	4b4c      	ldr	r3, [pc, #304]	; (8003654 <MX_GPIO_Init+0x154>)
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800352e:	4a49      	ldr	r2, [pc, #292]	; (8003654 <MX_GPIO_Init+0x154>)
 8003530:	4b48      	ldr	r3, [pc, #288]	; (8003654 <MX_GPIO_Init+0x154>)
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003538:	6153      	str	r3, [r2, #20]
 800353a:	4b46      	ldr	r3, [pc, #280]	; (8003654 <MX_GPIO_Init+0x154>)
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003546:	4a43      	ldr	r2, [pc, #268]	; (8003654 <MX_GPIO_Init+0x154>)
 8003548:	4b42      	ldr	r3, [pc, #264]	; (8003654 <MX_GPIO_Init+0x154>)
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003550:	6153      	str	r3, [r2, #20]
 8003552:	4b40      	ldr	r3, [pc, #256]	; (8003654 <MX_GPIO_Init+0x154>)
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800355e:	4a3d      	ldr	r2, [pc, #244]	; (8003654 <MX_GPIO_Init+0x154>)
 8003560:	4b3c      	ldr	r3, [pc, #240]	; (8003654 <MX_GPIO_Init+0x154>)
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003568:	6153      	str	r3, [r2, #20]
 800356a:	4b3a      	ldr	r3, [pc, #232]	; (8003654 <MX_GPIO_Init+0x154>)
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003572:	607b      	str	r3, [r7, #4]
 8003574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003576:	2200      	movs	r2, #0
 8003578:	2120      	movs	r1, #32
 800357a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800357e:	f7fd ff8d 	bl	800149c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PB1_Pin PB2_Pin PB3_Pin */
  GPIO_InitStruct.Pin = B1_Pin|PB1_Pin|PB2_Pin|PB3_Pin;
 8003582:	f242 1360 	movw	r3, #8544	; 0x2160
 8003586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003588:	4b33      	ldr	r3, [pc, #204]	; (8003658 <MX_GPIO_Init+0x158>)
 800358a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358c:	2300      	movs	r3, #0
 800358e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	4619      	mov	r1, r3
 8003596:	4831      	ldr	r0, [pc, #196]	; (800365c <MX_GPIO_Init+0x15c>)
 8003598:	f7fd fdf2 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800359c:	2320      	movs	r3, #32
 800359e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a0:	2301      	movs	r3, #1
 80035a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a8:	2300      	movs	r3, #0
 80035aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80035ac:	f107 0314 	add.w	r3, r7, #20
 80035b0:	4619      	mov	r1, r3
 80035b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035b6:	f7fd fde3 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin for LED on push button*/
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035ba:	2301      	movs	r3, #1
 80035bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035be:	2301      	movs	r3, #1
 80035c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c6:	2300      	movs	r3, #0
 80035c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ca:	f107 0314 	add.w	r3, r7, #20
 80035ce:	4619      	mov	r1, r3
 80035d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035d4:	f7fd fdd4 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin for LED Floor indicator light 1*/
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80035d8:	2302      	movs	r3, #2
 80035da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035dc:	2301      	movs	r3, #1
 80035de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e4:	2300      	movs	r3, #0
 80035e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e8:	f107 0314 	add.w	r3, r7, #20
 80035ec:	4619      	mov	r1, r3
 80035ee:	481b      	ldr	r0, [pc, #108]	; (800365c <MX_GPIO_Init+0x15c>)
 80035f0:	f7fd fdc6 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin for LED Floor indicator light 2*/
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035f4:	2304      	movs	r3, #4
 80035f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035f8:	2301      	movs	r3, #1
 80035fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003600:	2300      	movs	r3, #0
 8003602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	4619      	mov	r1, r3
 800360a:	4814      	ldr	r0, [pc, #80]	; (800365c <MX_GPIO_Init+0x15c>)
 800360c:	f7fd fdb8 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin for LED Floor indicator light 3*/
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003610:	2308      	movs	r3, #8
 8003612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003614:	2301      	movs	r3, #1
 8003616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361c:	2300      	movs	r3, #0
 800361e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	4619      	mov	r1, r3
 8003626:	480d      	ldr	r0, [pc, #52]	; (800365c <MX_GPIO_Init+0x15c>)
 8003628:	f7fd fdaa 	bl	8001180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800362c:	2200      	movs	r2, #0
 800362e:	2100      	movs	r1, #0
 8003630:	2017      	movs	r0, #23
 8003632:	f7fd fd6e 	bl	8001112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003636:	2017      	movs	r0, #23
 8003638:	f7fd fd87 	bl	800114a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800363c:	2200      	movs	r2, #0
 800363e:	2100      	movs	r1, #0
 8003640:	2028      	movs	r0, #40	; 0x28
 8003642:	f7fd fd66 	bl	8001112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003646:	2028      	movs	r0, #40	; 0x28
 8003648:	f7fd fd7f 	bl	800114a <HAL_NVIC_EnableIRQ>

}
 800364c:	bf00      	nop
 800364e:	3728      	adds	r7, #40	; 0x28
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40021000 	.word	0x40021000
 8003658:	10210000 	.word	0x10210000
 800365c:	48000800 	.word	0x48000800

08003660 <Button_Config>:
 * function call above (where other configuration functions are also being called) in
 * order to configure this node for the proper floor. Values for button_number are
 * 1, 2, or 3 (for floor 1, floor 2, or floor 3, respectively). Activate commented code
 * for implementation of FULL CAN PROTOCOL after testing is done.
 *****************************************************************************************/
void Button_Config(uint8_t button_number){
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	71fb      	strb	r3, [r7, #7]
  switch(button_number){
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d00c      	beq.n	800368a <Button_Config+0x2a>
 8003670:	2b03      	cmp	r3, #3
 8003672:	d012      	beq.n	800369a <Button_Config+0x3a>
 8003674:	2b01      	cmp	r3, #1
 8003676:	d000      	beq.n	800367a <Button_Config+0x1a>
  case 3:
    node_ID = ID_F3;
    my_floor = GO_TO_FLOOR_3;
    break;
  }
}
 8003678:	e017      	b.n	80036aa <Button_Config+0x4a>
    node_ID = ID_F1;
 800367a:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <Button_Config+0x58>)
 800367c:	f240 2201 	movw	r2, #513	; 0x201
 8003680:	801a      	strh	r2, [r3, #0]
    my_floor = GO_TO_FLOOR_1;
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <Button_Config+0x5c>)
 8003684:	2205      	movs	r2, #5
 8003686:	701a      	strb	r2, [r3, #0]
    break;
 8003688:	e00f      	b.n	80036aa <Button_Config+0x4a>
    node_ID = ID_F2;
 800368a:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <Button_Config+0x58>)
 800368c:	f240 2202 	movw	r2, #514	; 0x202
 8003690:	801a      	strh	r2, [r3, #0]
    my_floor = GO_TO_FLOOR_2;
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <Button_Config+0x5c>)
 8003694:	2206      	movs	r2, #6
 8003696:	701a      	strb	r2, [r3, #0]
    break;
 8003698:	e007      	b.n	80036aa <Button_Config+0x4a>
    node_ID = ID_F3;
 800369a:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <Button_Config+0x58>)
 800369c:	f240 2203 	movw	r2, #515	; 0x203
 80036a0:	801a      	strh	r2, [r3, #0]
    my_floor = GO_TO_FLOOR_3;
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <Button_Config+0x5c>)
 80036a4:	2207      	movs	r2, #7
 80036a6:	701a      	strb	r2, [r3, #0]
    break;
 80036a8:	bf00      	nop
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	2000005c 	.word	0x2000005c
 80036bc:	20000030 	.word	0x20000030

080036c0 <RxSwitch>:
 * Called when Rx message-pending interrupt is triggered on an arriving CAN message from
 * the Elevator Controller. Updates all status lights by turning off the button LED if
 * the car arrives my_floor and lights up the current floor on the floor LED display.
 * First case for my_floor always falls through to the other cases.
 *****************************************************************************************/
void RxSwitch(void){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0

  if(RxData[0] == my_floor){
 80036c4:	4b21      	ldr	r3, [pc, #132]	; (800374c <RxSwitch+0x8c>)
 80036c6:	781a      	ldrb	r2, [r3, #0]
 80036c8:	4b21      	ldr	r3, [pc, #132]	; (8003750 <RxSwitch+0x90>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d105      	bne.n	80036dc <RxSwitch+0x1c>
    // elevator arrived - turn off button light
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80036d0:	2200      	movs	r2, #0
 80036d2:	2101      	movs	r1, #1
 80036d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036d8:	f7fd fee0 	bl	800149c <HAL_GPIO_WritePin>
  }

  switch(RxData[0]){
 80036dc:	4b1b      	ldr	r3, [pc, #108]	; (800374c <RxSwitch+0x8c>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b06      	cmp	r3, #6
 80036e2:	d011      	beq.n	8003708 <RxSwitch+0x48>
 80036e4:	2b07      	cmp	r3, #7
 80036e6:	d01d      	beq.n	8003724 <RxSwitch+0x64>
 80036e8:	2b05      	cmp	r3, #5
 80036ea:	d129      	bne.n	8003740 <RxSwitch+0x80>
	  case GO_TO_FLOOR_1:
		// turn off all floor LEDs
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80036ec:	2200      	movs	r2, #0
 80036ee:	210e      	movs	r1, #14
 80036f0:	4818      	ldr	r0, [pc, #96]	; (8003754 <RxSwitch+0x94>)
 80036f2:	f7fd fed3 	bl	800149c <HAL_GPIO_WritePin>
		// turn on floor 1 LED
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80036f6:	2201      	movs	r2, #1
 80036f8:	2102      	movs	r1, #2
 80036fa:	4816      	ldr	r0, [pc, #88]	; (8003754 <RxSwitch+0x94>)
 80036fc:	f7fd fece 	bl	800149c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8003700:	2064      	movs	r0, #100	; 0x64
 8003702:	f7fc fdcd 	bl	80002a0 <HAL_Delay>
		break;
 8003706:	e01e      	b.n	8003746 <RxSwitch+0x86>
	  case GO_TO_FLOOR_2:
		// turn off all floor LEDs
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003708:	2200      	movs	r2, #0
 800370a:	210e      	movs	r1, #14
 800370c:	4811      	ldr	r0, [pc, #68]	; (8003754 <RxSwitch+0x94>)
 800370e:	f7fd fec5 	bl	800149c <HAL_GPIO_WritePin>
		// turn on floor 2 LED
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8003712:	2201      	movs	r2, #1
 8003714:	2104      	movs	r1, #4
 8003716:	480f      	ldr	r0, [pc, #60]	; (8003754 <RxSwitch+0x94>)
 8003718:	f7fd fec0 	bl	800149c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800371c:	2064      	movs	r0, #100	; 0x64
 800371e:	f7fc fdbf 	bl	80002a0 <HAL_Delay>
		break;
 8003722:	e010      	b.n	8003746 <RxSwitch+0x86>
	  case GO_TO_FLOOR_3:
		// turn off all floor LEDs
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003724:	2200      	movs	r2, #0
 8003726:	210e      	movs	r1, #14
 8003728:	480a      	ldr	r0, [pc, #40]	; (8003754 <RxSwitch+0x94>)
 800372a:	f7fd feb7 	bl	800149c <HAL_GPIO_WritePin>
		// turn on floor 3 LED
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800372e:	2201      	movs	r2, #1
 8003730:	2108      	movs	r1, #8
 8003732:	4808      	ldr	r0, [pc, #32]	; (8003754 <RxSwitch+0x94>)
 8003734:	f7fd feb2 	bl	800149c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8003738:	2064      	movs	r0, #100	; 0x64
 800373a:	f7fc fdb1 	bl	80002a0 <HAL_Delay>
		break;
 800373e:	e002      	b.n	8003746 <RxSwitch+0x86>
	  default:
		Error_Handler();
 8003740:	f000 f856 	bl	80037f0 <Error_Handler>
		break;
 8003744:	bf00      	nop
  }
}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	2000006c 	.word	0x2000006c
 8003750:	20000030 	.word	0x20000030
 8003754:	48000800 	.word	0x48000800

08003758 <RequestFloor>:
 * void RequestFloor(void):
 * Transmit the floor request to the CAN network. Value of TxData[0] is currently 0x05, 0x06,
 * or 0x07 for testing purposes. After implementation of FULL CAN PROTOCOL, it should be
 * changed to FLOOR_REQUEST.
 *****************************************************************************************/
void RequestFloor(void){
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  // Turn on button LED
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800375c:	2201      	movs	r2, #1
 800375e:	2101      	movs	r1, #1
 8003760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003764:	f7fd fe9a 	bl	800149c <HAL_GPIO_WritePin>
  // Transmit floor request
  TxData[0] = FLOOR_REQUEST;
 8003768:	4b07      	ldr	r3, [pc, #28]	; (8003788 <RequestFloor+0x30>)
 800376a:	2201      	movs	r2, #1
 800376c:	701a      	strb	r2, [r3, #0]
  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {	// Transmit the message
 800376e:	4b07      	ldr	r3, [pc, #28]	; (800378c <RequestFloor+0x34>)
 8003770:	4a05      	ldr	r2, [pc, #20]	; (8003788 <RequestFloor+0x30>)
 8003772:	4907      	ldr	r1, [pc, #28]	; (8003790 <RequestFloor+0x38>)
 8003774:	4807      	ldr	r0, [pc, #28]	; (8003794 <RequestFloor+0x3c>)
 8003776:	f7fc ffbd 	bl	80006f4 <HAL_CAN_AddTxMessage>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <RequestFloor+0x2c>
    Error_Handler();	// Transmission error
 8003780:	f000 f836 	bl	80037f0 <Error_Handler>
  }
}
 8003784:	bf00      	nop
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20000060 	.word	0x20000060
 800378c:	20000068 	.word	0x20000068
 8003790:	200000e4 	.word	0x200000e4
 8003794:	20000034 	.word	0x20000034

08003798 <HAL_CAN_RxFifo0MsgPendingCallback>:

// Override the HAL_CAN_RxFifo0MsgPendingCallback function.
// This is called when the interrupt for FIFO0 is triggered.
/****************************************************************************************** */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Get RX message and store in RxData[] buffer */
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80037a0:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80037a2:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80037a4:	2100      	movs	r1, #0
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7fd f87b 	bl	80008a2 <HAL_CAN_GetRxMessage>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
    {
      /* Reception Error */
      Error_Handler();
 80037b2:	f000 f81d 	bl	80037f0 <Error_Handler>
    }
    RX_STATE = RX_PENDING;
 80037b6:	4b05      	ldr	r3, [pc, #20]	; (80037cc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	701a      	strb	r2, [r3, #0]
}
 80037bc:	bf00      	nop
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	2000006c 	.word	0x2000006c
 80037c8:	200000fc 	.word	0x200000fc
 80037cc:	20000029 	.word	0x20000029

080037d0 <HAL_GPIO_EXTI_Callback>:

/* ******************************************************************************************** */


// Override the HAL_GPIO Callback -- 1. light up LED2 and 2. Transmit message when the blue button is pushed
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	80fb      	strh	r3, [r7, #6]
  // Set flag indicating a button has been pressed
  BUTTON = BUTTON_PRESSED;
 80037da:	4b04      	ldr	r3, [pc, #16]	; (80037ec <HAL_GPIO_EXTI_Callback+0x1c>)
 80037dc:	2201      	movs	r2, #1
 80037de:	701a      	strb	r2, [r3, #0]

/* USER CODE END 4 */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	20000028 	.word	0x20000028

080037f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
	...

08003800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003806:	4a0f      	ldr	r2, [pc, #60]	; (8003844 <HAL_MspInit+0x44>)
 8003808:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <HAL_MspInit+0x44>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	6193      	str	r3, [r2, #24]
 8003812:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <HAL_MspInit+0x44>)
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	607b      	str	r3, [r7, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800381e:	4a09      	ldr	r2, [pc, #36]	; (8003844 <HAL_MspInit+0x44>)
 8003820:	4b08      	ldr	r3, [pc, #32]	; (8003844 <HAL_MspInit+0x44>)
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003828:	61d3      	str	r3, [r2, #28]
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_MspInit+0x44>)
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003836:	2007      	movs	r0, #7
 8003838:	f7fd fc60 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000

08003848 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08a      	sub	sp, #40	; 0x28
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003850:	f107 0314 	add.w	r3, r7, #20
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	60da      	str	r2, [r3, #12]
 800385e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1c      	ldr	r2, [pc, #112]	; (80038d8 <HAL_CAN_MspInit+0x90>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d131      	bne.n	80038ce <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800386a:	4a1c      	ldr	r2, [pc, #112]	; (80038dc <HAL_CAN_MspInit+0x94>)
 800386c:	4b1b      	ldr	r3, [pc, #108]	; (80038dc <HAL_CAN_MspInit+0x94>)
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003874:	61d3      	str	r3, [r2, #28]
 8003876:	4b19      	ldr	r3, [pc, #100]	; (80038dc <HAL_CAN_MspInit+0x94>)
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003882:	4a16      	ldr	r2, [pc, #88]	; (80038dc <HAL_CAN_MspInit+0x94>)
 8003884:	4b15      	ldr	r3, [pc, #84]	; (80038dc <HAL_CAN_MspInit+0x94>)
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388c:	6153      	str	r3, [r2, #20]
 800388e:	4b13      	ldr	r3, [pc, #76]	; (80038dc <HAL_CAN_MspInit+0x94>)
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800389a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800389e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a0:	2302      	movs	r3, #2
 80038a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038a8:	2303      	movs	r3, #3
 80038aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80038ac:	2309      	movs	r3, #9
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b0:	f107 0314 	add.w	r3, r7, #20
 80038b4:	4619      	mov	r1, r3
 80038b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038ba:	f7fd fc61 	bl	8001180 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80038be:	2200      	movs	r2, #0
 80038c0:	2100      	movs	r1, #0
 80038c2:	2014      	movs	r0, #20
 80038c4:	f7fd fc25 	bl	8001112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80038c8:	2014      	movs	r0, #20
 80038ca:	f7fd fc3e 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80038ce:	bf00      	nop
 80038d0:	3728      	adds	r7, #40	; 0x28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40006400 	.word	0x40006400
 80038dc:	40021000 	.word	0x40021000

080038e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	; 0x28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e8:	f107 0314 	add.w	r3, r7, #20
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a17      	ldr	r2, [pc, #92]	; (800395c <HAL_UART_MspInit+0x7c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d128      	bne.n	8003954 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003902:	4a17      	ldr	r2, [pc, #92]	; (8003960 <HAL_UART_MspInit+0x80>)
 8003904:	4b16      	ldr	r3, [pc, #88]	; (8003960 <HAL_UART_MspInit+0x80>)
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800390c:	61d3      	str	r3, [r2, #28]
 800390e:	4b14      	ldr	r3, [pc, #80]	; (8003960 <HAL_UART_MspInit+0x80>)
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391a:	4a11      	ldr	r2, [pc, #68]	; (8003960 <HAL_UART_MspInit+0x80>)
 800391c:	4b10      	ldr	r3, [pc, #64]	; (8003960 <HAL_UART_MspInit+0x80>)
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003924:	6153      	str	r3, [r2, #20]
 8003926:	4b0e      	ldr	r3, [pc, #56]	; (8003960 <HAL_UART_MspInit+0x80>)
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003932:	230c      	movs	r3, #12
 8003934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003936:	2302      	movs	r3, #2
 8003938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800393e:	2300      	movs	r3, #0
 8003940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003942:	2307      	movs	r3, #7
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003946:	f107 0314 	add.w	r3, r7, #20
 800394a:	4619      	mov	r1, r3
 800394c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003950:	f7fd fc16 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003954:	bf00      	nop
 8003956:	3728      	adds	r7, #40	; 0x28
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40004400 	.word	0x40004400
 8003960:	40021000 	.word	0x40021000

08003964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003972:	b480      	push	{r7}
 8003974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003976:	e7fe      	b.n	8003976 <HardFault_Handler+0x4>

08003978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800397c:	e7fe      	b.n	800397c <MemManage_Handler+0x4>

0800397e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800397e:	b480      	push	{r7}
 8003980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003982:	e7fe      	b.n	8003982 <BusFault_Handler+0x4>

08003984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003988:	e7fe      	b.n	8003988 <UsageFault_Handler+0x4>

0800398a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800398a:	b480      	push	{r7}
 800398c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800398e:	bf00      	nop
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039a6:	b480      	push	{r7}
 80039a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039b8:	f7fc fc52 	bl	8000260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039bc:	bf00      	nop
 80039be:	bd80      	pop	{r7, pc}

080039c0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80039c4:	4802      	ldr	r0, [pc, #8]	; (80039d0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80039c6:	f7fd f8a5 	bl	8000b14 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000034 	.word	0x20000034

080039d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80039d8:	2020      	movs	r0, #32
 80039da:	f7fd fd77 	bl	80014cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80039de:	2040      	movs	r0, #64	; 0x40
 80039e0:	f7fd fd74 	bl	80014cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80039e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80039e8:	f7fd fd70 	bl	80014cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80039ec:	bf00      	nop
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80039f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80039f8:	f7fd fd68 	bl	80014cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039fc:	bf00      	nop
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a04:	4a1f      	ldr	r2, [pc, #124]	; (8003a84 <SystemInit+0x84>)
 8003a06:	4b1f      	ldr	r3, [pc, #124]	; (8003a84 <SystemInit+0x84>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003a14:	4a1c      	ldr	r2, [pc, #112]	; (8003a88 <SystemInit+0x88>)
 8003a16:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <SystemInit+0x88>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003a20:	4919      	ldr	r1, [pc, #100]	; (8003a88 <SystemInit+0x88>)
 8003a22:	4b19      	ldr	r3, [pc, #100]	; (8003a88 <SystemInit+0x88>)
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	4b19      	ldr	r3, [pc, #100]	; (8003a8c <SystemInit+0x8c>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003a2c:	4a16      	ldr	r2, [pc, #88]	; (8003a88 <SystemInit+0x88>)
 8003a2e:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <SystemInit+0x88>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003a3c:	4a12      	ldr	r2, [pc, #72]	; (8003a88 <SystemInit+0x88>)
 8003a3e:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <SystemInit+0x88>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a46:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003a48:	4a0f      	ldr	r2, [pc, #60]	; (8003a88 <SystemInit+0x88>)
 8003a4a:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <SystemInit+0x88>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003a52:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003a54:	4a0c      	ldr	r2, [pc, #48]	; (8003a88 <SystemInit+0x88>)
 8003a56:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <SystemInit+0x88>)
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	f023 030f 	bic.w	r3, r3, #15
 8003a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003a60:	4909      	ldr	r1, [pc, #36]	; (8003a88 <SystemInit+0x88>)
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <SystemInit+0x88>)
 8003a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a66:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <SystemInit+0x90>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003a6c:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <SystemInit+0x88>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a72:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <SystemInit+0x84>)
 8003a74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a78:	609a      	str	r2, [r3, #8]
#endif
}
 8003a7a:	bf00      	nop
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	e000ed00 	.word	0xe000ed00
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	f87fc00c 	.word	0xf87fc00c
 8003a90:	ff00fccc 	.word	0xff00fccc

08003a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003acc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003a98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003a9a:	e003      	b.n	8003aa4 <LoopCopyDataInit>

08003a9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003a9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003aa0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003aa2:	3104      	adds	r1, #4

08003aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003aa4:	480b      	ldr	r0, [pc, #44]	; (8003ad4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003aa6:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003aa8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003aaa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003aac:	d3f6      	bcc.n	8003a9c <CopyDataInit>
	ldr	r2, =_sbss
 8003aae:	4a0b      	ldr	r2, [pc, #44]	; (8003adc <LoopForever+0x12>)
	b	LoopFillZerobss
 8003ab0:	e002      	b.n	8003ab8 <LoopFillZerobss>

08003ab2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003ab2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003ab4:	f842 3b04 	str.w	r3, [r2], #4

08003ab8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003ab8:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <LoopForever+0x16>)
	cmp	r2, r3
 8003aba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003abc:	d3f9      	bcc.n	8003ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003abe:	f7ff ff9f 	bl	8003a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ac2:	f000 f811 	bl	8003ae8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ac6:	f7ff fbdf 	bl	8003288 <main>

08003aca <LoopForever>:

LoopForever:
    b LoopForever
 8003aca:	e7fe      	b.n	8003aca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003acc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003ad0:	08003b98 	.word	0x08003b98
	ldr	r0, =_sdata
 8003ad4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003ad8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8003adc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8003ae0:	20000118 	.word	0x20000118

08003ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ae4:	e7fe      	b.n	8003ae4 <ADC1_2_IRQHandler>
	...

08003ae8 <__libc_init_array>:
 8003ae8:	b570      	push	{r4, r5, r6, lr}
 8003aea:	4e0d      	ldr	r6, [pc, #52]	; (8003b20 <__libc_init_array+0x38>)
 8003aec:	4c0d      	ldr	r4, [pc, #52]	; (8003b24 <__libc_init_array+0x3c>)
 8003aee:	1ba4      	subs	r4, r4, r6
 8003af0:	10a4      	asrs	r4, r4, #2
 8003af2:	2500      	movs	r5, #0
 8003af4:	42a5      	cmp	r5, r4
 8003af6:	d109      	bne.n	8003b0c <__libc_init_array+0x24>
 8003af8:	4e0b      	ldr	r6, [pc, #44]	; (8003b28 <__libc_init_array+0x40>)
 8003afa:	4c0c      	ldr	r4, [pc, #48]	; (8003b2c <__libc_init_array+0x44>)
 8003afc:	f000 f820 	bl	8003b40 <_init>
 8003b00:	1ba4      	subs	r4, r4, r6
 8003b02:	10a4      	asrs	r4, r4, #2
 8003b04:	2500      	movs	r5, #0
 8003b06:	42a5      	cmp	r5, r4
 8003b08:	d105      	bne.n	8003b16 <__libc_init_array+0x2e>
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
 8003b0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b10:	4798      	blx	r3
 8003b12:	3501      	adds	r5, #1
 8003b14:	e7ee      	b.n	8003af4 <__libc_init_array+0xc>
 8003b16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b1a:	4798      	blx	r3
 8003b1c:	3501      	adds	r5, #1
 8003b1e:	e7f2      	b.n	8003b06 <__libc_init_array+0x1e>
 8003b20:	08003b90 	.word	0x08003b90
 8003b24:	08003b90 	.word	0x08003b90
 8003b28:	08003b90 	.word	0x08003b90
 8003b2c:	08003b94 	.word	0x08003b94

08003b30 <memset>:
 8003b30:	4402      	add	r2, r0
 8003b32:	4603      	mov	r3, r0
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d100      	bne.n	8003b3a <memset+0xa>
 8003b38:	4770      	bx	lr
 8003b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b3e:	e7f9      	b.n	8003b34 <memset+0x4>

08003b40 <_init>:
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	bf00      	nop
 8003b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b46:	bc08      	pop	{r3}
 8003b48:	469e      	mov	lr, r3
 8003b4a:	4770      	bx	lr

08003b4c <_fini>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	bf00      	nop
 8003b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b52:	bc08      	pop	{r3}
 8003b54:	469e      	mov	lr, r3
 8003b56:	4770      	bx	lr
