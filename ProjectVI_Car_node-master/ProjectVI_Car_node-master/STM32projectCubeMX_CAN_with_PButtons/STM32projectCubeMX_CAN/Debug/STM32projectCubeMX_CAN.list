
STM32projectCubeMX_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c44  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001dd8  08001dd8  00011dd8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001e14  08001e14  00011e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001e18  08001e18  00011e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08001e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          00000104  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000114  20000114  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f43a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000205b  00000000  00000000  0002f47a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003b5e  00000000  00000000  000314d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000630  00000000  00000000  00035038  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000910  00000000  00000000  00035668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003e22  00000000  00000000  00035f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002ee7  00000000  00000000  00039d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003cc81  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000010b8  00000000  00000000  0003cd00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001dc0 	.word	0x08001dc0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08001dc0 	.word	0x08001dc0

080001d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001d4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d6:	4a0e      	ldr	r2, [pc, #56]	; (8000210 <HAL_InitTick+0x3c>)
 80001d8:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <HAL_InitTick+0x40>)
{
 80001da:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001dc:	7818      	ldrb	r0, [r3, #0]
 80001de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e2:	fbb3 f3f0 	udiv	r3, r3, r0
 80001e6:	6810      	ldr	r0, [r2, #0]
 80001e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80001ec:	f000 fb90 	bl	8000910 <HAL_SYSTICK_Config>
 80001f0:	4604      	mov	r4, r0
 80001f2:	b958      	cbnz	r0, 800020c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001f4:	2d0f      	cmp	r5, #15
 80001f6:	d809      	bhi.n	800020c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001f8:	4602      	mov	r2, r0
 80001fa:	4629      	mov	r1, r5
 80001fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000200:	f000 fb46 	bl	8000890 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000204:	4b04      	ldr	r3, [pc, #16]	; (8000218 <HAL_InitTick+0x44>)
 8000206:	4620      	mov	r0, r4
 8000208:	601d      	str	r5, [r3, #0]
 800020a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800020c:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 800020e:	bd38      	pop	{r3, r4, r5, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	20000000 	.word	0x20000000
 8000218:	20000004 	.word	0x20000004

0800021c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800021c:	4a07      	ldr	r2, [pc, #28]	; (800023c <HAL_Init+0x20>)
{
 800021e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000220:	6813      	ldr	r3, [r2, #0]
 8000222:	f043 0310 	orr.w	r3, r3, #16
 8000226:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000228:	2003      	movs	r0, #3
 800022a:	f000 fb1f 	bl	800086c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800022e:	2000      	movs	r0, #0
 8000230:	f7ff ffd0 	bl	80001d4 <HAL_InitTick>
  HAL_MspInit();
 8000234:	f001 fc92 	bl	8001b5c <HAL_MspInit>
}
 8000238:	2000      	movs	r0, #0
 800023a:	bd08      	pop	{r3, pc}
 800023c:	40022000 	.word	0x40022000

08000240 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000240:	4a03      	ldr	r2, [pc, #12]	; (8000250 <HAL_IncTick+0x10>)
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <HAL_IncTick+0x14>)
 8000244:	6811      	ldr	r1, [r2, #0]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	440b      	add	r3, r1
 800024a:	6013      	str	r3, [r2, #0]
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	20000030 	.word	0x20000030
 8000254:	20000000 	.word	0x20000000

08000258 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000258:	4b01      	ldr	r3, [pc, #4]	; (8000260 <HAL_GetTick+0x8>)
 800025a:	6818      	ldr	r0, [r3, #0]
}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	20000030 	.word	0x20000030

08000264 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000264:	b538      	push	{r3, r4, r5, lr}
 8000266:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000268:	f7ff fff6 	bl	8000258 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800026c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800026e:	bf1c      	itt	ne
 8000270:	4b05      	ldrne	r3, [pc, #20]	; (8000288 <HAL_Delay+0x24>)
 8000272:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000274:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000276:	bf18      	it	ne
 8000278:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800027a:	f7ff ffed 	bl	8000258 <HAL_GetTick>
 800027e:	1b40      	subs	r0, r0, r5
 8000280:	4284      	cmp	r4, r0
 8000282:	d8fa      	bhi.n	800027a <HAL_Delay+0x16>
  {
  }
}
 8000284:	bd38      	pop	{r3, r4, r5, pc}
 8000286:	bf00      	nop
 8000288:	20000000 	.word	0x20000000

0800028c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800028c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800028e:	4604      	mov	r4, r0
 8000290:	2800      	cmp	r0, #0
 8000292:	d06e      	beq.n	8000372 <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000294:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000298:	b90b      	cbnz	r3, 800029e <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800029a:	f001 fc7b 	bl	8001b94 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800029e:	6822      	ldr	r2, [r4, #0]
 80002a0:	6813      	ldr	r3, [r2, #0]
 80002a2:	f023 0302 	bic.w	r3, r3, #2
 80002a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002a8:	f7ff ffd6 	bl	8000258 <HAL_GetTick>
 80002ac:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80002ae:	6823      	ldr	r3, [r4, #0]
 80002b0:	685a      	ldr	r2, [r3, #4]
 80002b2:	0791      	lsls	r1, r2, #30
 80002b4:	d451      	bmi.n	800035a <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	f042 0201 	orr.w	r2, r2, #1
 80002bc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002be:	f7ff ffcb 	bl	8000258 <HAL_GetTick>
 80002c2:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80002c4:	6823      	ldr	r3, [r4, #0]
 80002c6:	685a      	ldr	r2, [r3, #4]
 80002c8:	07d2      	lsls	r2, r2, #31
 80002ca:	d554      	bpl.n	8000376 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80002cc:	7e22      	ldrb	r2, [r4, #24]
 80002ce:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	bf0c      	ite	eq
 80002d4:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80002d8:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80002dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80002de:	7e62      	ldrb	r2, [r4, #25]
 80002e0:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	bf0c      	ite	eq
 80002e6:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80002ea:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80002ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80002f0:	7ea2      	ldrb	r2, [r4, #26]
 80002f2:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	bf0c      	ite	eq
 80002f8:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80002fc:	f022 0220 	bicne.w	r2, r2, #32
 8000300:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000302:	7ee2      	ldrb	r2, [r4, #27]
 8000304:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	bf0c      	ite	eq
 800030a:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800030e:	f042 0210 	orrne.w	r2, r2, #16
 8000312:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000314:	7f22      	ldrb	r2, [r4, #28]
 8000316:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	bf0c      	ite	eq
 800031c:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000320:	f022 0208 	bicne.w	r2, r2, #8
 8000324:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000326:	7f62      	ldrb	r2, [r4, #29]
 8000328:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	bf0c      	ite	eq
 800032e:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000332:	f022 0204 	bicne.w	r2, r2, #4
 8000336:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000338:	68e1      	ldr	r1, [r4, #12]
 800033a:	68a2      	ldr	r2, [r4, #8]
 800033c:	430a      	orrs	r2, r1
 800033e:	6921      	ldr	r1, [r4, #16]
 8000340:	430a      	orrs	r2, r1
 8000342:	6961      	ldr	r1, [r4, #20]
 8000344:	430a      	orrs	r2, r1
 8000346:	6861      	ldr	r1, [r4, #4]
 8000348:	3901      	subs	r1, #1
 800034a:	430a      	orrs	r2, r1
 800034c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800034e:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000350:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000352:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000354:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000358:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800035a:	f7ff ff7d 	bl	8000258 <HAL_GetTick>
 800035e:	1b40      	subs	r0, r0, r5
 8000360:	280a      	cmp	r0, #10
 8000362:	d9a4      	bls.n	80002ae <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000364:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800036a:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800036c:	2305      	movs	r3, #5
 800036e:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000372:	2001      	movs	r0, #1
}
 8000374:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000376:	f7ff ff6f 	bl	8000258 <HAL_GetTick>
 800037a:	1b40      	subs	r0, r0, r5
 800037c:	280a      	cmp	r0, #10
 800037e:	d9a1      	bls.n	80002c4 <HAL_CAN_Init+0x38>
 8000380:	e7f0      	b.n	8000364 <HAL_CAN_Init+0xd8>

08000382 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000382:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000386:	3b01      	subs	r3, #1
 8000388:	2b01      	cmp	r3, #1
{
 800038a:	b570      	push	{r4, r5, r6, lr}
  if ((state == HAL_CAN_STATE_READY) ||
 800038c:	d85f      	bhi.n	800044e <HAL_CAN_ConfigFilter+0xcc>
  CAN_TypeDef *can_ip = hcan->Instance;
 800038e:	6803      	ldr	r3, [r0, #0]

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000390:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000392:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000396:	f042 0201 	orr.w	r2, r2, #1
 800039a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800039e:	2401      	movs	r4, #1
 80003a0:	f000 021f 	and.w	r2, r0, #31

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80003a4:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80003a8:	fa04 f202 	lsl.w	r2, r4, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80003ac:	43d4      	mvns	r4, r2
 80003ae:	4025      	ands	r5, r4
 80003b0:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80003b4:	69cd      	ldr	r5, [r1, #28]
 80003b6:	bb85      	cbnz	r5, 800041a <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80003b8:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80003bc:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80003be:	4025      	ands	r5, r4
 80003c0:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80003c4:	888d      	ldrh	r5, [r1, #4]
 80003c6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80003ca:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80003ce:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80003d2:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80003d4:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80003d6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80003da:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80003de:	6988      	ldr	r0, [r1, #24]
 80003e0:	bb68      	cbnz	r0, 800043e <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80003e2:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80003e6:	4020      	ands	r0, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80003e8:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80003ec:	6908      	ldr	r0, [r1, #16]
 80003ee:	bb50      	cbnz	r0, 8000446 <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80003f0:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80003f4:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80003f6:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80003fa:	6a09      	ldr	r1, [r1, #32]
 80003fc:	2901      	cmp	r1, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80003fe:	bf02      	ittt	eq
 8000400:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 8000404:	430a      	orreq	r2, r1
 8000406:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800040a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800040e:	f022 0201 	bic.w	r2, r2, #1
 8000412:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000416:	2000      	movs	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800041a:	2d01      	cmp	r5, #1
 800041c:	d1df      	bne.n	80003de <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800041e:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000422:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000424:	4315      	orrs	r5, r2
 8000426:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800042a:	888d      	ldrh	r5, [r1, #4]
 800042c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000430:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000434:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000438:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800043a:	898d      	ldrh	r5, [r1, #12]
 800043c:	e7cb      	b.n	80003d6 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800043e:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8000442:	4310      	orrs	r0, r2
 8000444:	e7d0      	b.n	80003e8 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000446:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800044a:	4310      	orrs	r0, r2
 800044c:	e7d3      	b.n	80003f6 <HAL_CAN_ConfigFilter+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800044e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000454:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000456:	2001      	movs	r0, #1
  }
}
 8000458:	bd70      	pop	{r4, r5, r6, pc}

0800045a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800045a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800045c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000460:	2b01      	cmp	r3, #1
{
 8000462:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000464:	d11f      	bne.n	80004a6 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000466:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000468:	2302      	movs	r3, #2
 800046a:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800046e:	6813      	ldr	r3, [r2, #0]
 8000470:	f023 0301 	bic.w	r3, r3, #1
 8000474:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000476:	f7ff feef 	bl	8000258 <HAL_GetTick>
 800047a:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800047c:	6823      	ldr	r3, [r4, #0]
 800047e:	6858      	ldr	r0, [r3, #4]
 8000480:	f010 0001 	ands.w	r0, r0, #1
 8000484:	d101      	bne.n	800048a <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000486:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000488:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800048a:	f7ff fee5 	bl	8000258 <HAL_GetTick>
 800048e:	1b40      	subs	r0, r0, r5
 8000490:	280a      	cmp	r0, #10
 8000492:	d9f3      	bls.n	800047c <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000494:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800049a:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800049c:	2305      	movs	r3, #5
 800049e:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 80004a2:	2001      	movs	r0, #1
  }
}
 80004a4:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80004a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80004a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004ac:	6243      	str	r3, [r0, #36]	; 0x24
 80004ae:	e7f8      	b.n	80004a2 <HAL_CAN_Start+0x48>

080004b0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80004b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80004b2:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80004b6:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80004b8:	3d01      	subs	r5, #1
 80004ba:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80004bc:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80004be:	d840      	bhi.n	8000542 <HAL_CAN_AddTxMessage+0x92>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80004c0:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80004c4:	d039      	beq.n	800053a <HAL_CAN_AddTxMessage+0x8a>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80004c6:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80004ca:	2c03      	cmp	r4, #3
 80004cc:	f04f 0501 	mov.w	r5, #1
 80004d0:	d105      	bne.n	80004de <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80004d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80004d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80004d8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80004da:	2001      	movs	r0, #1
  }
}
 80004dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80004de:	40a5      	lsls	r5, r4
 80004e0:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80004e2:	6888      	ldr	r0, [r1, #8]
 80004e4:	68cf      	ldr	r7, [r1, #12]
 80004e6:	f104 0318 	add.w	r3, r4, #24
 80004ea:	bb08      	cbnz	r0, 8000530 <HAL_CAN_AddTxMessage+0x80>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80004ec:	6808      	ldr	r0, [r1, #0]
 80004ee:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80004f2:	011b      	lsls	r3, r3, #4
 80004f4:	0124      	lsls	r4, r4, #4
 80004f6:	50f0      	str	r0, [r6, r3]
 80004f8:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80004fa:	6908      	ldr	r0, [r1, #16]
      if (pHeader->TransmitGlobalTime == ENABLE)
 80004fc:	7d09      	ldrb	r1, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80004fe:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000502:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000504:	bf02      	ittt	eq
 8000506:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 800050a:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 800050e:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000512:	4434      	add	r4, r6
 8000514:	6851      	ldr	r1, [r2, #4]
 8000516:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800051a:	6812      	ldr	r2, [r2, #0]
 800051c:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000520:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000524:	f042 0201 	orr.w	r2, r2, #1
 8000528:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 800052c:	2000      	movs	r0, #0
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000530:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000532:	4338      	orrs	r0, r7
 8000534:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8000538:	e7db      	b.n	80004f2 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800053a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800053c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000540:	e7ca      	b.n	80004d8 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000542:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000548:	e7c6      	b.n	80004d8 <HAL_CAN_AddTxMessage+0x28>

0800054a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800054a:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 800054c:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000550:	3c01      	subs	r4, #1
 8000552:	2c01      	cmp	r4, #1
 8000554:	d86b      	bhi.n	800062e <HAL_CAN_GetRxMessage+0xe4>
 8000556:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000558:	b941      	cbnz	r1, 800056c <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800055a:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800055c:	07a4      	lsls	r4, r4, #30
 800055e:	d107      	bne.n	8000570 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000560:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000562:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000566:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000568:	2001      	movs	r0, #1
  }
}
 800056a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800056c:	6934      	ldr	r4, [r6, #16]
 800056e:	e7f5      	b.n	800055c <HAL_CAN_GetRxMessage+0x12>
 8000570:	010c      	lsls	r4, r1, #4
 8000572:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000574:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000578:	f007 0704 	and.w	r7, r7, #4
 800057c:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800057e:	2f00      	cmp	r7, #0
 8000580:	d14b      	bne.n	800061a <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000582:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000586:	0d7f      	lsrs	r7, r7, #21
 8000588:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 800058a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800058e:	f3c7 0740 	ubfx	r7, r7, #1, #1
 8000592:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000594:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8000598:	f007 070f 	and.w	r7, r7, #15
 800059c:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800059e:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80005a2:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80005a6:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80005a8:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80005ac:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80005ae:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80005b0:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80005b2:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 80005b6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80005b8:	6802      	ldr	r2, [r0, #0]
 80005ba:	4422      	add	r2, r4
 80005bc:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80005c0:	0a12      	lsrs	r2, r2, #8
 80005c2:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80005c4:	6802      	ldr	r2, [r0, #0]
 80005c6:	4422      	add	r2, r4
 80005c8:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80005cc:	0c12      	lsrs	r2, r2, #16
 80005ce:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80005d0:	6802      	ldr	r2, [r0, #0]
 80005d2:	4422      	add	r2, r4
 80005d4:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80005d8:	0e12      	lsrs	r2, r2, #24
 80005da:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80005dc:	6802      	ldr	r2, [r0, #0]
 80005de:	4422      	add	r2, r4
 80005e0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80005e4:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80005e6:	6802      	ldr	r2, [r0, #0]
 80005e8:	4422      	add	r2, r4
 80005ea:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80005ee:	0a12      	lsrs	r2, r2, #8
 80005f0:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80005f2:	6802      	ldr	r2, [r0, #0]
 80005f4:	4422      	add	r2, r4
 80005f6:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80005fa:	0c12      	lsrs	r2, r2, #16
 80005fc:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80005fe:	6802      	ldr	r2, [r0, #0]
 8000600:	4414      	add	r4, r2
 8000602:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8000606:	0e12      	lsrs	r2, r2, #24
 8000608:	71da      	strb	r2, [r3, #7]
 800060a:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800060c:	b951      	cbnz	r1, 8000624 <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800060e:	68da      	ldr	r2, [r3, #12]
 8000610:	f042 0220 	orr.w	r2, r2, #32
 8000614:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8000616:	2000      	movs	r0, #0
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800061a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800061e:	08ff      	lsrs	r7, r7, #3
 8000620:	6057      	str	r7, [r2, #4]
 8000622:	e7b2      	b.n	800058a <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000624:	691a      	ldr	r2, [r3, #16]
 8000626:	f042 0220 	orr.w	r2, r2, #32
 800062a:	611a      	str	r2, [r3, #16]
 800062c:	e7f3      	b.n	8000616 <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800062e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000634:	e797      	b.n	8000566 <HAL_CAN_GetRxMessage+0x1c>

08000636 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000636:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800063a:	3b01      	subs	r3, #1
 800063c:	2b01      	cmp	r3, #1
 800063e:	d805      	bhi.n	800064c <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000640:	6802      	ldr	r2, [r0, #0]
 8000642:	6953      	ldr	r3, [r2, #20]
 8000644:	4319      	orrs	r1, r3
 8000646:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 8000648:	2000      	movs	r0, #0
 800064a:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800064c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800064e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000652:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000654:	2001      	movs	r0, #1
  }
}
 8000656:	4770      	bx	lr

08000658 <HAL_CAN_TxMailbox0CompleteCallback>:
 8000658:	4770      	bx	lr

0800065a <HAL_CAN_TxMailbox1CompleteCallback>:
 800065a:	4770      	bx	lr

0800065c <HAL_CAN_TxMailbox2CompleteCallback>:
 800065c:	4770      	bx	lr

0800065e <HAL_CAN_TxMailbox0AbortCallback>:
 800065e:	4770      	bx	lr

08000660 <HAL_CAN_TxMailbox1AbortCallback>:
 8000660:	4770      	bx	lr

08000662 <HAL_CAN_TxMailbox2AbortCallback>:
 8000662:	4770      	bx	lr

08000664 <HAL_CAN_RxFifo0FullCallback>:
 8000664:	4770      	bx	lr

08000666 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8000666:	4770      	bx	lr

08000668 <HAL_CAN_RxFifo1FullCallback>:
 8000668:	4770      	bx	lr

0800066a <HAL_CAN_SleepCallback>:
 800066a:	4770      	bx	lr

0800066c <HAL_CAN_WakeUpFromRxMsgCallback>:
 800066c:	4770      	bx	lr

0800066e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800066e:	4770      	bx	lr

08000670 <HAL_CAN_IRQHandler>:
{
 8000670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000674:	6803      	ldr	r3, [r0, #0]
 8000676:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000678:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800067c:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800067e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000682:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000686:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800068a:	f016 0401 	ands.w	r4, r6, #1
{
 800068e:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000690:	d022      	beq.n	80006d8 <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000692:	f017 0401 	ands.w	r4, r7, #1
 8000696:	d007      	beq.n	80006a8 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000698:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800069a:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800069c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800069e:	f140 80a3 	bpl.w	80007e8 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80006a2:	f7ff ffd9 	bl	8000658 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80006a6:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80006a8:	05fb      	lsls	r3, r7, #23
 80006aa:	d509      	bpl.n	80006c0 <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80006ac:	682b      	ldr	r3, [r5, #0]
 80006ae:	f44f 7280 	mov.w	r2, #256	; 0x100
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80006b2:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80006b4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80006b6:	f140 80a5 	bpl.w	8000804 <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80006ba:	4628      	mov	r0, r5
 80006bc:	f7ff ffcd 	bl	800065a <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80006c0:	03fb      	lsls	r3, r7, #15
 80006c2:	d509      	bpl.n	80006d8 <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80006c4:	682b      	ldr	r3, [r5, #0]
 80006c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80006ca:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80006cc:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80006ce:	f140 80a7 	bpl.w	8000820 <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80006d2:	4628      	mov	r0, r5
 80006d4:	f7ff ffc2 	bl	800065c <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80006d8:	0733      	lsls	r3, r6, #28
 80006da:	d507      	bpl.n	80006ec <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80006dc:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80006e0:	bf1f      	itttt	ne
 80006e2:	682b      	ldrne	r3, [r5, #0]
 80006e4:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80006e6:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80006ea:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80006ec:	0777      	lsls	r7, r6, #29
 80006ee:	d508      	bpl.n	8000702 <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80006f0:	f01b 0f08 	tst.w	fp, #8
 80006f4:	d005      	beq.n	8000702 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80006f6:	682b      	ldr	r3, [r5, #0]
 80006f8:	2208      	movs	r2, #8
 80006fa:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80006fc:	4628      	mov	r0, r5
 80006fe:	f7ff ffb1 	bl	8000664 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000702:	07b0      	lsls	r0, r6, #30
 8000704:	d506      	bpl.n	8000714 <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000706:	682b      	ldr	r3, [r5, #0]
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	0799      	lsls	r1, r3, #30
 800070c:	d002      	beq.n	8000714 <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800070e:	4628      	mov	r0, r5
 8000710:	f001 f9f8 	bl	8001b04 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000714:	0672      	lsls	r2, r6, #25
 8000716:	d507      	bpl.n	8000728 <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000718:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800071c:	bf1f      	itttt	ne
 800071e:	682b      	ldrne	r3, [r5, #0]
 8000720:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000722:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000726:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000728:	06b3      	lsls	r3, r6, #26
 800072a:	d508      	bpl.n	800073e <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800072c:	f01a 0f08 	tst.w	sl, #8
 8000730:	d005      	beq.n	800073e <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000732:	682b      	ldr	r3, [r5, #0]
 8000734:	2208      	movs	r2, #8
 8000736:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000738:	4628      	mov	r0, r5
 800073a:	f7ff ff95 	bl	8000668 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800073e:	06f7      	lsls	r7, r6, #27
 8000740:	d506      	bpl.n	8000750 <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000742:	682b      	ldr	r3, [r5, #0]
 8000744:	691b      	ldr	r3, [r3, #16]
 8000746:	0798      	lsls	r0, r3, #30
 8000748:	d002      	beq.n	8000750 <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800074a:	4628      	mov	r0, r5
 800074c:	f7ff ff8b 	bl	8000666 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000750:	03b1      	lsls	r1, r6, #14
 8000752:	d508      	bpl.n	8000766 <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000754:	f019 0f10 	tst.w	r9, #16
 8000758:	d005      	beq.n	8000766 <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800075a:	682b      	ldr	r3, [r5, #0]
 800075c:	2210      	movs	r2, #16
 800075e:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000760:	4628      	mov	r0, r5
 8000762:	f7ff ff82 	bl	800066a <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000766:	03f2      	lsls	r2, r6, #15
 8000768:	d508      	bpl.n	800077c <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800076a:	f019 0f08 	tst.w	r9, #8
 800076e:	d005      	beq.n	800077c <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000770:	682b      	ldr	r3, [r5, #0]
 8000772:	2208      	movs	r2, #8
 8000774:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000776:	4628      	mov	r0, r5
 8000778:	f7ff ff78 	bl	800066c <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800077c:	0433      	lsls	r3, r6, #16
 800077e:	d52a      	bpl.n	80007d6 <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000780:	f019 0f04 	tst.w	r9, #4
 8000784:	682a      	ldr	r2, [r5, #0]
 8000786:	d024      	beq.n	80007d2 <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000788:	05f7      	lsls	r7, r6, #23
 800078a:	d504      	bpl.n	8000796 <HAL_CAN_IRQHandler+0x126>
 800078c:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8000790:	bf18      	it	ne
 8000792:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000796:	05b0      	lsls	r0, r6, #22
 8000798:	d504      	bpl.n	80007a4 <HAL_CAN_IRQHandler+0x134>
 800079a:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 800079e:	bf18      	it	ne
 80007a0:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80007a4:	0571      	lsls	r1, r6, #21
 80007a6:	d504      	bpl.n	80007b2 <HAL_CAN_IRQHandler+0x142>
 80007a8:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 80007ac:	bf18      	it	ne
 80007ae:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80007b2:	0533      	lsls	r3, r6, #20
 80007b4:	d50d      	bpl.n	80007d2 <HAL_CAN_IRQHandler+0x162>
 80007b6:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 80007ba:	d00a      	beq.n	80007d2 <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 80007bc:	2b30      	cmp	r3, #48	; 0x30
 80007be:	d04c      	beq.n	800085a <HAL_CAN_IRQHandler+0x1ea>
 80007c0:	d83c      	bhi.n	800083c <HAL_CAN_IRQHandler+0x1cc>
 80007c2:	2b10      	cmp	r3, #16
 80007c4:	d043      	beq.n	800084e <HAL_CAN_IRQHandler+0x1de>
 80007c6:	2b20      	cmp	r3, #32
 80007c8:	d044      	beq.n	8000854 <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80007ca:	6993      	ldr	r3, [r2, #24]
 80007cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007d0:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80007d2:	2304      	movs	r3, #4
 80007d4:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80007d6:	b12c      	cbz	r4, 80007e4 <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 80007d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80007da:	431c      	orrs	r4, r3
 80007dc:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80007de:	4628      	mov	r0, r5
 80007e0:	f7ff ff45 	bl	800066e <HAL_CAN_ErrorCallback>
 80007e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80007e8:	077a      	lsls	r2, r7, #29
 80007ea:	d405      	bmi.n	80007f8 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80007ec:	f017 0408 	ands.w	r4, r7, #8
 80007f0:	d105      	bne.n	80007fe <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80007f2:	f7ff ff34 	bl	800065e <HAL_CAN_TxMailbox0AbortCallback>
 80007f6:	e757      	b.n	80006a8 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80007f8:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80007fc:	e754      	b.n	80006a8 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80007fe:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000802:	e751      	b.n	80006a8 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000804:	0579      	lsls	r1, r7, #21
 8000806:	d502      	bpl.n	800080e <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000808:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800080c:	e758      	b.n	80006c0 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800080e:	053a      	lsls	r2, r7, #20
 8000810:	d502      	bpl.n	8000818 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000812:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000816:	e753      	b.n	80006c0 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000818:	4628      	mov	r0, r5
 800081a:	f7ff ff21 	bl	8000660 <HAL_CAN_TxMailbox1AbortCallback>
 800081e:	e74f      	b.n	80006c0 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000820:	0379      	lsls	r1, r7, #13
 8000822:	d502      	bpl.n	800082a <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000824:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000828:	e756      	b.n	80006d8 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800082a:	033a      	lsls	r2, r7, #12
 800082c:	d502      	bpl.n	8000834 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800082e:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000832:	e751      	b.n	80006d8 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000834:	4628      	mov	r0, r5
 8000836:	f7ff ff14 	bl	8000662 <HAL_CAN_TxMailbox2AbortCallback>
 800083a:	e74d      	b.n	80006d8 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 800083c:	2b50      	cmp	r3, #80	; 0x50
 800083e:	d00f      	beq.n	8000860 <HAL_CAN_IRQHandler+0x1f0>
 8000840:	2b60      	cmp	r3, #96	; 0x60
 8000842:	d010      	beq.n	8000866 <HAL_CAN_IRQHandler+0x1f6>
 8000844:	2b40      	cmp	r3, #64	; 0x40
 8000846:	d1c0      	bne.n	80007ca <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000848:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 800084c:	e7bd      	b.n	80007ca <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 800084e:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000852:	e7ba      	b.n	80007ca <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000854:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000858:	e7b7      	b.n	80007ca <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800085a:	f044 0420 	orr.w	r4, r4, #32
            break;
 800085e:	e7b4      	b.n	80007ca <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000860:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8000864:	e7b1      	b.n	80007ca <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000866:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 800086a:	e7ae      	b.n	80007ca <HAL_CAN_IRQHandler+0x15a>

0800086c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800086e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000870:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000874:	041b      	lsls	r3, r3, #16
 8000876:	0c1b      	lsrs	r3, r3, #16
 8000878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800087c:	0200      	lsls	r0, r0, #8
 800087e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000882:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000886:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000888:	60d3      	str	r3, [r2, #12]
 800088a:	4770      	bx	lr
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000892:	b530      	push	{r4, r5, lr}
 8000894:	68dc      	ldr	r4, [r3, #12]
 8000896:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800089a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	bf28      	it	cs
 80008a4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a8:	f04f 0501 	mov.w	r5, #1
 80008ac:	fa05 f303 	lsl.w	r3, r5, r3
 80008b0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b4:	bf8c      	ite	hi
 80008b6:	3c03      	subhi	r4, #3
 80008b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ba:	4019      	ands	r1, r3
 80008bc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008be:	fa05 f404 	lsl.w	r4, r5, r4
 80008c2:	3c01      	subs	r4, #1
 80008c4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80008c6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	ea42 0201 	orr.w	r2, r2, r1
 80008cc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d0:	bfaf      	iteee	ge
 80008d2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d6:	f000 000f 	andlt.w	r0, r0, #15
 80008da:	4b06      	ldrlt	r3, [pc, #24]	; (80008f4 <HAL_NVIC_SetPriority+0x64>)
 80008dc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008de:	bfa5      	ittet	ge
 80008e0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80008e4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80008ec:	bd30      	pop	{r4, r5, pc}
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00
 80008f4:	e000ed14 	.word	0xe000ed14

080008f8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80008f8:	0942      	lsrs	r2, r0, #5
 80008fa:	2301      	movs	r3, #1
 80008fc:	f000 001f 	and.w	r0, r0, #31
 8000900:	fa03 f000 	lsl.w	r0, r3, r0
 8000904:	4b01      	ldr	r3, [pc, #4]	; (800090c <HAL_NVIC_EnableIRQ+0x14>)
 8000906:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800090a:	4770      	bx	lr
 800090c:	e000e100 	.word	0xe000e100

08000910 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000910:	3801      	subs	r0, #1
 8000912:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000916:	d20a      	bcs.n	800092e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091a:	4a07      	ldr	r2, [pc, #28]	; (8000938 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091e:	21f0      	movs	r1, #240	; 0xf0
 8000920:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000924:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000926:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000928:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800092e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000e010 	.word	0xe000e010
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800093c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000940:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000944:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000ad8 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000948:	4a61      	ldr	r2, [pc, #388]	; (8000ad0 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 800094a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800094c:	fa38 f403 	lsrs.w	r4, r8, r3
 8000950:	d102      	bne.n	8000958 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000952:	b003      	add	sp, #12
 8000954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000958:	f04f 0e01 	mov.w	lr, #1
 800095c:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000960:	ea18 060e 	ands.w	r6, r8, lr
 8000964:	f000 80a6 	beq.w	8000ab4 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000968:	684c      	ldr	r4, [r1, #4]
 800096a:	f024 0710 	bic.w	r7, r4, #16
 800096e:	2f02      	cmp	r7, #2
 8000970:	d116      	bne.n	80009a0 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000972:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000976:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800097a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800097e:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000982:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000986:	f04f 0c0f 	mov.w	ip, #15
 800098a:	fa0c fc0b 	lsl.w	ip, ip, fp
 800098e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000992:	690d      	ldr	r5, [r1, #16]
 8000994:	fa05 f50b 	lsl.w	r5, r5, fp
 8000998:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800099c:	f8ca 5020 	str.w	r5, [sl, #32]
 80009a0:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009a4:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80009a6:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009aa:	fa05 f50a 	lsl.w	r5, r5, sl
 80009ae:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009b0:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009b4:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009b8:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009bc:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009be:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009c2:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80009c4:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009c8:	d811      	bhi.n	80009ee <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80009ca:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009cc:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009d0:	68cf      	ldr	r7, [r1, #12]
 80009d2:	fa07 fc0a 	lsl.w	ip, r7, sl
 80009d6:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80009da:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80009dc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009de:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009e2:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80009e6:	409f      	lsls	r7, r3
 80009e8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80009ec:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80009ee:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009f0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009f2:	688f      	ldr	r7, [r1, #8]
 80009f4:	fa07 f70a 	lsl.w	r7, r7, sl
 80009f8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80009fa:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009fc:	00e5      	lsls	r5, r4, #3
 80009fe:	d559      	bpl.n	8000ab4 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a00:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000a04:	f045 0501 	orr.w	r5, r5, #1
 8000a08:	f8c9 5018 	str.w	r5, [r9, #24]
 8000a0c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000a10:	f023 0703 	bic.w	r7, r3, #3
 8000a14:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000a18:	f005 0501 	and.w	r5, r5, #1
 8000a1c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000a20:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000a22:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000a28:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000a2a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000a2e:	f04f 0e0f 	mov.w	lr, #15
 8000a32:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a36:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000a3a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a3e:	d03b      	beq.n	8000ab8 <HAL_GPIO_Init+0x17c>
 8000a40:	4d24      	ldr	r5, [pc, #144]	; (8000ad4 <HAL_GPIO_Init+0x198>)
 8000a42:	42a8      	cmp	r0, r5
 8000a44:	d03a      	beq.n	8000abc <HAL_GPIO_Init+0x180>
 8000a46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a4a:	42a8      	cmp	r0, r5
 8000a4c:	d038      	beq.n	8000ac0 <HAL_GPIO_Init+0x184>
 8000a4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a52:	42a8      	cmp	r0, r5
 8000a54:	d036      	beq.n	8000ac4 <HAL_GPIO_Init+0x188>
 8000a56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a5a:	42a8      	cmp	r0, r5
 8000a5c:	d034      	beq.n	8000ac8 <HAL_GPIO_Init+0x18c>
 8000a5e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a62:	42a8      	cmp	r0, r5
 8000a64:	d032      	beq.n	8000acc <HAL_GPIO_Init+0x190>
 8000a66:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a6a:	42a8      	cmp	r0, r5
 8000a6c:	bf14      	ite	ne
 8000a6e:	2507      	movne	r5, #7
 8000a70:	2506      	moveq	r5, #6
 8000a72:	fa05 f50c 	lsl.w	r5, r5, ip
 8000a76:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a7a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000a7c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a7e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a80:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000a84:	bf0c      	ite	eq
 8000a86:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000a88:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000a8a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000a8c:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a8e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000a92:	bf0c      	ite	eq
 8000a94:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000a96:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000a98:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000a9a:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a9c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000aa0:	bf0c      	ite	eq
 8000aa2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000aa4:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000aa6:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000aa8:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aaa:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000aac:	bf54      	ite	pl
 8000aae:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8000ab0:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000ab2:	60d5      	str	r5, [r2, #12]
    position++;
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	e749      	b.n	800094c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ab8:	2500      	movs	r5, #0
 8000aba:	e7da      	b.n	8000a72 <HAL_GPIO_Init+0x136>
 8000abc:	2501      	movs	r5, #1
 8000abe:	e7d8      	b.n	8000a72 <HAL_GPIO_Init+0x136>
 8000ac0:	2502      	movs	r5, #2
 8000ac2:	e7d6      	b.n	8000a72 <HAL_GPIO_Init+0x136>
 8000ac4:	2503      	movs	r5, #3
 8000ac6:	e7d4      	b.n	8000a72 <HAL_GPIO_Init+0x136>
 8000ac8:	2504      	movs	r5, #4
 8000aca:	e7d2      	b.n	8000a72 <HAL_GPIO_Init+0x136>
 8000acc:	2505      	movs	r5, #5
 8000ace:	e7d0      	b.n	8000a72 <HAL_GPIO_Init+0x136>
 8000ad0:	40010400 	.word	0x40010400
 8000ad4:	48000400 	.word	0x48000400
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000adc:	b10a      	cbz	r2, 8000ae2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ade:	6181      	str	r1, [r0, #24]
 8000ae0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ae2:	6281      	str	r1, [r0, #40]	; 0x28
 8000ae4:	4770      	bx	lr

08000ae6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000ae6:	6943      	ldr	r3, [r0, #20]
 8000ae8:	4059      	eors	r1, r3
 8000aea:	6141      	str	r1, [r0, #20]
 8000aec:	4770      	bx	lr
	...

08000af0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000af0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000af2:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000af4:	6959      	ldr	r1, [r3, #20]
 8000af6:	4201      	tst	r1, r0
 8000af8:	d002      	beq.n	8000b00 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000afa:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000afc:	f001 f80c 	bl	8001b18 <HAL_GPIO_EXTI_Callback>
 8000b00:	bd08      	pop	{r3, pc}
 8000b02:	bf00      	nop
 8000b04:	40010400 	.word	0x40010400

08000b08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b0c:	4605      	mov	r5, r0
 8000b0e:	b918      	cbnz	r0, 8000b18 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000b10:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000b12:	b002      	add	sp, #8
 8000b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b18:	6803      	ldr	r3, [r0, #0]
 8000b1a:	07df      	lsls	r7, r3, #31
 8000b1c:	d411      	bmi.n	8000b42 <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b1e:	682b      	ldr	r3, [r5, #0]
 8000b20:	079e      	lsls	r6, r3, #30
 8000b22:	f100 8088 	bmi.w	8000c36 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b26:	682b      	ldr	r3, [r5, #0]
 8000b28:	071c      	lsls	r4, r3, #28
 8000b2a:	f100 80fc 	bmi.w	8000d26 <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b2e:	682b      	ldr	r3, [r5, #0]
 8000b30:	0758      	lsls	r0, r3, #29
 8000b32:	f100 8145 	bmi.w	8000dc0 <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b36:	69aa      	ldr	r2, [r5, #24]
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	f040 81dc 	bne.w	8000ef6 <HAL_RCC_OscConfig+0x3ee>
  return HAL_OK;
 8000b3e:	2000      	movs	r0, #0
 8000b40:	e7e7      	b.n	8000b12 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b42:	4cbd      	ldr	r4, [pc, #756]	; (8000e38 <HAL_RCC_OscConfig+0x330>)
 8000b44:	6863      	ldr	r3, [r4, #4]
 8000b46:	f003 030c 	and.w	r3, r3, #12
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	d00a      	beq.n	8000b64 <HAL_RCC_OscConfig+0x5c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b4e:	6863      	ldr	r3, [r4, #4]
 8000b50:	f003 030c 	and.w	r3, r3, #12
 8000b54:	2b08      	cmp	r3, #8
 8000b56:	d119      	bne.n	8000b8c <HAL_RCC_OscConfig+0x84>
 8000b58:	6863      	ldr	r3, [r4, #4]
 8000b5a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b62:	d113      	bne.n	8000b8c <HAL_RCC_OscConfig+0x84>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b68:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b6c:	6821      	ldr	r1, [r4, #0]
 8000b6e:	fa93 f3a3 	rbit	r3, r3
 8000b72:	fab3 f383 	clz	r3, r3
 8000b76:	f003 031f 	and.w	r3, r3, #31
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	420b      	tst	r3, r1
 8000b82:	d0cc      	beq.n	8000b1e <HAL_RCC_OscConfig+0x16>
 8000b84:	686b      	ldr	r3, [r5, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d1c9      	bne.n	8000b1e <HAL_RCC_OscConfig+0x16>
 8000b8a:	e7c1      	b.n	8000b10 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8c:	686b      	ldr	r3, [r5, #4]
 8000b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b92:	d11e      	bne.n	8000bd2 <HAL_RCC_OscConfig+0xca>
 8000b94:	6823      	ldr	r3, [r4, #0]
 8000b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b9a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b9c:	f7ff fb5c 	bl	8000258 <HAL_GetTick>
 8000ba0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000ba4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba6:	2701      	movs	r7, #1
 8000ba8:	fa96 f3a6 	rbit	r3, r6
 8000bac:	6822      	ldr	r2, [r4, #0]
 8000bae:	fa96 f3a6 	rbit	r3, r6
 8000bb2:	fab3 f383 	clz	r3, r3
 8000bb6:	f003 031f 	and.w	r3, r3, #31
 8000bba:	fa07 f303 	lsl.w	r3, r7, r3
 8000bbe:	4213      	tst	r3, r2
 8000bc0:	d1ad      	bne.n	8000b1e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bc2:	f7ff fb49 	bl	8000258 <HAL_GetTick>
 8000bc6:	eba0 0008 	sub.w	r0, r0, r8
 8000bca:	2864      	cmp	r0, #100	; 0x64
 8000bcc:	d9ec      	bls.n	8000ba8 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000bce:	2003      	movs	r0, #3
 8000bd0:	e79f      	b.n	8000b12 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bd2:	bb0b      	cbnz	r3, 8000c18 <HAL_RCC_OscConfig+0x110>
 8000bd4:	6823      	ldr	r3, [r4, #0]
 8000bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bda:	6023      	str	r3, [r4, #0]
 8000bdc:	6823      	ldr	r3, [r4, #0]
 8000bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000be2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000be4:	f7ff fb38 	bl	8000258 <HAL_GetTick>
 8000be8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000bec:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bee:	2701      	movs	r7, #1
 8000bf0:	fa96 f3a6 	rbit	r3, r6
 8000bf4:	6822      	ldr	r2, [r4, #0]
 8000bf6:	fa96 f3a6 	rbit	r3, r6
 8000bfa:	fab3 f383 	clz	r3, r3
 8000bfe:	f003 031f 	and.w	r3, r3, #31
 8000c02:	fa07 f303 	lsl.w	r3, r7, r3
 8000c06:	4213      	tst	r3, r2
 8000c08:	d089      	beq.n	8000b1e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c0a:	f7ff fb25 	bl	8000258 <HAL_GetTick>
 8000c0e:	eba0 0008 	sub.w	r0, r0, r8
 8000c12:	2864      	cmp	r0, #100	; 0x64
 8000c14:	d9ec      	bls.n	8000bf0 <HAL_RCC_OscConfig+0xe8>
 8000c16:	e7da      	b.n	8000bce <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c1c:	6823      	ldr	r3, [r4, #0]
 8000c1e:	d103      	bne.n	8000c28 <HAL_RCC_OscConfig+0x120>
 8000c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c24:	6023      	str	r3, [r4, #0]
 8000c26:	e7b5      	b.n	8000b94 <HAL_RCC_OscConfig+0x8c>
 8000c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c2c:	6023      	str	r3, [r4, #0]
 8000c2e:	6823      	ldr	r3, [r4, #0]
 8000c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c34:	e7b1      	b.n	8000b9a <HAL_RCC_OscConfig+0x92>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c36:	4c80      	ldr	r4, [pc, #512]	; (8000e38 <HAL_RCC_OscConfig+0x330>)
 8000c38:	6863      	ldr	r3, [r4, #4]
 8000c3a:	f013 0f0c 	tst.w	r3, #12
 8000c3e:	d00a      	beq.n	8000c56 <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c40:	6863      	ldr	r3, [r4, #4]
 8000c42:	f003 030c 	and.w	r3, r3, #12
 8000c46:	2b08      	cmp	r3, #8
 8000c48:	d125      	bne.n	8000c96 <HAL_RCC_OscConfig+0x18e>
 8000c4a:	6863      	ldr	r3, [r4, #4]
 8000c4c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c54:	d11f      	bne.n	8000c96 <HAL_RCC_OscConfig+0x18e>
 8000c56:	2302      	movs	r3, #2
 8000c58:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c5c:	6821      	ldr	r1, [r4, #0]
 8000c5e:	fa93 f3a3 	rbit	r3, r3
 8000c62:	fab3 f383 	clz	r3, r3
 8000c66:	f003 031f 	and.w	r3, r3, #31
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	420b      	tst	r3, r1
 8000c72:	d003      	beq.n	8000c7c <HAL_RCC_OscConfig+0x174>
 8000c74:	68eb      	ldr	r3, [r5, #12]
 8000c76:	4293      	cmp	r3, r2
 8000c78:	f47f af4a 	bne.w	8000b10 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c7c:	6821      	ldr	r1, [r4, #0]
 8000c7e:	23f8      	movs	r3, #248	; 0xf8
 8000c80:	fa93 f3a3 	rbit	r3, r3
 8000c84:	fab3 f283 	clz	r2, r3
 8000c88:	692b      	ldr	r3, [r5, #16]
 8000c8a:	4093      	lsls	r3, r2
 8000c8c:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000c90:	4313      	orrs	r3, r2
 8000c92:	6023      	str	r3, [r4, #0]
 8000c94:	e747      	b.n	8000b26 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c96:	68ea      	ldr	r2, [r5, #12]
 8000c98:	2601      	movs	r6, #1
 8000c9a:	b30a      	cbz	r2, 8000ce0 <HAL_RCC_OscConfig+0x1d8>
 8000c9c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000ca0:	fab3 f383 	clz	r3, r3
 8000ca4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ca8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	2702      	movs	r7, #2
 8000cb0:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000cb2:	f7ff fad1 	bl	8000258 <HAL_GetTick>
 8000cb6:	4680      	mov	r8, r0
 8000cb8:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cbc:	6822      	ldr	r2, [r4, #0]
 8000cbe:	fa97 f3a7 	rbit	r3, r7
 8000cc2:	fab3 f383 	clz	r3, r3
 8000cc6:	f003 031f 	and.w	r3, r3, #31
 8000cca:	fa06 f303 	lsl.w	r3, r6, r3
 8000cce:	4213      	tst	r3, r2
 8000cd0:	d1d4      	bne.n	8000c7c <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd2:	f7ff fac1 	bl	8000258 <HAL_GetTick>
 8000cd6:	eba0 0008 	sub.w	r0, r0, r8
 8000cda:	2802      	cmp	r0, #2
 8000cdc:	d9ec      	bls.n	8000cb8 <HAL_RCC_OscConfig+0x1b0>
 8000cde:	e776      	b.n	8000bce <HAL_RCC_OscConfig+0xc6>
 8000ce0:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000ce4:	fab3 f383 	clz	r3, r3
 8000ce8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	2702      	movs	r7, #2
 8000cf4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cf6:	f7ff faaf 	bl	8000258 <HAL_GetTick>
 8000cfa:	4680      	mov	r8, r0
 8000cfc:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d00:	6822      	ldr	r2, [r4, #0]
 8000d02:	fa97 f3a7 	rbit	r3, r7
 8000d06:	fab3 f383 	clz	r3, r3
 8000d0a:	f003 031f 	and.w	r3, r3, #31
 8000d0e:	fa06 f303 	lsl.w	r3, r6, r3
 8000d12:	4213      	tst	r3, r2
 8000d14:	f43f af07 	beq.w	8000b26 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d18:	f7ff fa9e 	bl	8000258 <HAL_GetTick>
 8000d1c:	eba0 0008 	sub.w	r0, r0, r8
 8000d20:	2802      	cmp	r0, #2
 8000d22:	d9eb      	bls.n	8000cfc <HAL_RCC_OscConfig+0x1f4>
 8000d24:	e753      	b.n	8000bce <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d26:	696a      	ldr	r2, [r5, #20]
 8000d28:	4e43      	ldr	r6, [pc, #268]	; (8000e38 <HAL_RCC_OscConfig+0x330>)
 8000d2a:	4944      	ldr	r1, [pc, #272]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000d2c:	2401      	movs	r4, #1
 8000d2e:	b31a      	cbz	r2, 8000d78 <HAL_RCC_OscConfig+0x270>
 8000d30:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000d34:	fab3 f383 	clz	r3, r3
 8000d38:	440b      	add	r3, r1
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	2702      	movs	r7, #2
 8000d3e:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000d40:	f7ff fa8a 	bl	8000258 <HAL_GetTick>
 8000d44:	4680      	mov	r8, r0
 8000d46:	fa97 f3a7 	rbit	r3, r7
 8000d4a:	fa97 f3a7 	rbit	r3, r7
 8000d4e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d52:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000d54:	fa97 f3a7 	rbit	r3, r7
 8000d58:	fab3 f383 	clz	r3, r3
 8000d5c:	f003 031f 	and.w	r3, r3, #31
 8000d60:	fa04 f303 	lsl.w	r3, r4, r3
 8000d64:	4213      	tst	r3, r2
 8000d66:	f47f aee2 	bne.w	8000b2e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d6a:	f7ff fa75 	bl	8000258 <HAL_GetTick>
 8000d6e:	eba0 0008 	sub.w	r0, r0, r8
 8000d72:	2802      	cmp	r0, #2
 8000d74:	d9e7      	bls.n	8000d46 <HAL_RCC_OscConfig+0x23e>
 8000d76:	e72a      	b.n	8000bce <HAL_RCC_OscConfig+0xc6>
 8000d78:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000d7c:	fab3 f383 	clz	r3, r3
 8000d80:	440b      	add	r3, r1
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	2702      	movs	r7, #2
 8000d86:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d88:	f7ff fa66 	bl	8000258 <HAL_GetTick>
 8000d8c:	4680      	mov	r8, r0
 8000d8e:	fa97 f3a7 	rbit	r3, r7
 8000d92:	fa97 f3a7 	rbit	r3, r7
 8000d96:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d9a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000d9c:	fa97 f3a7 	rbit	r3, r7
 8000da0:	fab3 f383 	clz	r3, r3
 8000da4:	f003 031f 	and.w	r3, r3, #31
 8000da8:	fa04 f303 	lsl.w	r3, r4, r3
 8000dac:	4213      	tst	r3, r2
 8000dae:	f43f aebe 	beq.w	8000b2e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000db2:	f7ff fa51 	bl	8000258 <HAL_GetTick>
 8000db6:	eba0 0008 	sub.w	r0, r0, r8
 8000dba:	2802      	cmp	r0, #2
 8000dbc:	d9e7      	bls.n	8000d8e <HAL_RCC_OscConfig+0x286>
 8000dbe:	e706      	b.n	8000bce <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dc0:	4c1d      	ldr	r4, [pc, #116]	; (8000e38 <HAL_RCC_OscConfig+0x330>)
 8000dc2:	69e3      	ldr	r3, [r4, #28]
 8000dc4:	00d9      	lsls	r1, r3, #3
 8000dc6:	d434      	bmi.n	8000e32 <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dc8:	69e3      	ldr	r3, [r4, #28]
 8000dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dce:	61e3      	str	r3, [r4, #28]
 8000dd0:	69e3      	ldr	r3, [r4, #28]
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000dda:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ddc:	4f18      	ldr	r7, [pc, #96]	; (8000e40 <HAL_RCC_OscConfig+0x338>)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	05da      	lsls	r2, r3, #23
 8000de2:	d52f      	bpl.n	8000e44 <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de4:	68ab      	ldr	r3, [r5, #8]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d13d      	bne.n	8000e66 <HAL_RCC_OscConfig+0x35e>
 8000dea:	6a23      	ldr	r3, [r4, #32]
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000df2:	f7ff fa31 	bl	8000258 <HAL_GetTick>
 8000df6:	2702      	movs	r7, #2
 8000df8:	4682      	mov	sl, r0
 8000dfa:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dfc:	f04f 0801 	mov.w	r8, #1
 8000e00:	fa97 f3a7 	rbit	r3, r7
 8000e04:	fa97 f3a7 	rbit	r3, r7
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d06c      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x3de>
 8000e0c:	6a22      	ldr	r2, [r4, #32]
 8000e0e:	fa99 f3a9 	rbit	r3, r9
 8000e12:	fab3 f383 	clz	r3, r3
 8000e16:	f003 031f 	and.w	r3, r3, #31
 8000e1a:	fa08 f303 	lsl.w	r3, r8, r3
 8000e1e:	4213      	tst	r3, r2
 8000e20:	d058      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f43f ae87 	beq.w	8000b36 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e28:	69e3      	ldr	r3, [r4, #28]
 8000e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	61e3      	str	r3, [r4, #28]
 8000e30:	e681      	b.n	8000b36 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8000e32:	2600      	movs	r6, #0
 8000e34:	e7d2      	b.n	8000ddc <HAL_RCC_OscConfig+0x2d4>
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	10908120 	.word	0x10908120
 8000e40:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000e4c:	f7ff fa04 	bl	8000258 <HAL_GetTick>
 8000e50:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	05db      	lsls	r3, r3, #23
 8000e56:	d4c5      	bmi.n	8000de4 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e58:	f7ff f9fe 	bl	8000258 <HAL_GetTick>
 8000e5c:	eba0 0008 	sub.w	r0, r0, r8
 8000e60:	2864      	cmp	r0, #100	; 0x64
 8000e62:	d9f6      	bls.n	8000e52 <HAL_RCC_OscConfig+0x34a>
 8000e64:	e6b3      	b.n	8000bce <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e66:	bb3b      	cbnz	r3, 8000eb8 <HAL_RCC_OscConfig+0x3b0>
 8000e68:	6a23      	ldr	r3, [r4, #32]
 8000e6a:	f023 0301 	bic.w	r3, r3, #1
 8000e6e:	6223      	str	r3, [r4, #32]
 8000e70:	6a23      	ldr	r3, [r4, #32]
 8000e72:	f023 0304 	bic.w	r3, r3, #4
 8000e76:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e78:	f7ff f9ee 	bl	8000258 <HAL_GetTick>
 8000e7c:	2702      	movs	r7, #2
 8000e7e:	4682      	mov	sl, r0
 8000e80:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e82:	f04f 0801 	mov.w	r8, #1
 8000e86:	fa97 f3a7 	rbit	r3, r7
 8000e8a:	fa97 f3a7 	rbit	r3, r7
 8000e8e:	b373      	cbz	r3, 8000eee <HAL_RCC_OscConfig+0x3e6>
 8000e90:	6a22      	ldr	r2, [r4, #32]
 8000e92:	fa99 f3a9 	rbit	r3, r9
 8000e96:	fab3 f383 	clz	r3, r3
 8000e9a:	f003 031f 	and.w	r3, r3, #31
 8000e9e:	fa08 f303 	lsl.w	r3, r8, r3
 8000ea2:	4213      	tst	r3, r2
 8000ea4:	d0bd      	beq.n	8000e22 <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ea6:	f7ff f9d7 	bl	8000258 <HAL_GetTick>
 8000eaa:	f241 3388 	movw	r3, #5000	; 0x1388
 8000eae:	eba0 000a 	sub.w	r0, r0, sl
 8000eb2:	4298      	cmp	r0, r3
 8000eb4:	d9e7      	bls.n	8000e86 <HAL_RCC_OscConfig+0x37e>
 8000eb6:	e68a      	b.n	8000bce <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb8:	2b05      	cmp	r3, #5
 8000eba:	6a23      	ldr	r3, [r4, #32]
 8000ebc:	d103      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x3be>
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	6223      	str	r3, [r4, #32]
 8000ec4:	e791      	b.n	8000dea <HAL_RCC_OscConfig+0x2e2>
 8000ec6:	f023 0301 	bic.w	r3, r3, #1
 8000eca:	6223      	str	r3, [r4, #32]
 8000ecc:	6a23      	ldr	r3, [r4, #32]
 8000ece:	f023 0304 	bic.w	r3, r3, #4
 8000ed2:	e78d      	b.n	8000df0 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ed4:	f7ff f9c0 	bl	8000258 <HAL_GetTick>
 8000ed8:	f241 3388 	movw	r3, #5000	; 0x1388
 8000edc:	eba0 000a 	sub.w	r0, r0, sl
 8000ee0:	4298      	cmp	r0, r3
 8000ee2:	d98d      	bls.n	8000e00 <HAL_RCC_OscConfig+0x2f8>
 8000ee4:	e673      	b.n	8000bce <HAL_RCC_OscConfig+0xc6>
 8000ee6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000eec:	e78f      	b.n	8000e0e <HAL_RCC_OscConfig+0x306>
 8000eee:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ef4:	e7cd      	b.n	8000e92 <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ef6:	4c44      	ldr	r4, [pc, #272]	; (8001008 <HAL_RCC_OscConfig+0x500>)
 8000ef8:	6863      	ldr	r3, [r4, #4]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b08      	cmp	r3, #8
 8000f00:	f43f ae06 	beq.w	8000b10 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f04:	2a02      	cmp	r2, #2
 8000f06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f0a:	d158      	bne.n	8000fbe <HAL_RCC_OscConfig+0x4b6>
 8000f0c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000f10:	fab3 f383 	clz	r3, r3
 8000f14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f22:	f7ff f999 	bl	8000258 <HAL_GetTick>
 8000f26:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000f2a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f2c:	2601      	movs	r6, #1
 8000f2e:	fa97 f3a7 	rbit	r3, r7
 8000f32:	6822      	ldr	r2, [r4, #0]
 8000f34:	fa97 f3a7 	rbit	r3, r7
 8000f38:	fab3 f383 	clz	r3, r3
 8000f3c:	f003 031f 	and.w	r3, r3, #31
 8000f40:	fa06 f303 	lsl.w	r3, r6, r3
 8000f44:	4213      	tst	r3, r2
 8000f46:	d133      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f4a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000f4c:	f023 030f 	bic.w	r3, r3, #15
 8000f50:	4313      	orrs	r3, r2
 8000f52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f54:	6862      	ldr	r2, [r4, #4]
 8000f56:	6a2b      	ldr	r3, [r5, #32]
 8000f58:	69e9      	ldr	r1, [r5, #28]
 8000f5a:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8000f5e:	430b      	orrs	r3, r1
 8000f60:	4313      	orrs	r3, r2
 8000f62:	6063      	str	r3, [r4, #4]
 8000f64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f68:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000f6c:	fab3 f383 	clz	r3, r3
 8000f70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000f7e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000f80:	f7ff f96a 	bl	8000258 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f84:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000f86:	4607      	mov	r7, r0
 8000f88:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f8c:	6822      	ldr	r2, [r4, #0]
 8000f8e:	fa95 f3a5 	rbit	r3, r5
 8000f92:	fab3 f383 	clz	r3, r3
 8000f96:	f003 031f 	and.w	r3, r3, #31
 8000f9a:	fa06 f303 	lsl.w	r3, r6, r3
 8000f9e:	4213      	tst	r3, r2
 8000fa0:	f47f adcd 	bne.w	8000b3e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa4:	f7ff f958 	bl	8000258 <HAL_GetTick>
 8000fa8:	1bc0      	subs	r0, r0, r7
 8000faa:	2802      	cmp	r0, #2
 8000fac:	d9ec      	bls.n	8000f88 <HAL_RCC_OscConfig+0x480>
 8000fae:	e60e      	b.n	8000bce <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb0:	f7ff f952 	bl	8000258 <HAL_GetTick>
 8000fb4:	eba0 0008 	sub.w	r0, r0, r8
 8000fb8:	2802      	cmp	r0, #2
 8000fba:	d9b8      	bls.n	8000f2e <HAL_RCC_OscConfig+0x426>
 8000fbc:	e607      	b.n	8000bce <HAL_RCC_OscConfig+0xc6>
 8000fbe:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000fc2:	fab3 f383 	clz	r3, r3
 8000fc6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fd4:	f7ff f940 	bl	8000258 <HAL_GetTick>
 8000fd8:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000fdc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fde:	2601      	movs	r6, #1
 8000fe0:	fa95 f3a5 	rbit	r3, r5
 8000fe4:	6822      	ldr	r2, [r4, #0]
 8000fe6:	fa95 f3a5 	rbit	r3, r5
 8000fea:	fab3 f383 	clz	r3, r3
 8000fee:	f003 031f 	and.w	r3, r3, #31
 8000ff2:	fa06 f303 	lsl.w	r3, r6, r3
 8000ff6:	4213      	tst	r3, r2
 8000ff8:	f43f ada1 	beq.w	8000b3e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ffc:	f7ff f92c 	bl	8000258 <HAL_GetTick>
 8001000:	1bc0      	subs	r0, r0, r7
 8001002:	2802      	cmp	r0, #2
 8001004:	d9ec      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x4d8>
 8001006:	e5e2      	b.n	8000bce <HAL_RCC_OscConfig+0xc6>
 8001008:	40021000 	.word	0x40021000

0800100c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800100c:	4911      	ldr	r1, [pc, #68]	; (8001054 <HAL_RCC_GetSysClockFreq+0x48>)
 800100e:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001010:	f003 020c 	and.w	r2, r3, #12
 8001014:	2a08      	cmp	r2, #8
 8001016:	d11a      	bne.n	800104e <HAL_RCC_GetSysClockFreq+0x42>
 8001018:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800101c:	fa92 f2a2 	rbit	r2, r2
 8001020:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001022:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001026:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001028:	fa90 f0a0 	rbit	r0, r0
 800102c:	fab0 f080 	clz	r0, r0
 8001030:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001034:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001038:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800103a:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800103c:	4a06      	ldr	r2, [pc, #24]	; (8001058 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800103e:	4807      	ldr	r0, [pc, #28]	; (800105c <HAL_RCC_GetSysClockFreq+0x50>)
 8001040:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001042:	4807      	ldr	r0, [pc, #28]	; (8001060 <HAL_RCC_GetSysClockFreq+0x54>)
 8001044:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001048:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800104a:	4348      	muls	r0, r1
 800104c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000
 8001058:	08001dd8 	.word	0x08001dd8
 800105c:	08001de8 	.word	0x08001de8
 8001060:	007a1200 	.word	0x007a1200

08001064 <HAL_RCC_ClockConfig>:
{
 8001064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001068:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800106a:	4604      	mov	r4, r0
 800106c:	b910      	cbnz	r0, 8001074 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800106e:	2001      	movs	r0, #1
 8001070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001074:	4a4c      	ldr	r2, [pc, #304]	; (80011a8 <HAL_RCC_ClockConfig+0x144>)
 8001076:	6813      	ldr	r3, [r2, #0]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	428b      	cmp	r3, r1
 800107e:	d32e      	bcc.n	80010de <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001080:	6822      	ldr	r2, [r4, #0]
 8001082:	0791      	lsls	r1, r2, #30
 8001084:	d436      	bmi.n	80010f4 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001086:	07d2      	lsls	r2, r2, #31
 8001088:	d43c      	bmi.n	8001104 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800108a:	4a47      	ldr	r2, [pc, #284]	; (80011a8 <HAL_RCC_ClockConfig+0x144>)
 800108c:	6813      	ldr	r3, [r2, #0]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	429d      	cmp	r5, r3
 8001094:	d375      	bcc.n	8001182 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001096:	6822      	ldr	r2, [r4, #0]
 8001098:	4d44      	ldr	r5, [pc, #272]	; (80011ac <HAL_RCC_ClockConfig+0x148>)
 800109a:	f012 0f04 	tst.w	r2, #4
 800109e:	d17c      	bne.n	800119a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a0:	0713      	lsls	r3, r2, #28
 80010a2:	d506      	bpl.n	80010b2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010a4:	686b      	ldr	r3, [r5, #4]
 80010a6:	6922      	ldr	r2, [r4, #16]
 80010a8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80010ac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010b0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80010b2:	f7ff ffab 	bl	800100c <HAL_RCC_GetSysClockFreq>
 80010b6:	686b      	ldr	r3, [r5, #4]
 80010b8:	22f0      	movs	r2, #240	; 0xf0
 80010ba:	fa92 f2a2 	rbit	r2, r2
 80010be:	fab2 f282 	clz	r2, r2
 80010c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010c6:	40d3      	lsrs	r3, r2
 80010c8:	4a39      	ldr	r2, [pc, #228]	; (80011b0 <HAL_RCC_ClockConfig+0x14c>)
 80010ca:	5cd3      	ldrb	r3, [r2, r3]
 80010cc:	40d8      	lsrs	r0, r3
 80010ce:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <HAL_RCC_ClockConfig+0x150>)
 80010d0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff f87e 	bl	80001d4 <HAL_InitTick>
  return HAL_OK;
 80010d8:	2000      	movs	r0, #0
 80010da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010de:	6813      	ldr	r3, [r2, #0]
 80010e0:	f023 0307 	bic.w	r3, r3, #7
 80010e4:	430b      	orrs	r3, r1
 80010e6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010e8:	6813      	ldr	r3, [r2, #0]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	4299      	cmp	r1, r3
 80010f0:	d1bd      	bne.n	800106e <HAL_RCC_ClockConfig+0xa>
 80010f2:	e7c5      	b.n	8001080 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010f4:	492d      	ldr	r1, [pc, #180]	; (80011ac <HAL_RCC_ClockConfig+0x148>)
 80010f6:	68a0      	ldr	r0, [r4, #8]
 80010f8:	684b      	ldr	r3, [r1, #4]
 80010fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010fe:	4303      	orrs	r3, r0
 8001100:	604b      	str	r3, [r1, #4]
 8001102:	e7c0      	b.n	8001086 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001104:	6862      	ldr	r2, [r4, #4]
 8001106:	4e29      	ldr	r6, [pc, #164]	; (80011ac <HAL_RCC_ClockConfig+0x148>)
 8001108:	2a01      	cmp	r2, #1
 800110a:	d127      	bne.n	800115c <HAL_RCC_ClockConfig+0xf8>
 800110c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001110:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001114:	6831      	ldr	r1, [r6, #0]
 8001116:	fa93 f3a3 	rbit	r3, r3
 800111a:	fab3 f383 	clz	r3, r3
 800111e:	f003 031f 	and.w	r3, r3, #31
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001128:	d0a1      	beq.n	800106e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800112a:	6873      	ldr	r3, [r6, #4]
 800112c:	f023 0303 	bic.w	r3, r3, #3
 8001130:	431a      	orrs	r2, r3
 8001132:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8001134:	f7ff f890 	bl	8000258 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001138:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800113c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113e:	6873      	ldr	r3, [r6, #4]
 8001140:	6862      	ldr	r2, [r4, #4]
 8001142:	f003 030c 	and.w	r3, r3, #12
 8001146:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800114a:	d09e      	beq.n	800108a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800114c:	f7ff f884 	bl	8000258 <HAL_GetTick>
 8001150:	1bc0      	subs	r0, r0, r7
 8001152:	4540      	cmp	r0, r8
 8001154:	d9f3      	bls.n	800113e <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8001156:	2003      	movs	r0, #3
}
 8001158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800115c:	2a02      	cmp	r2, #2
 800115e:	bf0c      	ite	eq
 8001160:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001164:	2302      	movne	r3, #2
 8001166:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116a:	6830      	ldr	r0, [r6, #0]
 800116c:	fa93 f3a3 	rbit	r3, r3
 8001170:	fab3 f383 	clz	r3, r3
 8001174:	f003 031f 	and.w	r3, r3, #31
 8001178:	2101      	movs	r1, #1
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	4203      	tst	r3, r0
 8001180:	e7d2      	b.n	8001128 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001182:	6813      	ldr	r3, [r2, #0]
 8001184:	f023 0307 	bic.w	r3, r3, #7
 8001188:	432b      	orrs	r3, r5
 800118a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800118c:	6813      	ldr	r3, [r2, #0]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	429d      	cmp	r5, r3
 8001194:	f47f af6b 	bne.w	800106e <HAL_RCC_ClockConfig+0xa>
 8001198:	e77d      	b.n	8001096 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800119a:	686b      	ldr	r3, [r5, #4]
 800119c:	68e1      	ldr	r1, [r4, #12]
 800119e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011a2:	430b      	orrs	r3, r1
 80011a4:	606b      	str	r3, [r5, #4]
 80011a6:	e77b      	b.n	80010a0 <HAL_RCC_ClockConfig+0x3c>
 80011a8:	40022000 	.word	0x40022000
 80011ac:	40021000 	.word	0x40021000
 80011b0:	08001dfc 	.word	0x08001dfc
 80011b4:	2000000c 	.word	0x2000000c

080011b8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80011ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	fa92 f2a2 	rbit	r2, r2
 80011c4:	fab2 f282 	clz	r2, r2
 80011c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80011cc:	40d3      	lsrs	r3, r2
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80011d0:	5cd3      	ldrb	r3, [r2, r3]
 80011d2:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80011d4:	6810      	ldr	r0, [r2, #0]
}    
 80011d6:	40d8      	lsrs	r0, r3
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000
 80011e0:	08001e0c 	.word	0x08001e0c
 80011e4:	2000000c 	.word	0x2000000c

080011e8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_RCC_GetPCLK2Freq+0x24>)
 80011ea:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	fa92 f2a2 	rbit	r2, r2
 80011f4:	fab2 f282 	clz	r2, r2
 80011f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80011fc:	40d3      	lsrs	r3, r2
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001200:	5cd3      	ldrb	r3, [r2, r3]
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001204:	6810      	ldr	r0, [r2, #0]
} 
 8001206:	40d8      	lsrs	r0, r3
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	08001e0c 	.word	0x08001e0c
 8001214:	2000000c 	.word	0x2000000c

08001218 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001218:	6803      	ldr	r3, [r0, #0]
{
 800121a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800121e:	03df      	lsls	r7, r3, #15
{
 8001220:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001222:	d523      	bpl.n	800126c <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001224:	4d9b      	ldr	r5, [pc, #620]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001226:	69eb      	ldr	r3, [r5, #28]
 8001228:	00de      	lsls	r6, r3, #3
 800122a:	f100 80d7 	bmi.w	80013dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	69eb      	ldr	r3, [r5, #28]
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	61eb      	str	r3, [r5, #28]
 8001236:	69eb      	ldr	r3, [r5, #28]
 8001238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001240:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001242:	4f95      	ldr	r7, [pc, #596]	; (8001498 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	05d8      	lsls	r0, r3, #23
 8001248:	f140 80ca 	bpl.w	80013e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800124c:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800124e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001252:	f040 80da 	bne.w	800140a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001256:	6a2b      	ldr	r3, [r5, #32]
 8001258:	6862      	ldr	r2, [r4, #4]
 800125a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800125e:	4313      	orrs	r3, r2
 8001260:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001262:	b11e      	cbz	r6, 800126c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001264:	69eb      	ldr	r3, [r5, #28]
 8001266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800126a:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800126c:	6820      	ldr	r0, [r4, #0]
 800126e:	07c3      	lsls	r3, r0, #31
 8001270:	d506      	bpl.n	8001280 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001272:	4a88      	ldr	r2, [pc, #544]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001274:	68a1      	ldr	r1, [r4, #8]
 8001276:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001278:	f023 0303 	bic.w	r3, r3, #3
 800127c:	430b      	orrs	r3, r1
 800127e:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001280:	0787      	lsls	r7, r0, #30
 8001282:	d506      	bpl.n	8001292 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001284:	4a83      	ldr	r2, [pc, #524]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001286:	68e1      	ldr	r1, [r4, #12]
 8001288:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800128a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800128e:	430b      	orrs	r3, r1
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001292:	0746      	lsls	r6, r0, #29
 8001294:	d506      	bpl.n	80012a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001296:	4a7f      	ldr	r2, [pc, #508]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001298:	6921      	ldr	r1, [r4, #16]
 800129a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800129c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80012a0:	430b      	orrs	r3, r1
 80012a2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80012a4:	0685      	lsls	r5, r0, #26
 80012a6:	d506      	bpl.n	80012b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80012a8:	4a7a      	ldr	r2, [pc, #488]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012aa:	69e1      	ldr	r1, [r4, #28]
 80012ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012ae:	f023 0310 	bic.w	r3, r3, #16
 80012b2:	430b      	orrs	r3, r1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80012b6:	0381      	lsls	r1, r0, #14
 80012b8:	d506      	bpl.n	80012c8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80012ba:	4a76      	ldr	r2, [pc, #472]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012bc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80012be:	6853      	ldr	r3, [r2, #4]
 80012c0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80012c4:	430b      	orrs	r3, r1
 80012c6:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80012c8:	0642      	lsls	r2, r0, #25
 80012ca:	d506      	bpl.n	80012da <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80012cc:	4a71      	ldr	r2, [pc, #452]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012ce:	6a21      	ldr	r1, [r4, #32]
 80012d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012d2:	f023 0320 	bic.w	r3, r3, #32
 80012d6:	430b      	orrs	r3, r1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80012da:	0343      	lsls	r3, r0, #13
 80012dc:	d506      	bpl.n	80012ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80012de:	4a6d      	ldr	r2, [pc, #436]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80012e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012e8:	430b      	orrs	r3, r1
 80012ea:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80012ec:	0707      	lsls	r7, r0, #28
 80012ee:	d506      	bpl.n	80012fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80012f0:	4a68      	ldr	r2, [pc, #416]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012f2:	6961      	ldr	r1, [r4, #20]
 80012f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012f6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80012fa:	430b      	orrs	r3, r1
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80012fe:	06c6      	lsls	r6, r0, #27
 8001300:	d506      	bpl.n	8001310 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001302:	4a64      	ldr	r2, [pc, #400]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001304:	69a1      	ldr	r1, [r4, #24]
 8001306:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001308:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800130c:	430b      	orrs	r3, r1
 800130e:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001310:	0585      	lsls	r5, r0, #22
 8001312:	d506      	bpl.n	8001322 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001314:	4a5f      	ldr	r2, [pc, #380]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001316:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001318:	6853      	ldr	r3, [r2, #4]
 800131a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800131e:	430b      	orrs	r3, r1
 8001320:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001322:	0601      	lsls	r1, r0, #24
 8001324:	d506      	bpl.n	8001334 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001326:	4a5b      	ldr	r2, [pc, #364]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001328:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800132a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800132c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001330:	430b      	orrs	r3, r1
 8001332:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001334:	05c2      	lsls	r2, r0, #23
 8001336:	d506      	bpl.n	8001346 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001338:	4a56      	ldr	r2, [pc, #344]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800133a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800133c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800133e:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001342:	430b      	orrs	r3, r1
 8001344:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001346:	04c3      	lsls	r3, r0, #19
 8001348:	d506      	bpl.n	8001358 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800134a:	4a52      	ldr	r2, [pc, #328]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800134c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800134e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001354:	430b      	orrs	r3, r1
 8001356:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001358:	0487      	lsls	r7, r0, #18
 800135a:	d506      	bpl.n	800136a <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800135c:	4a4d      	ldr	r2, [pc, #308]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800135e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001360:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001362:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001366:	430b      	orrs	r3, r1
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800136a:	02c6      	lsls	r6, r0, #11
 800136c:	d506      	bpl.n	800137c <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800136e:	4a49      	ldr	r2, [pc, #292]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001370:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001372:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001374:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001378:	430b      	orrs	r3, r1
 800137a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800137c:	0285      	lsls	r5, r0, #10
 800137e:	d506      	bpl.n	800138e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001380:	4a44      	ldr	r2, [pc, #272]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001382:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001384:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001386:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800138a:	430b      	orrs	r3, r1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800138e:	0241      	lsls	r1, r0, #9
 8001390:	d506      	bpl.n	80013a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001392:	4a40      	ldr	r2, [pc, #256]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001394:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001396:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001398:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800139c:	430b      	orrs	r3, r1
 800139e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80013a0:	0202      	lsls	r2, r0, #8
 80013a2:	d506      	bpl.n	80013b2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80013a4:	4a3b      	ldr	r2, [pc, #236]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013a6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80013a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013ae:	430b      	orrs	r3, r1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80013b2:	01c3      	lsls	r3, r0, #7
 80013b4:	d506      	bpl.n	80013c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80013b6:	4a37      	ldr	r2, [pc, #220]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013b8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80013ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013c0:	430b      	orrs	r3, r1
 80013c2:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80013c4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80013c8:	d01c      	beq.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80013ca:	4a32      	ldr	r2, [pc, #200]	; (8001494 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013cc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80013ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80013d4:	430b      	orrs	r3, r1
 80013d6:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80013d8:	2000      	movs	r0, #0
 80013da:	e013      	b.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 80013dc:	2600      	movs	r6, #0
 80013de:	e730      	b.n	8001242 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80013e8:	f7fe ff36 	bl	8000258 <HAL_GetTick>
 80013ec:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	05d9      	lsls	r1, r3, #23
 80013f2:	f53f af2b 	bmi.w	800124c <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013f6:	f7fe ff2f 	bl	8000258 <HAL_GetTick>
 80013fa:	eba0 0008 	sub.w	r0, r0, r8
 80013fe:	2864      	cmp	r0, #100	; 0x64
 8001400:	d9f5      	bls.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8001402:	2003      	movs	r0, #3
}
 8001404:	b002      	add	sp, #8
 8001406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800140a:	6862      	ldr	r2, [r4, #4]
 800140c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001410:	4293      	cmp	r3, r2
 8001412:	f43f af20 	beq.w	8001256 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001416:	6a29      	ldr	r1, [r5, #32]
 8001418:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800141c:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001420:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001424:	f8df e074 	ldr.w	lr, [pc, #116]	; 800149c <HAL_RCCEx_PeriphCLKConfig+0x284>
 8001428:	fab2 f282 	clz	r2, r2
 800142c:	4472      	add	r2, lr
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	2701      	movs	r7, #1
 8001432:	6017      	str	r7, [r2, #0]
 8001434:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001438:	fab3 f383 	clz	r3, r3
 800143c:	4473      	add	r3, lr
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001444:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8001446:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001448:	f57f af05 	bpl.w	8001256 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 800144c:	f7fe ff04 	bl	8000258 <HAL_GetTick>
 8001450:	f04f 0802 	mov.w	r8, #2
 8001454:	4682      	mov	sl, r0
 8001456:	46c1      	mov	r9, r8
 8001458:	fa98 f3a8 	rbit	r3, r8
 800145c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001460:	b1a3      	cbz	r3, 800148c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8001462:	6a2a      	ldr	r2, [r5, #32]
 8001464:	fa99 f3a9 	rbit	r3, r9
 8001468:	fab3 f383 	clz	r3, r3
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	fa07 f303 	lsl.w	r3, r7, r3
 8001474:	4213      	tst	r3, r2
 8001476:	f47f aeee 	bne.w	8001256 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7fe feed 	bl	8000258 <HAL_GetTick>
 800147e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001482:	eba0 000a 	sub.w	r0, r0, sl
 8001486:	4298      	cmp	r0, r3
 8001488:	d9e6      	bls.n	8001458 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800148a:	e7ba      	b.n	8001402 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800148c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001490:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001492:	e7e7      	b.n	8001464 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8001494:	40021000 	.word	0x40021000
 8001498:	40007000 	.word	0x40007000
 800149c:	10908100 	.word	0x10908100

080014a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014a0:	b538      	push	{r3, r4, r5, lr}
 80014a2:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80014a4:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014a6:	6921      	ldr	r1, [r4, #16]
 80014a8:	68a2      	ldr	r2, [r4, #8]
 80014aa:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80014ac:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014ae:	430a      	orrs	r2, r1
 80014b0:	6961      	ldr	r1, [r4, #20]
 80014b2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80014b4:	4977      	ldr	r1, [pc, #476]	; (8001694 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014b6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80014b8:	4001      	ands	r1, r0
 80014ba:	430a      	orrs	r2, r1
 80014bc:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014be:	686a      	ldr	r2, [r5, #4]
 80014c0:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80014c2:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014c4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80014c8:	430a      	orrs	r2, r1
 80014ca:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80014cc:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80014ce:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80014d0:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80014d4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80014d6:	430a      	orrs	r2, r1
 80014d8:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80014da:	4a6f      	ldr	r2, [pc, #444]	; (8001698 <UART_SetConfig+0x1f8>)
 80014dc:	4295      	cmp	r5, r2
 80014de:	d112      	bne.n	8001506 <UART_SetConfig+0x66>
 80014e0:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80014e4:	496d      	ldr	r1, [pc, #436]	; (800169c <UART_SetConfig+0x1fc>)
 80014e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014e8:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014f0:	5c8a      	ldrb	r2, [r1, r2]
 80014f2:	d066      	beq.n	80015c2 <UART_SetConfig+0x122>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 80014f4:	2a08      	cmp	r2, #8
 80014f6:	d819      	bhi.n	800152c <UART_SetConfig+0x8c>
 80014f8:	e8df f002 	tbb	[pc, r2]
 80014fc:	189e92c2 	.word	0x189e92c2
 8001500:	181818a9 	.word	0x181818a9
 8001504:	ac          	.byte	0xac
 8001505:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001506:	4a66      	ldr	r2, [pc, #408]	; (80016a0 <UART_SetConfig+0x200>)
 8001508:	4295      	cmp	r5, r2
 800150a:	d124      	bne.n	8001556 <UART_SetConfig+0xb6>
 800150c:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8001510:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001512:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001516:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800151a:	f000 80a0 	beq.w	800165e <UART_SetConfig+0x1be>
 800151e:	d807      	bhi.n	8001530 <UART_SetConfig+0x90>
 8001520:	2a00      	cmp	r2, #0
 8001522:	f000 80aa 	beq.w	800167a <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800152a:	d076      	beq.n	800161a <UART_SetConfig+0x17a>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800152c:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 800152e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001530:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001534:	f000 8099 	beq.w	800166a <UART_SetConfig+0x1ca>
 8001538:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800153c:	d1f3      	bne.n	8001526 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800153e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001542:	d179      	bne.n	8001638 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001544:	6860      	ldr	r0, [r4, #4]
 8001546:	0843      	lsrs	r3, r0, #1
 8001548:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800154c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001550:	fbb3 f3f0 	udiv	r3, r3, r0
 8001554:	e054      	b.n	8001600 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001556:	4a53      	ldr	r2, [pc, #332]	; (80016a4 <UART_SetConfig+0x204>)
 8001558:	4295      	cmp	r5, r2
 800155a:	d10e      	bne.n	800157a <UART_SetConfig+0xda>
 800155c:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8001560:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001562:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8001566:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800156a:	d078      	beq.n	800165e <UART_SetConfig+0x1be>
 800156c:	d9d8      	bls.n	8001520 <UART_SetConfig+0x80>
 800156e:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8001572:	d07a      	beq.n	800166a <UART_SetConfig+0x1ca>
 8001574:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8001578:	e7e0      	b.n	800153c <UART_SetConfig+0x9c>
 800157a:	4a4b      	ldr	r2, [pc, #300]	; (80016a8 <UART_SetConfig+0x208>)
 800157c:	4295      	cmp	r5, r2
 800157e:	d10e      	bne.n	800159e <UART_SetConfig+0xfe>
 8001580:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8001584:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001586:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800158a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800158e:	d066      	beq.n	800165e <UART_SetConfig+0x1be>
 8001590:	d9c6      	bls.n	8001520 <UART_SetConfig+0x80>
 8001592:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001596:	d068      	beq.n	800166a <UART_SetConfig+0x1ca>
 8001598:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800159c:	e7ce      	b.n	800153c <UART_SetConfig+0x9c>
 800159e:	4a43      	ldr	r2, [pc, #268]	; (80016ac <UART_SetConfig+0x20c>)
 80015a0:	4295      	cmp	r5, r2
 80015a2:	d1c0      	bne.n	8001526 <UART_SetConfig+0x86>
 80015a4:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80015a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015aa:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 80015ae:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80015b2:	d054      	beq.n	800165e <UART_SetConfig+0x1be>
 80015b4:	d9b4      	bls.n	8001520 <UART_SetConfig+0x80>
 80015b6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80015ba:	d056      	beq.n	800166a <UART_SetConfig+0x1ca>
 80015bc:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 80015c0:	e7bc      	b.n	800153c <UART_SetConfig+0x9c>
    switch (clocksource)
 80015c2:	2a08      	cmp	r2, #8
 80015c4:	d829      	bhi.n	800161a <UART_SetConfig+0x17a>
 80015c6:	a301      	add	r3, pc, #4	; (adr r3, 80015cc <UART_SetConfig+0x12c>)
 80015c8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80015cc:	080015f1 	.word	0x080015f1
 80015d0:	08001615 	.word	0x08001615
 80015d4:	08001545 	.word	0x08001545
 80015d8:	0800161b 	.word	0x0800161b
 80015dc:	08001665 	.word	0x08001665
 80015e0:	0800161b 	.word	0x0800161b
 80015e4:	0800161b 	.word	0x0800161b
 80015e8:	0800161b 	.word	0x0800161b
 80015ec:	08001671 	.word	0x08001671
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80015f0:	f7ff fde2 	bl	80011b8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80015f4:	6861      	ldr	r1, [r4, #4]
 80015f6:	084a      	lsrs	r2, r1, #1
 80015f8:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80015fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001600:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001602:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001604:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8001608:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800160a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800160e:	4313      	orrs	r3, r2
 8001610:	60cb      	str	r3, [r1, #12]
 8001612:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001614:	f7ff fde8 	bl	80011e8 <HAL_RCC_GetPCLK2Freq>
 8001618:	e7ec      	b.n	80015f4 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 800161a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800161c:	2300      	movs	r3, #0
 800161e:	e7f1      	b.n	8001604 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001620:	f7ff fde2 	bl	80011e8 <HAL_RCC_GetPCLK2Freq>
 8001624:	6863      	ldr	r3, [r4, #4]
 8001626:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800162a:	fbb0 f0f3 	udiv	r0, r0, r3
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <UART_SetConfig+0x1f8>)
 8001630:	b280      	uxth	r0, r0
 8001632:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001634:	2000      	movs	r0, #0
        break;
 8001636:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001638:	6862      	ldr	r2, [r4, #4]
 800163a:	0853      	lsrs	r3, r2, #1
 800163c:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001640:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001644:	fbb3 f3f2 	udiv	r3, r3, r2
 8001648:	b29b      	uxth	r3, r3
 800164a:	60eb      	str	r3, [r5, #12]
 800164c:	e7f2      	b.n	8001634 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800164e:	f7ff fcdd 	bl	800100c <HAL_RCC_GetSysClockFreq>
 8001652:	e017      	b.n	8001684 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001654:	6862      	ldr	r2, [r4, #4]
 8001656:	0853      	lsrs	r3, r2, #1
 8001658:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800165c:	e7f2      	b.n	8001644 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800165e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001662:	d1f4      	bne.n	800164e <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001664:	f7ff fcd2 	bl	800100c <HAL_RCC_GetSysClockFreq>
 8001668:	e7c4      	b.n	80015f4 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800166a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800166e:	d1f1      	bne.n	8001654 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001670:	6860      	ldr	r0, [r4, #4]
 8001672:	0843      	lsrs	r3, r0, #1
 8001674:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001678:	e76a      	b.n	8001550 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800167a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800167e:	d0b7      	beq.n	80015f0 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001680:	f7ff fd9a 	bl	80011b8 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001684:	6863      	ldr	r3, [r4, #4]
 8001686:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800168a:	fbb0 f0f3 	udiv	r0, r0, r3
 800168e:	b280      	uxth	r0, r0
 8001690:	60e8      	str	r0, [r5, #12]
 8001692:	e7cf      	b.n	8001634 <UART_SetConfig+0x194>
 8001694:	efff69f3 	.word	0xefff69f3
 8001698:	40013800 	.word	0x40013800
 800169c:	08001df8 	.word	0x08001df8
 80016a0:	40004400 	.word	0x40004400
 80016a4:	40004800 	.word	0x40004800
 80016a8:	40004c00 	.word	0x40004c00
 80016ac:	40005000 	.word	0x40005000

080016b0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80016b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80016b2:	07da      	lsls	r2, r3, #31
{
 80016b4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80016b6:	d506      	bpl.n	80016c6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80016b8:	6801      	ldr	r1, [r0, #0]
 80016ba:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80016bc:	684a      	ldr	r2, [r1, #4]
 80016be:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80016c2:	4322      	orrs	r2, r4
 80016c4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80016c6:	079c      	lsls	r4, r3, #30
 80016c8:	d506      	bpl.n	80016d8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80016ca:	6801      	ldr	r1, [r0, #0]
 80016cc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80016ce:	684a      	ldr	r2, [r1, #4]
 80016d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016d4:	4322      	orrs	r2, r4
 80016d6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80016d8:	0759      	lsls	r1, r3, #29
 80016da:	d506      	bpl.n	80016ea <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80016dc:	6801      	ldr	r1, [r0, #0]
 80016de:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80016e0:	684a      	ldr	r2, [r1, #4]
 80016e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016e6:	4322      	orrs	r2, r4
 80016e8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80016ea:	071a      	lsls	r2, r3, #28
 80016ec:	d506      	bpl.n	80016fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80016ee:	6801      	ldr	r1, [r0, #0]
 80016f0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80016f2:	684a      	ldr	r2, [r1, #4]
 80016f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016f8:	4322      	orrs	r2, r4
 80016fa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80016fc:	06dc      	lsls	r4, r3, #27
 80016fe:	d506      	bpl.n	800170e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001700:	6801      	ldr	r1, [r0, #0]
 8001702:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001704:	688a      	ldr	r2, [r1, #8]
 8001706:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800170a:	4322      	orrs	r2, r4
 800170c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800170e:	0699      	lsls	r1, r3, #26
 8001710:	d506      	bpl.n	8001720 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001712:	6801      	ldr	r1, [r0, #0]
 8001714:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001716:	688a      	ldr	r2, [r1, #8]
 8001718:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800171c:	4322      	orrs	r2, r4
 800171e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001720:	065a      	lsls	r2, r3, #25
 8001722:	d50f      	bpl.n	8001744 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001724:	6801      	ldr	r1, [r0, #0]
 8001726:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001728:	684a      	ldr	r2, [r1, #4]
 800172a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800172e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001730:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001734:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001736:	d105      	bne.n	8001744 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001738:	684a      	ldr	r2, [r1, #4]
 800173a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800173c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001740:	4322      	orrs	r2, r4
 8001742:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001744:	061b      	lsls	r3, r3, #24
 8001746:	d506      	bpl.n	8001756 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001748:	6802      	ldr	r2, [r0, #0]
 800174a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800174c:	6853      	ldr	r3, [r2, #4]
 800174e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001752:	430b      	orrs	r3, r1
 8001754:	6053      	str	r3, [r2, #4]
 8001756:	bd10      	pop	{r4, pc}

08001758 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800175c:	9d06      	ldr	r5, [sp, #24]
 800175e:	4604      	mov	r4, r0
 8001760:	460f      	mov	r7, r1
 8001762:	4616      	mov	r6, r2
 8001764:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001766:	6821      	ldr	r1, [r4, #0]
 8001768:	69ca      	ldr	r2, [r1, #28]
 800176a:	ea37 0302 	bics.w	r3, r7, r2
 800176e:	bf0c      	ite	eq
 8001770:	2201      	moveq	r2, #1
 8001772:	2200      	movne	r2, #0
 8001774:	42b2      	cmp	r2, r6
 8001776:	d002      	beq.n	800177e <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001778:	2000      	movs	r0, #0
}
 800177a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800177e:	1c6b      	adds	r3, r5, #1
 8001780:	d0f2      	beq.n	8001768 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001782:	b99d      	cbnz	r5, 80017ac <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001784:	6823      	ldr	r3, [r4, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800178c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	f022 0201 	bic.w	r2, r2, #1
 8001794:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001796:	2320      	movs	r3, #32
 8001798:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800179c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80017a0:	2300      	movs	r3, #0
 80017a2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80017a6:	2003      	movs	r0, #3
 80017a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80017ac:	f7fe fd54 	bl	8000258 <HAL_GetTick>
 80017b0:	eba0 0008 	sub.w	r0, r0, r8
 80017b4:	4285      	cmp	r5, r0
 80017b6:	d2d6      	bcs.n	8001766 <UART_WaitOnFlagUntilTimeout+0xe>
 80017b8:	e7e4      	b.n	8001784 <UART_WaitOnFlagUntilTimeout+0x2c>

080017ba <UART_CheckIdleState>:
{
 80017ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80017bc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017be:	2600      	movs	r6, #0
 80017c0:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80017c2:	f7fe fd49 	bl	8000258 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80017cc:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80017ce:	d417      	bmi.n	8001800 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	075b      	lsls	r3, r3, #29
 80017d6:	d50a      	bpl.n	80017ee <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80017d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2200      	movs	r2, #0
 80017e0:	462b      	mov	r3, r5
 80017e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80017e6:	4620      	mov	r0, r4
 80017e8:	f7ff ffb6 	bl	8001758 <UART_WaitOnFlagUntilTimeout>
 80017ec:	b9a0      	cbnz	r0, 8001818 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80017ee:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80017f0:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80017f2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80017f6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80017fa:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80017fe:	e00c      	b.n	800181a <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001800:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	4632      	mov	r2, r6
 8001808:	4603      	mov	r3, r0
 800180a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff ffa2 	bl	8001758 <UART_WaitOnFlagUntilTimeout>
 8001814:	2800      	cmp	r0, #0
 8001816:	d0db      	beq.n	80017d0 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001818:	2003      	movs	r0, #3
}
 800181a:	b002      	add	sp, #8
 800181c:	bd70      	pop	{r4, r5, r6, pc}

0800181e <HAL_UART_Init>:
{
 800181e:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001820:	4604      	mov	r4, r0
 8001822:	b360      	cbz	r0, 800187e <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001824:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001828:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800182c:	b91b      	cbnz	r3, 8001836 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800182e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001832:	f000 f9e9 	bl	8001c08 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001836:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001838:	2324      	movs	r3, #36	; 0x24
 800183a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800183e:	6813      	ldr	r3, [r2, #0]
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001846:	4620      	mov	r0, r4
 8001848:	f7ff fe2a 	bl	80014a0 <UART_SetConfig>
 800184c:	2801      	cmp	r0, #1
 800184e:	d016      	beq.n	800187e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001852:	b113      	cbz	r3, 800185a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001854:	4620      	mov	r0, r4
 8001856:	f7ff ff2b 	bl	80016b0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800185a:	6823      	ldr	r3, [r4, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001862:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800186a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001872:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001874:	601a      	str	r2, [r3, #0]
}
 8001876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800187a:	f7ff bf9e 	b.w	80017ba <UART_CheckIdleState>
}
 800187e:	2001      	movs	r0, #1
 8001880:	bd10      	pop	{r4, pc}

08001882 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001882:	b530      	push	{r4, r5, lr}
 8001884:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001886:	2228      	movs	r2, #40	; 0x28
 8001888:	2100      	movs	r1, #0
 800188a:	a806      	add	r0, sp, #24
 800188c:	f000 fa90 	bl	8001db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001890:	2214      	movs	r2, #20
 8001892:	2100      	movs	r1, #0
 8001894:	a801      	add	r0, sp, #4
 8001896:	f000 fa8b 	bl	8001db0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800189a:	2258      	movs	r2, #88	; 0x58
 800189c:	2100      	movs	r1, #0
 800189e:	a810      	add	r0, sp, #64	; 0x40
 80018a0:	f000 fa86 	bl	8001db0 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018a4:	2301      	movs	r3, #1
 80018a6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018a8:	2310      	movs	r3, #16
 80018aa:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018b0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018b2:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018ba:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018bc:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018be:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c0:	f7ff f922 	bl	8000b08 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c6:	2500      	movs	r5, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018ca:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018d0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d4:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d6:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d8:	9505      	str	r5, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018da:	f7ff fbc3 	bl	8001064 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018de:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018e0:	9410      	str	r4, [sp, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018e2:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e4:	f7ff fc98 	bl	8001218 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80018e8:	b027      	add	sp, #156	; 0x9c
 80018ea:	bd30      	pop	{r4, r5, pc}

080018ec <main>:
{
 80018ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ee:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 80018f0:	f7fe fc94 	bl	800021c <HAL_Init>
  SystemClock_Config();
 80018f4:	f7ff ffc5 	bl	8001882 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	2214      	movs	r2, #20
 80018fa:	2100      	movs	r1, #0
 80018fc:	a804      	add	r0, sp, #16
 80018fe:	f000 fa57 	bl	8001db0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001902:	4b73      	ldr	r3, [pc, #460]	; (8001ad0 <main+0x1e4>)
  hcan.Instance = CAN;
 8001904:	4d73      	ldr	r5, [pc, #460]	; (8001ad4 <main+0x1e8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800190c:	615a      	str	r2, [r3, #20]
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001914:	9200      	str	r2, [sp, #0]
 8001916:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001918:	695a      	ldr	r2, [r3, #20]
 800191a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800191e:	615a      	str	r2, [r3, #20]
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001926:	9201      	str	r2, [sp, #4]
 8001928:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	695a      	ldr	r2, [r3, #20]
 800192c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001930:	615a      	str	r2, [r3, #20]
 8001932:	695a      	ldr	r2, [r3, #20]
 8001934:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001938:	9202      	str	r2, [sp, #8]
 800193a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001942:	615a      	str	r2, [r3, #20]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194c:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800194e:	2120      	movs	r1, #32
 8001950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001954:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001956:	f7ff f8c1 	bl	8000adc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PB1_Pin PB2_Pin PB3_Pin */
  GPIO_InitStruct.Pin = B1_Pin|PB1_Pin|PB2_Pin|PB3_Pin;
 800195a:	f242 1360 	movw	r3, #8544	; 0x2160
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin|PB1_Pin|PB2_Pin|PB3_Pin;
 8001960:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001962:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001964:	4b5c      	ldr	r3, [pc, #368]	; (8001ad8 <main+0x1ec>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001966:	485d      	ldr	r0, [pc, #372]	; (8001adc <main+0x1f0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001968:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = LD2_Pin;
 800196e:	2720      	movs	r7, #32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001970:	f7fe ffe4 	bl	800093c <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001974:	a904      	add	r1, sp, #16
 8001976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197a:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = LD2_Pin;
 8001980:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001982:	f7fe ffdb 	bl	800093c <HAL_GPIO_Init>
  /*Configure GPIO pin for LED on push button 3*/
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	a904      	add	r1, sp, #16
 8001988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800198c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001994:	f7fe ffd2 	bl	800093c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001998:	4622      	mov	r2, r4
 800199a:	4621      	mov	r1, r4
 800199c:	2017      	movs	r0, #23
 800199e:	f7fe ff77 	bl	8000890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019a2:	2017      	movs	r0, #23
 80019a4:	f7fe ffa8 	bl	80008f8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019a8:	4621      	mov	r1, r4
 80019aa:	4622      	mov	r2, r4
 80019ac:	2028      	movs	r0, #40	; 0x28
 80019ae:	f7fe ff6f 	bl	8000890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019b2:	2028      	movs	r0, #40	; 0x28
 80019b4:	f7fe ffa0 	bl	80008f8 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 80019b8:	4849      	ldr	r0, [pc, #292]	; (8001ae0 <main+0x1f4>)
  huart2.Init.BaudRate = 38400;
 80019ba:	4a4a      	ldr	r2, [pc, #296]	; (8001ae4 <main+0x1f8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019bc:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 38400;
 80019be:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80019c2:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019c6:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019c8:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ca:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019cc:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ce:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d0:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019d2:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d4:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019d6:	f7ff ff22 	bl	800181e <HAL_UART_Init>
  hcan.Instance = CAN;
 80019da:	4b43      	ldr	r3, [pc, #268]	; (8001ae8 <main+0x1fc>)
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80019dc:	60ac      	str	r4, [r5, #8]
  hcan.Init.Prescaler = 32;
 80019de:	e885 0088 	stmia.w	r5, {r3, r7}
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 80019e2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80019e6:	612b      	str	r3, [r5, #16]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80019e8:	4628      	mov	r0, r5
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80019ea:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80019ee:	616b      	str	r3, [r5, #20]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80019f0:	60ec      	str	r4, [r5, #12]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80019f2:	762c      	strb	r4, [r5, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80019f4:	766c      	strb	r4, [r5, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80019f6:	76ac      	strb	r4, [r5, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80019f8:	76ec      	strb	r4, [r5, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80019fa:	772c      	strb	r4, [r5, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80019fc:	776c      	strb	r4, [r5, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80019fe:	f7fe fc45 	bl	800028c <HAL_CAN_Init>
  if(HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK) {	// Set the above values for filter 0
 8001a02:	a904      	add	r1, sp, #16
 8001a04:	4628      	mov	r0, r5
  filter.FilterBank = 0;							// This is filter number 0
 8001a06:	9409      	str	r4, [sp, #36]	; 0x24
  filter.FilterIdHigh = 0x0000;      				// All bits 0 - dont care about any - See page 1041 in reference manual for how to set these bits & mask bits in the register
 8001a08:	9404      	str	r4, [sp, #16]
  filter.FilterIdLow = 0x0000;
 8001a0a:	9405      	str	r4, [sp, #20]
  filter.FilterMaskIdHigh = 0x0000;
 8001a0c:	9406      	str	r4, [sp, #24]
  filter.FilterMaskIdLow = 0x0000;
 8001a0e:	9407      	str	r4, [sp, #28]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001a10:	9408      	str	r4, [sp, #32]
  filter.FilterMode = CAN_FILTERMODE_IDMASK; 		// uses mask mode (so can set range of IDs)
 8001a12:	940a      	str	r4, [sp, #40]	; 0x28
  filter.FilterScale = CAN_FILTERSCALE_32BIT;		// Use 32 bit filters
 8001a14:	960b      	str	r6, [sp, #44]	; 0x2c
  filter.FilterActivation = ENABLE;					// By default the filters are disabled so enable them
 8001a16:	960c      	str	r6, [sp, #48]	; 0x30
  filter.SlaveStartFilterBank = 0;
 8001a18:	940d      	str	r4, [sp, #52]	; 0x34
  if(HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK) {	// Set the above values for filter 0
 8001a1a:	f7fe fcb2 	bl	8000382 <HAL_CAN_ConfigFilter>
  if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8001a1e:	4628      	mov	r0, r5
 8001a20:	f7fe fd1b 	bl	800045a <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8001a24:	4628      	mov	r0, r5
 8001a26:	2102      	movs	r1, #2
 8001a28:	f7fe fe05 	bl	8000636 <HAL_CAN_ActivateNotification>
  TxHeader.IDE = CAN_ID_STD;		 				// Using standard mode. Note this = CAN_ID_EXT for extended mode
 8001a2c:	4b2f      	ldr	r3, [pc, #188]	; (8001aec <main+0x200>)
	if (RxData[0] == GO_TO_FLOOR_1) {
 8001a2e:	4d30      	ldr	r5, [pc, #192]	; (8001af0 <main+0x204>)
  TxHeader.IDE = CAN_ID_STD;		 				// Using standard mode. Note this = CAN_ID_EXT for extended mode
 8001a30:	609c      	str	r4, [r3, #8]
  TxHeader.ExtId = 0x00;			 				// Extended ID is not used
 8001a32:	605c      	str	r4, [r3, #4]
  TxHeader.StdId = ID;	 		 					// Standard mode ID is 0x100 -- CHANGE THIS LATER ---
 8001a34:	f44f 7280 	mov.w	r2, #256	; 0x100
  TxHeader.RTR = CAN_RTR_DATA;	 					// Send a data frame not an RTR
 8001a38:	60dc      	str	r4, [r3, #12]
  TxHeader.TransmitGlobalTime = DISABLE;
 8001a3a:	751c      	strb	r4, [r3, #20]
	 if (BUTTON != 0) {
 8001a3c:	4c2d      	ldr	r4, [pc, #180]	; (8001af4 <main+0x208>)
  TxHeader.DLC = 1;				 					// Data length code = 1 (only send one byte)
 8001a3e:	611e      	str	r6, [r3, #16]
  TxHeader.StdId = ID;	 		 					// Standard mode ID is 0x100 -- CHANGE THIS LATER ---
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	462e      	mov	r6, r5
	if (RxData[0] == GO_TO_FLOOR_1) {
 8001a44:	782b      	ldrb	r3, [r5, #0]
 8001a46:	2b05      	cmp	r3, #5
 8001a48:	d116      	bne.n	8001a78 <main+0x18c>
	  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  											// Turn on LED2
 8001a4a:	2120      	movs	r1, #32
 8001a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a50:	f7ff f849 	bl	8000ae6 <HAL_GPIO_TogglePin>
	  	HAL_Delay(2000);					    											// Keep LED on for 2 seconds
 8001a54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a58:	f7fe fc04 	bl	8000264 <HAL_Delay>
 8001a5c:	2300      	movs	r3, #0
	  	  RxData[i] = 0x00;																	// Reset the RxData[] buffer (used as flag)
 8001a5e:	461a      	mov	r2, r3
 8001a60:	54f2      	strb	r2, [r6, r3]
 8001a62:	3301      	adds	r3, #1
	  	for (i=0; i<8; i++) {
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d1fb      	bne.n	8001a60 <main+0x174>
	  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  											// Turn off LED2
 8001a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a6c:	2120      	movs	r1, #32
 8001a6e:	f7ff f83a 	bl	8000ae6 <HAL_GPIO_TogglePin>
	  	HAL_Delay(100);																		// Need a delay after toggle
 8001a72:	2064      	movs	r0, #100	; 0x64
 8001a74:	f7fe fbf6 	bl	8000264 <HAL_Delay>
		 if (BUTTON == BLUE_BUTTON_PRESSED) {												// Blue button pressed --> Turn on LED2 for 2 seconds and Transmit message
 8001a78:	7823      	ldrb	r3, [r4, #0]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d118      	bne.n	8001ab0 <main+0x1c4>
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  										// Turn on LED2
 8001a7e:	2120      	movs	r1, #32
 8001a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a84:	f7ff f82f 	bl	8000ae6 <HAL_GPIO_TogglePin>
			 HAL_Delay(2000);																// Leave it on for 2 seconds
 8001a88:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a8c:	f7fe fbea 	bl	8000264 <HAL_Delay>
			 TxData[0] = msg;																// Store the 1 character message to transmit into the TxData buffer and transmit over the CAN bus
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <main+0x20c>)
 8001a92:	4a1a      	ldr	r2, [pc, #104]	; (8001afc <main+0x210>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	7013      	strb	r3, [r2, #0]
			 if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {	// Transmit the message
 8001a98:	4914      	ldr	r1, [pc, #80]	; (8001aec <main+0x200>)
 8001a9a:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <main+0x214>)
 8001a9c:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <main+0x1e8>)
 8001a9e:	f7fe fd07 	bl	80004b0 <HAL_CAN_AddTxMessage>
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  										// Turn off LED2
 8001aa2:	2120      	movs	r1, #32
 8001aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa8:	f7ff f81d 	bl	8000ae6 <HAL_GPIO_TogglePin>
			 BUTTON = NO_BUTTON_PRESSED; 													// Reset the BUTTON flag
 8001aac:	2300      	movs	r3, #0
 8001aae:	7023      	strb	r3, [r4, #0]
		 if (BUTTON == PB3_PRESSED){
 8001ab0:	7823      	ldrb	r3, [r4, #0]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d1c6      	bne.n	8001a44 <main+0x158>
			 TxData[0] = msg;																// Store the 1 character message to transmit into the TxData buffer and transmit over the CAN bus
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <main+0x20c>)
 8001ab8:	4a10      	ldr	r2, [pc, #64]	; (8001afc <main+0x210>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	7013      	strb	r3, [r2, #0]
			 if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {	// Transmit the message
 8001abe:	490b      	ldr	r1, [pc, #44]	; (8001aec <main+0x200>)
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <main+0x214>)
 8001ac2:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <main+0x1e8>)
 8001ac4:	f7fe fcf4 	bl	80004b0 <HAL_CAN_AddTxMessage>
			 BUTTON = NO_BUTTON_PRESSED;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	7023      	strb	r3, [r4, #0]
 8001acc:	e7ba      	b.n	8001a44 <main+0x158>
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	20000034 	.word	0x20000034
 8001ad8:	10210000 	.word	0x10210000
 8001adc:	48000800 	.word	0x48000800
 8001ae0:	20000070 	.word	0x20000070
 8001ae4:	40004400 	.word	0x40004400
 8001ae8:	40006400 	.word	0x40006400
 8001aec:	200000e0 	.word	0x200000e0
 8001af0:	20000068 	.word	0x20000068
 8001af4:	2000002c 	.word	0x2000002c
 8001af8:	20000008 	.word	0x20000008
 8001afc:	2000005c 	.word	0x2000005c
 8001b00:	20000064 	.word	0x20000064

08001b04 <HAL_CAN_RxFifo0MsgPendingCallback>:
// This is called when the interrupt for FIFO0 is triggered.
/****************************************************************************************** */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
	/* Get RX message and store in RxData[] buffer */
	  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001b04:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <HAL_CAN_RxFifo0MsgPendingCallback+0xc>)
 8001b06:	4a03      	ldr	r2, [pc, #12]	; (8001b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x10>)
 8001b08:	2100      	movs	r1, #0
 8001b0a:	f7fe bd1e 	b.w	800054a <HAL_CAN_GetRxMessage>
 8001b0e:	bf00      	nop
 8001b10:	20000068 	.word	0x20000068
 8001b14:	200000f8 	.word	0x200000f8

08001b18 <HAL_GPIO_EXTI_Callback>:

// Override the HAL_GPIO Callback -- 1. light up LED2 and 2. Transmit message when the blue button is pushed
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  // Set the BUTTON Flag to indicate which button was pressed
  if (GPIO_Pin == GPIO_PIN_13)									// GPIO pin 13 is the blue push button
 8001b18:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
{
 8001b1c:	b510      	push	{r4, lr}
  if (GPIO_Pin == GPIO_PIN_13)									// GPIO pin 13 is the blue push button
 8001b1e:	d103      	bne.n	8001b28 <HAL_GPIO_EXTI_Callback+0x10>
	  BUTTON = BLUE_BUTTON_PRESSED;								// Blue button pressed
  }

  if (GPIO_Pin == GPIO_PIN_5)									// GPIO pin 5 (on PC)
  {
	  BUTTON = PB1_PRESSED;										// PB1 pressed (PC5)
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x40>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]
 8001b26:	bd10      	pop	{r4, pc}
  if (GPIO_Pin == GPIO_PIN_5)									// GPIO pin 5 (on PC)
 8001b28:	2820      	cmp	r0, #32
 8001b2a:	d0f9      	beq.n	8001b20 <HAL_GPIO_EXTI_Callback+0x8>
  }

  if (GPIO_Pin == GPIO_PIN_6)									// GPIO pin 6 (on PC)
 8001b2c:	2840      	cmp	r0, #64	; 0x40
 8001b2e:	d0f7      	beq.n	8001b20 <HAL_GPIO_EXTI_Callback+0x8>
  {
  	  BUTTON = PB2_PRESSED;										// PB1 pressed (PC6)
  }

  if (GPIO_Pin == GPIO_PIN_8)									// GPIO pin 8 (on PC)
 8001b30:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8001b34:	d10e      	bne.n	8001b54 <HAL_GPIO_EXTI_Callback+0x3c>
  {
  	  BUTTON = PB3_PRESSED;										// PB3 pressed (PC8)
 8001b36:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x40>)
 8001b38:	2401      	movs	r4, #1
		// if (BUTTON == PB3_PRESSED){
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  										// Turn on LED2
 8001b3a:	2120      	movs	r1, #32
 8001b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  	  BUTTON = PB3_PRESSED;										// PB3 pressed (PC8)
 8001b40:	701c      	strb	r4, [r3, #0]
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  										// Turn on LED2
 8001b42:	f7fe ffd0 	bl	8000ae6 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001b46:	4621      	mov	r1, r4
 8001b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
			 //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
			//BUTTON = NO_BUTTON_PRESSED;
		// }
  }

}
 8001b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001b50:	f7fe bfc9 	b.w	8000ae6 <HAL_GPIO_TogglePin>
 8001b54:	bd10      	pop	{r4, pc}
 8001b56:	bf00      	nop
 8001b58:	2000002c 	.word	0x2000002c

08001b5c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_MspInit+0x34>)
{
 8001b5e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b60:	699a      	ldr	r2, [r3, #24]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	619a      	str	r2, [r3, #24]
 8001b68:	699a      	ldr	r2, [r3, #24]
 8001b6a:	f002 0201 	and.w	r2, r2, #1
 8001b6e:	9200      	str	r2, [sp, #0]
 8001b70:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	69da      	ldr	r2, [r3, #28]
 8001b74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b78:	61da      	str	r2, [r3, #28]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b80:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b82:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b84:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b86:	f7fe fe71 	bl	800086c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8a:	b003      	add	sp, #12
 8001b8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b90:	40021000 	.word	0x40021000

08001b94 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b94:	b510      	push	{r4, lr}
 8001b96:	4604      	mov	r4, r0
 8001b98:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9a:	2214      	movs	r2, #20
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	a803      	add	r0, sp, #12
 8001ba0:	f000 f906 	bl	8001db0 <memset>
  if(hcan->Instance==CAN)
 8001ba4:	6822      	ldr	r2, [r4, #0]
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_CAN_MspInit+0x70>)
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d129      	bne.n	8001c00 <HAL_CAN_MspInit+0x6c>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bac:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	a903      	add	r1, sp, #12
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bb2:	69da      	ldr	r2, [r3, #28]
 8001bb4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001bb8:	61da      	str	r2, [r3, #28]
 8001bba:	69da      	ldr	r2, [r3, #28]
 8001bbc:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001bc0:	9201      	str	r2, [sp, #4]
 8001bc2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001bca:	615a      	str	r2, [r3, #20]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	9302      	str	r3, [sp, #8]
 8001bd4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001bd6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bda:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001be8:	2309      	movs	r3, #9
 8001bea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	f7fe fea6 	bl	800093c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2014      	movs	r0, #20
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	f7fe fe4b 	bl	8000890 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001bfa:	2014      	movs	r0, #20
 8001bfc:	f7fe fe7c 	bl	80008f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001c00:	b008      	add	sp, #32
 8001c02:	bd10      	pop	{r4, pc}
 8001c04:	40006400 	.word	0x40006400

08001c08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c08:	b510      	push	{r4, lr}
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0e:	2214      	movs	r2, #20
 8001c10:	2100      	movs	r1, #0
 8001c12:	a803      	add	r0, sp, #12
 8001c14:	f000 f8cc 	bl	8001db0 <memset>
  if(huart->Instance==USART2)
 8001c18:	6822      	ldr	r2, [r4, #0]
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_UART_MspInit+0x5c>)
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d11e      	bne.n	8001c5e <HAL_UART_MspInit+0x56>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c20:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c24:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c26:	69da      	ldr	r2, [r3, #28]
 8001c28:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c2c:	61da      	str	r2, [r3, #28]
 8001c2e:	69da      	ldr	r2, [r3, #28]
 8001c30:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001c34:	9201      	str	r2, [sp, #4]
 8001c36:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c3e:	615a      	str	r2, [r3, #20]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	9302      	str	r3, [sp, #8]
 8001c48:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c4a:	230c      	movs	r3, #12
 8001c4c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c56:	2307      	movs	r3, #7
 8001c58:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f7fe fe6f 	bl	800093c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c5e:	b008      	add	sp, #32
 8001c60:	bd10      	pop	{r4, pc}
 8001c62:	bf00      	nop
 8001c64:	40004400 	.word	0x40004400

08001c68 <NMI_Handler>:
 8001c68:	4770      	bx	lr

08001c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6a:	e7fe      	b.n	8001c6a <HardFault_Handler>

08001c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c6c:	e7fe      	b.n	8001c6c <MemManage_Handler>

08001c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6e:	e7fe      	b.n	8001c6e <BusFault_Handler>

08001c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c70:	e7fe      	b.n	8001c70 <UsageFault_Handler>

08001c72 <SVC_Handler>:
 8001c72:	4770      	bx	lr

08001c74 <DebugMon_Handler>:
 8001c74:	4770      	bx	lr

08001c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c76:	4770      	bx	lr

08001c78 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c78:	f7fe bae2 	b.w	8000240 <HAL_IncTick>

08001c7c <USB_LP_CAN_RX0_IRQHandler>:
void USB_LP_CAN_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001c7c:	4801      	ldr	r0, [pc, #4]	; (8001c84 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8001c7e:	f7fe bcf7 	b.w	8000670 <HAL_CAN_IRQHandler>
 8001c82:	bf00      	nop
 8001c84:	20000034 	.word	0x20000034

08001c88 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001c8a:	2020      	movs	r0, #32
 8001c8c:	f7fe ff30 	bl	8000af0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001c90:	2040      	movs	r0, #64	; 0x40
 8001c92:	f7fe ff2d 	bl	8000af0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c96:	f44f 7080 	mov.w	r0, #256	; 0x100
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c9e:	f7fe bf27 	b.w	8000af0 <HAL_GPIO_EXTI_IRQHandler>

08001ca2 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ca2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ca6:	f7fe bf23 	b.w	8000af0 <HAL_GPIO_EXTI_IRQHandler>
	...

08001cac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cac:	4915      	ldr	r1, [pc, #84]	; (8001d04 <SystemInit+0x58>)
 8001cae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001cb2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001cba:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <SystemInit+0x5c>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001cc4:	6858      	ldr	r0, [r3, #4]
 8001cc6:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <SystemInit+0x60>)
 8001cc8:	4002      	ands	r2, r0
 8001cca:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001cd2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cde:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001ce6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cea:	f022 020f 	bic.w	r2, r2, #15
 8001cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001cf0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001cf2:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <SystemInit+0x64>)
 8001cf4:	4002      	ands	r2, r0
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d00:	608b      	str	r3, [r1, #8]
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	f87fc00c 	.word	0xf87fc00c
 8001d10:	ff00fccc 	.word	0xff00fccc

08001d14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d4c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d1a:	e003      	b.n	8001d24 <LoopCopyDataInit>

08001d1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d22:	3104      	adds	r1, #4

08001d24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d24:	480b      	ldr	r0, [pc, #44]	; (8001d54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d2c:	d3f6      	bcc.n	8001d1c <CopyDataInit>
	ldr	r2, =_sbss
 8001d2e:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d30:	e002      	b.n	8001d38 <LoopFillZerobss>

08001d32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d34:	f842 3b04 	str.w	r3, [r2], #4

08001d38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <LoopForever+0x16>)
	cmp	r2, r3
 8001d3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d3c:	d3f9      	bcc.n	8001d32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d3e:	f7ff ffb5 	bl	8001cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d42:	f000 f811 	bl	8001d68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d46:	f7ff fdd1 	bl	80018ec <main>

08001d4a <LoopForever>:

LoopForever:
    b LoopForever
 8001d4a:	e7fe      	b.n	8001d4a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d4c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001d50:	08001e1c 	.word	0x08001e1c
	ldr	r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d58:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001d5c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001d60:	20000114 	.word	0x20000114

08001d64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d64:	e7fe      	b.n	8001d64 <ADC1_2_IRQHandler>
	...

08001d68 <__libc_init_array>:
 8001d68:	b570      	push	{r4, r5, r6, lr}
 8001d6a:	4e0d      	ldr	r6, [pc, #52]	; (8001da0 <__libc_init_array+0x38>)
 8001d6c:	4c0d      	ldr	r4, [pc, #52]	; (8001da4 <__libc_init_array+0x3c>)
 8001d6e:	1ba4      	subs	r4, r4, r6
 8001d70:	10a4      	asrs	r4, r4, #2
 8001d72:	2500      	movs	r5, #0
 8001d74:	42a5      	cmp	r5, r4
 8001d76:	d109      	bne.n	8001d8c <__libc_init_array+0x24>
 8001d78:	4e0b      	ldr	r6, [pc, #44]	; (8001da8 <__libc_init_array+0x40>)
 8001d7a:	4c0c      	ldr	r4, [pc, #48]	; (8001dac <__libc_init_array+0x44>)
 8001d7c:	f000 f820 	bl	8001dc0 <_init>
 8001d80:	1ba4      	subs	r4, r4, r6
 8001d82:	10a4      	asrs	r4, r4, #2
 8001d84:	2500      	movs	r5, #0
 8001d86:	42a5      	cmp	r5, r4
 8001d88:	d105      	bne.n	8001d96 <__libc_init_array+0x2e>
 8001d8a:	bd70      	pop	{r4, r5, r6, pc}
 8001d8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d90:	4798      	blx	r3
 8001d92:	3501      	adds	r5, #1
 8001d94:	e7ee      	b.n	8001d74 <__libc_init_array+0xc>
 8001d96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d9a:	4798      	blx	r3
 8001d9c:	3501      	adds	r5, #1
 8001d9e:	e7f2      	b.n	8001d86 <__libc_init_array+0x1e>
 8001da0:	08001e14 	.word	0x08001e14
 8001da4:	08001e14 	.word	0x08001e14
 8001da8:	08001e14 	.word	0x08001e14
 8001dac:	08001e18 	.word	0x08001e18

08001db0 <memset>:
 8001db0:	4402      	add	r2, r0
 8001db2:	4603      	mov	r3, r0
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d100      	bne.n	8001dba <memset+0xa>
 8001db8:	4770      	bx	lr
 8001dba:	f803 1b01 	strb.w	r1, [r3], #1
 8001dbe:	e7f9      	b.n	8001db4 <memset+0x4>

08001dc0 <_init>:
 8001dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc2:	bf00      	nop
 8001dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dc6:	bc08      	pop	{r3}
 8001dc8:	469e      	mov	lr, r3
 8001dca:	4770      	bx	lr

08001dcc <_fini>:
 8001dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dce:	bf00      	nop
 8001dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dd2:	bc08      	pop	{r3}
 8001dd4:	469e      	mov	lr, r3
 8001dd6:	4770      	bx	lr
